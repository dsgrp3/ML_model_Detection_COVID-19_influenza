2024-11-21 22:49:27,101:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-21 22:49:27,101:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-21 22:49:27,101:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-21 22:49:27,101:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 01:21:24,599:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 01:21:24,599:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 01:21:24,599:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 01:21:24,599:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 01:26:20,558:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 01:26:20,558:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 01:26:20,558:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 01:26:20,558:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 01:32:44,137:WARNING:C:\Users\teklu\AppData\Local\Temp\ipykernel_2668\1789193498.py:1: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.
  sns.heatmap(df.corr(),annot=True,cmap='coolwarm',linewidths=0.4)

2024-11-22 01:43:45,551:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 01:43:45,551:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 01:43:45,551:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 01:43:45,551:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 01:46:05,813:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 01:46:05,813:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 01:46:05,813:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 01:46:05,813:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 01:46:26,170:WARNING:C:\Users\teklu\AppData\Local\Temp\ipykernel_12464\1789193498.py:1: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.
  sns.heatmap(df.corr(),annot=True,cmap='coolwarm',linewidths=0.4)

2024-11-22 01:53:46,360:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 01:53:46,360:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 01:53:46,360:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 01:53:46,360:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 02:02:26,940:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 02:02:26,940:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 02:02:26,940:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 02:02:26,940:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 02:05:46,511:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 02:05:46,511:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 02:05:46,511:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 02:05:46,511:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 02:11:08,940:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 02:11:08,940:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 02:11:08,940:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 02:11:08,940:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 02:23:45,795:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 02:23:45,795:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 02:23:45,795:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 02:23:45,795:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 02:28:03,872:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 02:28:03,872:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 02:28:03,872:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 02:28:03,872:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 07:43:48,289:WARNING:C:\Users\teklu\AppData\Local\Temp\ipykernel_4320\1789193498.py:1: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.
  sns.heatmap(df.corr(),annot=True,cmap='coolwarm',linewidths=0.4)

2024-11-22 07:44:54,397:WARNING:C:\Users\teklu\AppData\Local\Temp\ipykernel_4320\1824426150.py:2: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.
  sns.heatmap(ili_data.corr(), annot=True, cmap='coolwarm', linewidths=0.4)

2024-11-22 07:50:24,021:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 07:50:24,021:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 07:50:24,021:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 07:50:24,021:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 07:52:32,786:INFO:PyCaret RegressionExperiment
2024-11-22 07:52:32,786:INFO:Logging name: reg-default-name
2024-11-22 07:52:32,787:INFO:ML Usecase: MLUsecase.REGRESSION
2024-11-22 07:52:32,787:INFO:version 3.3.2
2024-11-22 07:52:32,787:INFO:Initializing setup()
2024-11-22 07:52:32,787:INFO:self.USI: 568a
2024-11-22 07:52:32,787:INFO:self._variable_keys: {'fold_generator', 'target_param', 'exp_name_log', 'gpu_n_jobs_param', 'transform_target_param', 'fold_groups_param', '_available_plots', 'y_train', '_ml_usecase', 'y', 'fold_shuffle_param', 'memory', 'log_plots_param', 'USI', 'X', 'exp_id', 'y_test', 'idx', 'logging_param', 'n_jobs_param', 'html_param', 'X_test', 'gpu_param', 'data', 'X_train', 'seed', 'pipeline'}
2024-11-22 07:52:32,787:INFO:Checking environment
2024-11-22 07:52:32,787:INFO:python_version: 3.10.9
2024-11-22 07:52:32,787:INFO:python_build: ('main', 'Mar  1 2023 18:18:15')
2024-11-22 07:52:32,787:INFO:machine: AMD64
2024-11-22 07:52:32,787:INFO:platform: Windows-10-10.0.19045-SP0
2024-11-22 07:52:32,787:INFO:Memory: svmem(total=17044500480, available=8656621568, percent=49.2, used=8387878912, free=8656621568)
2024-11-22 07:52:32,787:INFO:Physical Core: 2
2024-11-22 07:52:32,790:INFO:Logical Core: 4
2024-11-22 07:52:32,790:INFO:Checking libraries
2024-11-22 07:52:32,790:INFO:System:
2024-11-22 07:52:32,791:INFO:    python: 3.10.9 | packaged by Anaconda, Inc. | (main, Mar  1 2023, 18:18:15) [MSC v.1916 64 bit (AMD64)]
2024-11-22 07:52:32,791:INFO:executable: C:\Users\teklu\anaconda3\python.exe
2024-11-22 07:52:32,791:INFO:   machine: Windows-10-10.0.19045-SP0
2024-11-22 07:52:32,791:INFO:PyCaret required dependencies:
2024-11-22 07:52:35,191:INFO:                 pip: 22.3.1
2024-11-22 07:52:35,191:INFO:          setuptools: 65.6.3
2024-11-22 07:52:35,191:INFO:             pycaret: 3.3.2
2024-11-22 07:52:35,191:INFO:             IPython: 8.10.0
2024-11-22 07:52:35,191:INFO:          ipywidgets: 7.6.5
2024-11-22 07:52:35,191:INFO:                tqdm: 4.64.1
2024-11-22 07:52:35,191:INFO:               numpy: 1.23.5
2024-11-22 07:52:35,191:INFO:              pandas: 1.5.3
2024-11-22 07:52:35,191:INFO:              jinja2: 3.1.2
2024-11-22 07:52:35,191:INFO:               scipy: 1.10.0
2024-11-22 07:52:35,191:INFO:              joblib: 1.3.2
2024-11-22 07:52:35,191:INFO:             sklearn: 1.4.2
2024-11-22 07:52:35,191:INFO:                pyod: 2.0.2
2024-11-22 07:52:35,191:INFO:            imblearn: 0.12.4
2024-11-22 07:52:35,191:INFO:   category_encoders: 2.6.4
2024-11-22 07:52:35,191:INFO:            lightgbm: 4.5.0
2024-11-22 07:52:35,191:INFO:               numba: 0.56.4
2024-11-22 07:52:35,191:INFO:            requests: 2.28.1
2024-11-22 07:52:35,191:INFO:          matplotlib: 3.7.0
2024-11-22 07:52:35,191:INFO:          scikitplot: 0.3.7
2024-11-22 07:52:35,191:INFO:         yellowbrick: 1.5
2024-11-22 07:52:35,191:INFO:              plotly: 5.24.1
2024-11-22 07:52:35,191:INFO:    plotly-resampler: Not installed
2024-11-22 07:52:35,191:INFO:             kaleido: 0.2.1
2024-11-22 07:52:35,191:INFO:           schemdraw: 0.15
2024-11-22 07:52:35,191:INFO:         statsmodels: 0.13.5
2024-11-22 07:52:35,191:INFO:              sktime: 0.26.0
2024-11-22 07:52:35,191:INFO:               tbats: 1.1.3
2024-11-22 07:52:35,191:INFO:            pmdarima: 2.0.4
2024-11-22 07:52:35,191:INFO:              psutil: 5.9.0
2024-11-22 07:52:35,191:INFO:          markupsafe: 2.1.1
2024-11-22 07:52:35,191:INFO:             pickle5: Not installed
2024-11-22 07:52:35,191:INFO:         cloudpickle: 2.0.0
2024-11-22 07:52:35,191:INFO:         deprecation: 2.1.0
2024-11-22 07:52:35,191:INFO:              xxhash: 3.5.0
2024-11-22 07:52:35,199:INFO:           wurlitzer: Not installed
2024-11-22 07:52:35,200:INFO:PyCaret optional dependencies:
2024-11-22 07:52:35,232:INFO:                shap: Not installed
2024-11-22 07:52:35,232:INFO:           interpret: Not installed
2024-11-22 07:52:35,232:INFO:                umap: Not installed
2024-11-22 07:52:35,232:INFO:     ydata_profiling: Not installed
2024-11-22 07:52:35,232:INFO:  explainerdashboard: Not installed
2024-11-22 07:52:35,232:INFO:             autoviz: Not installed
2024-11-22 07:52:35,232:INFO:           fairlearn: Not installed
2024-11-22 07:52:35,232:INFO:          deepchecks: Not installed
2024-11-22 07:52:35,232:INFO:             xgboost: Not installed
2024-11-22 07:52:35,232:INFO:            catboost: Not installed
2024-11-22 07:52:35,232:INFO:              kmodes: Not installed
2024-11-22 07:52:35,232:INFO:             mlxtend: Not installed
2024-11-22 07:52:35,232:INFO:       statsforecast: Not installed
2024-11-22 07:52:35,232:INFO:        tune_sklearn: Not installed
2024-11-22 07:52:35,232:INFO:                 ray: Not installed
2024-11-22 07:52:35,232:INFO:            hyperopt: Not installed
2024-11-22 07:52:35,232:INFO:              optuna: Not installed
2024-11-22 07:52:35,232:INFO:               skopt: Not installed
2024-11-22 07:52:35,232:INFO:              mlflow: Not installed
2024-11-22 07:52:35,232:INFO:              gradio: Not installed
2024-11-22 07:52:35,232:INFO:             fastapi: Not installed
2024-11-22 07:52:35,232:INFO:             uvicorn: Not installed
2024-11-22 07:52:35,232:INFO:              m2cgen: Not installed
2024-11-22 07:52:35,232:INFO:           evidently: Not installed
2024-11-22 07:52:35,241:INFO:               fugue: Not installed
2024-11-22 07:52:35,241:INFO:           streamlit: Not installed
2024-11-22 07:52:35,241:INFO:             prophet: Not installed
2024-11-22 07:52:35,241:INFO:None
2024-11-22 07:52:35,241:INFO:Set up data.
2024-11-22 07:54:19,631:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 07:54:19,631:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 07:54:19,631:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 07:54:19,631:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 07:57:13,509:INFO:PyCaret RegressionExperiment
2024-11-22 07:57:13,509:INFO:Logging name: reg-default-name
2024-11-22 07:57:13,509:INFO:ML Usecase: MLUsecase.REGRESSION
2024-11-22 07:57:13,509:INFO:version 3.3.2
2024-11-22 07:57:13,509:INFO:Initializing setup()
2024-11-22 07:57:13,509:INFO:self.USI: afa4
2024-11-22 07:57:13,509:INFO:self._variable_keys: {'data', 'seed', 'X_test', 'y_train', 'pipeline', 'gpu_n_jobs_param', 'log_plots_param', 'exp_id', 'logging_param', 'y_test', 'target_param', 'n_jobs_param', 'fold_groups_param', 'memory', 'html_param', 'exp_name_log', 'USI', '_available_plots', 'X', '_ml_usecase', 'gpu_param', 'idx', 'transform_target_param', 'fold_generator', 'X_train', 'y', 'fold_shuffle_param'}
2024-11-22 07:57:13,509:INFO:Checking environment
2024-11-22 07:57:13,509:INFO:python_version: 3.10.9
2024-11-22 07:57:13,509:INFO:python_build: ('main', 'Mar  1 2023 18:18:15')
2024-11-22 07:57:13,509:INFO:machine: AMD64
2024-11-22 07:57:13,509:INFO:platform: Windows-10-10.0.19045-SP0
2024-11-22 07:57:13,509:INFO:Memory: svmem(total=17044500480, available=8674242560, percent=49.1, used=8370257920, free=8674242560)
2024-11-22 07:57:13,509:INFO:Physical Core: 2
2024-11-22 07:57:13,509:INFO:Logical Core: 4
2024-11-22 07:57:13,509:INFO:Checking libraries
2024-11-22 07:57:13,509:INFO:System:
2024-11-22 07:57:13,509:INFO:    python: 3.10.9 | packaged by Anaconda, Inc. | (main, Mar  1 2023, 18:18:15) [MSC v.1916 64 bit (AMD64)]
2024-11-22 07:57:13,509:INFO:executable: C:\Users\teklu\anaconda3\python.exe
2024-11-22 07:57:13,509:INFO:   machine: Windows-10-10.0.19045-SP0
2024-11-22 07:57:13,509:INFO:PyCaret required dependencies:
2024-11-22 07:57:15,561:INFO:                 pip: 22.3.1
2024-11-22 07:57:15,561:INFO:          setuptools: 65.6.3
2024-11-22 07:57:15,561:INFO:             pycaret: 3.3.2
2024-11-22 07:57:15,561:INFO:             IPython: 8.10.0
2024-11-22 07:57:15,561:INFO:          ipywidgets: 7.6.5
2024-11-22 07:57:15,561:INFO:                tqdm: 4.64.1
2024-11-22 07:57:15,561:INFO:               numpy: 1.23.5
2024-11-22 07:57:15,561:INFO:              pandas: 1.5.3
2024-11-22 07:57:15,561:INFO:              jinja2: 3.1.2
2024-11-22 07:57:15,561:INFO:               scipy: 1.10.0
2024-11-22 07:57:15,561:INFO:              joblib: 1.3.2
2024-11-22 07:57:15,561:INFO:             sklearn: 1.4.2
2024-11-22 07:57:15,561:INFO:                pyod: 2.0.2
2024-11-22 07:57:15,561:INFO:            imblearn: 0.12.4
2024-11-22 07:57:15,561:INFO:   category_encoders: 2.6.4
2024-11-22 07:57:15,561:INFO:            lightgbm: 4.5.0
2024-11-22 07:57:15,561:INFO:               numba: 0.56.4
2024-11-22 07:57:15,561:INFO:            requests: 2.28.1
2024-11-22 07:57:15,561:INFO:          matplotlib: 3.7.0
2024-11-22 07:57:15,566:INFO:          scikitplot: 0.3.7
2024-11-22 07:57:15,566:INFO:         yellowbrick: 1.5
2024-11-22 07:57:15,567:INFO:              plotly: 5.24.1
2024-11-22 07:57:15,567:INFO:    plotly-resampler: Not installed
2024-11-22 07:57:15,567:INFO:             kaleido: 0.2.1
2024-11-22 07:57:15,567:INFO:           schemdraw: 0.15
2024-11-22 07:57:15,567:INFO:         statsmodels: 0.13.5
2024-11-22 07:57:15,568:INFO:              sktime: 0.26.0
2024-11-22 07:57:15,568:INFO:               tbats: 1.1.3
2024-11-22 07:57:15,568:INFO:            pmdarima: 2.0.4
2024-11-22 07:57:15,568:INFO:              psutil: 5.9.0
2024-11-22 07:57:15,568:INFO:          markupsafe: 2.1.1
2024-11-22 07:57:15,569:INFO:             pickle5: Not installed
2024-11-22 07:57:15,569:INFO:         cloudpickle: 2.0.0
2024-11-22 07:57:15,569:INFO:         deprecation: 2.1.0
2024-11-22 07:57:15,569:INFO:              xxhash: 3.5.0
2024-11-22 07:57:15,569:INFO:           wurlitzer: Not installed
2024-11-22 07:57:15,569:INFO:PyCaret optional dependencies:
2024-11-22 07:57:15,630:INFO:                shap: Not installed
2024-11-22 07:57:15,631:INFO:           interpret: Not installed
2024-11-22 07:57:15,631:INFO:                umap: Not installed
2024-11-22 07:57:15,631:INFO:     ydata_profiling: Not installed
2024-11-22 07:57:15,631:INFO:  explainerdashboard: Not installed
2024-11-22 07:57:15,632:INFO:             autoviz: Not installed
2024-11-22 07:57:15,633:INFO:           fairlearn: Not installed
2024-11-22 07:57:15,633:INFO:          deepchecks: Not installed
2024-11-22 07:57:15,633:INFO:             xgboost: Not installed
2024-11-22 07:57:15,633:INFO:            catboost: Not installed
2024-11-22 07:57:15,634:INFO:              kmodes: Not installed
2024-11-22 07:57:15,634:INFO:             mlxtend: Not installed
2024-11-22 07:57:15,635:INFO:       statsforecast: Not installed
2024-11-22 07:57:15,635:INFO:        tune_sklearn: Not installed
2024-11-22 07:57:15,635:INFO:                 ray: Not installed
2024-11-22 07:57:15,635:INFO:            hyperopt: Not installed
2024-11-22 07:57:15,636:INFO:              optuna: Not installed
2024-11-22 07:57:15,636:INFO:               skopt: Not installed
2024-11-22 07:57:15,636:INFO:              mlflow: Not installed
2024-11-22 07:57:15,637:INFO:              gradio: Not installed
2024-11-22 07:57:15,637:INFO:             fastapi: Not installed
2024-11-22 07:57:15,637:INFO:             uvicorn: Not installed
2024-11-22 07:57:15,637:INFO:              m2cgen: Not installed
2024-11-22 07:57:15,638:INFO:           evidently: Not installed
2024-11-22 07:57:15,638:INFO:               fugue: Not installed
2024-11-22 07:57:15,638:INFO:           streamlit: Not installed
2024-11-22 07:57:15,638:INFO:             prophet: Not installed
2024-11-22 07:57:15,638:INFO:None
2024-11-22 07:57:15,639:INFO:Set up data.
2024-11-22 07:57:15,691:INFO:Set up folding strategy.
2024-11-22 07:57:15,691:INFO:Set up train/test split.
2024-11-22 07:57:15,729:INFO:Set up index.
2024-11-22 07:57:15,731:INFO:Assigning column types.
2024-11-22 07:57:15,754:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-11-22 07:57:15,754:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-11-22 07:57:15,794:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-11-22 07:57:15,827:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-11-22 07:57:16,140:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-11-22 07:57:16,367:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-22 07:57:16,367:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:57:16,367:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:57:16,367:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-11-22 07:57:16,392:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-11-22 07:57:16,410:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-11-22 07:57:16,695:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-11-22 07:57:16,911:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-22 07:57:16,911:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:57:16,911:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:57:16,911:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2024-11-22 07:57:16,935:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-11-22 07:57:16,952:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-11-22 07:57:17,207:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-11-22 07:57:17,421:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-22 07:57:17,422:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:57:17,422:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:57:17,438:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-11-22 07:57:17,462:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-11-22 07:57:17,742:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-11-22 07:57:17,953:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-22 07:57:17,953:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:57:17,953:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:57:17,962:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2024-11-22 07:57:18,002:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-11-22 07:57:18,244:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-11-22 07:57:18,448:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-22 07:57:18,448:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:57:18,448:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:57:18,489:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-11-22 07:57:18,792:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-11-22 07:57:19,025:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-22 07:57:19,026:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:57:19,029:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:57:19,030:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2024-11-22 07:57:19,339:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-11-22 07:57:19,547:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-22 07:57:19,547:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:57:19,547:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:57:19,927:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-11-22 07:57:20,132:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-22 07:57:20,135:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:57:20,137:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:57:20,138:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-11-22 07:57:20,456:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-11-22 07:57:20,691:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:57:20,691:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:57:21,027:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-11-22 07:57:21,227:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:57:21,227:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:57:21,227:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2024-11-22 07:57:21,763:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:57:21,763:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:57:22,263:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:57:22,263:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:57:22,278:INFO:Preparing preprocessing pipeline...
2024-11-22 07:57:22,278:INFO:Set up simple imputation.
2024-11-22 07:57:22,291:INFO:Set up encoding of ordinal features.
2024-11-22 07:57:22,332:INFO:Set up encoding of categorical features.
2024-11-22 07:57:22,332:INFO:Set up feature normalization.
2024-11-22 07:57:23,108:INFO:Finished creating preprocessing pipeline.
2024-11-22 07:57:23,563:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\teklu\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Sex', 'Cough', 'Temprature',
                                             'Headache', 'Skin_rash',
                                             'runny_nose', 'sorthroat',
                                             'Hemoptysis', 'Breathing',
                                             'Arthritis', 'Vomiting'],
                                    tran...
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64},
                                                                        {'col': 'Breathing',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64},
                                                                        {'col': 'Arthritis',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64},
                                                                        {'col': 'Vomiting',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}]))),
                ('normalize',
                 TransformerWrapper(transformer=StandardScaler()))])
2024-11-22 07:57:23,563:INFO:Creating final display dataframe.
2024-11-22 07:57:24,435:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:289: UserWarning: Persisting input arguments took 0.52s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_full_transform(

2024-11-22 07:57:25,267:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:289: UserWarning: Persisting input arguments took 0.53s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_full_transform(

2024-11-22 07:57:25,430:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target   Covid_19_result
2                   Target type        Regression
3           Original data shape        (2001, 13)
4        Transformed data shape        (2001, 13)
5   Transformed train set shape        (1400, 13)
6    Transformed test set shape         (601, 13)
7              Numeric features                 1
8          Categorical features                11
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13     Maximum one-hot encoding                25
14              Encoding method              None
15                    Normalize              True
16             Normalize method            zscore
17               Fold Generator             KFold
18                  Fold Number                10
19                     CPU Jobs                -1
20                      Use GPU             False
21               Log Experiment             False
22              Experiment Name  reg-default-name
23                          USI              afa4
2024-11-22 07:57:25,986:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:57:25,986:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:57:26,499:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:57:26,499:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:57:26,499:INFO:setup() successfully completed in 13.01s...............
2024-11-22 07:57:26,499:INFO:Initializing create_model()
2024-11-22 07:57:26,499:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F5C490D3C0>, estimator=rf, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 07:57:26,499:INFO:Checking exceptions
2024-11-22 07:57:26,568:INFO:Importing libraries
2024-11-22 07:57:26,568:INFO:Copying training dataset
2024-11-22 07:57:26,608:INFO:Defining folds
2024-11-22 07:57:26,609:INFO:Declaring metric variables
2024-11-22 07:57:26,625:INFO:Importing untrained model
2024-11-22 07:57:26,636:INFO:Random Forest Regressor Imported successfully
2024-11-22 07:57:26,658:INFO:Starting cross validation
2024-11-22 07:57:26,680:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 07:59:29,556:INFO:PyCaret RegressionExperiment
2024-11-22 07:59:29,556:INFO:Logging name: reg-default-name
2024-11-22 07:59:29,556:INFO:ML Usecase: MLUsecase.REGRESSION
2024-11-22 07:59:29,556:INFO:version 3.3.2
2024-11-22 07:59:29,556:INFO:Initializing setup()
2024-11-22 07:59:29,556:INFO:self.USI: 4ee5
2024-11-22 07:59:29,559:INFO:self._variable_keys: {'data', 'seed', 'X_test', 'y_train', 'pipeline', 'gpu_n_jobs_param', 'log_plots_param', 'exp_id', 'logging_param', 'y_test', 'target_param', 'n_jobs_param', 'fold_groups_param', 'memory', 'html_param', 'exp_name_log', 'USI', '_available_plots', 'X', '_ml_usecase', 'gpu_param', 'idx', 'transform_target_param', 'fold_generator', 'X_train', 'y', 'fold_shuffle_param'}
2024-11-22 07:59:29,560:INFO:Checking environment
2024-11-22 07:59:29,560:INFO:python_version: 3.10.9
2024-11-22 07:59:29,560:INFO:python_build: ('main', 'Mar  1 2023 18:18:15')
2024-11-22 07:59:29,561:INFO:machine: AMD64
2024-11-22 07:59:29,561:INFO:platform: Windows-10-10.0.19045-SP0
2024-11-22 07:59:29,561:INFO:Memory: svmem(total=17044500480, available=8045740032, percent=52.8, used=8998760448, free=8045740032)
2024-11-22 07:59:29,561:INFO:Physical Core: 2
2024-11-22 07:59:29,561:INFO:Logical Core: 4
2024-11-22 07:59:29,561:INFO:Checking libraries
2024-11-22 07:59:29,561:INFO:System:
2024-11-22 07:59:29,561:INFO:    python: 3.10.9 | packaged by Anaconda, Inc. | (main, Mar  1 2023, 18:18:15) [MSC v.1916 64 bit (AMD64)]
2024-11-22 07:59:29,561:INFO:executable: C:\Users\teklu\anaconda3\python.exe
2024-11-22 07:59:29,561:INFO:   machine: Windows-10-10.0.19045-SP0
2024-11-22 07:59:29,561:INFO:PyCaret required dependencies:
2024-11-22 07:59:29,561:INFO:                 pip: 22.3.1
2024-11-22 07:59:29,561:INFO:          setuptools: 65.6.3
2024-11-22 07:59:29,561:INFO:             pycaret: 3.3.2
2024-11-22 07:59:29,561:INFO:             IPython: 8.10.0
2024-11-22 07:59:29,561:INFO:          ipywidgets: 7.6.5
2024-11-22 07:59:29,561:INFO:                tqdm: 4.64.1
2024-11-22 07:59:29,561:INFO:               numpy: 1.23.5
2024-11-22 07:59:29,561:INFO:              pandas: 1.5.3
2024-11-22 07:59:29,561:INFO:              jinja2: 3.1.2
2024-11-22 07:59:29,561:INFO:               scipy: 1.10.0
2024-11-22 07:59:29,561:INFO:              joblib: 1.3.2
2024-11-22 07:59:29,561:INFO:             sklearn: 1.4.2
2024-11-22 07:59:29,561:INFO:                pyod: 2.0.2
2024-11-22 07:59:29,561:INFO:            imblearn: 0.12.4
2024-11-22 07:59:29,561:INFO:   category_encoders: 2.6.4
2024-11-22 07:59:29,561:INFO:            lightgbm: 4.5.0
2024-11-22 07:59:29,561:INFO:               numba: 0.56.4
2024-11-22 07:59:29,561:INFO:            requests: 2.28.1
2024-11-22 07:59:29,561:INFO:          matplotlib: 3.7.0
2024-11-22 07:59:29,561:INFO:          scikitplot: 0.3.7
2024-11-22 07:59:29,561:INFO:         yellowbrick: 1.5
2024-11-22 07:59:29,561:INFO:              plotly: 5.24.1
2024-11-22 07:59:29,561:INFO:    plotly-resampler: Not installed
2024-11-22 07:59:29,561:INFO:             kaleido: 0.2.1
2024-11-22 07:59:29,561:INFO:           schemdraw: 0.15
2024-11-22 07:59:29,561:INFO:         statsmodels: 0.13.5
2024-11-22 07:59:29,561:INFO:              sktime: 0.26.0
2024-11-22 07:59:29,561:INFO:               tbats: 1.1.3
2024-11-22 07:59:29,561:INFO:            pmdarima: 2.0.4
2024-11-22 07:59:29,561:INFO:              psutil: 5.9.0
2024-11-22 07:59:29,561:INFO:          markupsafe: 2.1.1
2024-11-22 07:59:29,561:INFO:             pickle5: Not installed
2024-11-22 07:59:29,561:INFO:         cloudpickle: 2.0.0
2024-11-22 07:59:29,561:INFO:         deprecation: 2.1.0
2024-11-22 07:59:29,561:INFO:              xxhash: 3.5.0
2024-11-22 07:59:29,561:INFO:           wurlitzer: Not installed
2024-11-22 07:59:29,561:INFO:PyCaret optional dependencies:
2024-11-22 07:59:29,561:INFO:                shap: Not installed
2024-11-22 07:59:29,561:INFO:           interpret: Not installed
2024-11-22 07:59:29,561:INFO:                umap: Not installed
2024-11-22 07:59:29,561:INFO:     ydata_profiling: Not installed
2024-11-22 07:59:29,561:INFO:  explainerdashboard: Not installed
2024-11-22 07:59:29,561:INFO:             autoviz: Not installed
2024-11-22 07:59:29,561:INFO:           fairlearn: Not installed
2024-11-22 07:59:29,561:INFO:          deepchecks: Not installed
2024-11-22 07:59:29,561:INFO:             xgboost: Not installed
2024-11-22 07:59:29,561:INFO:            catboost: Not installed
2024-11-22 07:59:29,561:INFO:              kmodes: Not installed
2024-11-22 07:59:29,561:INFO:             mlxtend: Not installed
2024-11-22 07:59:29,569:INFO:       statsforecast: Not installed
2024-11-22 07:59:29,569:INFO:        tune_sklearn: Not installed
2024-11-22 07:59:29,570:INFO:                 ray: Not installed
2024-11-22 07:59:29,570:INFO:            hyperopt: Not installed
2024-11-22 07:59:29,571:INFO:              optuna: Not installed
2024-11-22 07:59:29,571:INFO:               skopt: Not installed
2024-11-22 07:59:29,571:INFO:              mlflow: Not installed
2024-11-22 07:59:29,571:INFO:              gradio: Not installed
2024-11-22 07:59:29,571:INFO:             fastapi: Not installed
2024-11-22 07:59:29,571:INFO:             uvicorn: Not installed
2024-11-22 07:59:29,571:INFO:              m2cgen: Not installed
2024-11-22 07:59:29,571:INFO:           evidently: Not installed
2024-11-22 07:59:29,571:INFO:               fugue: Not installed
2024-11-22 07:59:29,572:INFO:           streamlit: Not installed
2024-11-22 07:59:29,572:INFO:             prophet: Not installed
2024-11-22 07:59:29,572:INFO:None
2024-11-22 07:59:29,572:INFO:Set up data.
2024-11-22 07:59:29,593:INFO:Set up folding strategy.
2024-11-22 07:59:29,593:INFO:Set up train/test split.
2024-11-22 07:59:29,611:INFO:Set up index.
2024-11-22 07:59:29,611:INFO:Assigning column types.
2024-11-22 07:59:29,612:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-11-22 07:59:29,612:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-11-22 07:59:29,628:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-11-22 07:59:29,636:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-11-22 07:59:29,798:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-11-22 07:59:29,917:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-22 07:59:29,925:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:59:29,925:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:59:29,925:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-11-22 07:59:29,935:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-11-22 07:59:29,958:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-11-22 07:59:30,180:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-11-22 07:59:30,328:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-22 07:59:30,328:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:59:30,328:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:59:30,328:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2024-11-22 07:59:30,344:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-11-22 07:59:30,352:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-11-22 07:59:30,512:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-11-22 07:59:30,735:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-22 07:59:30,737:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:59:30,738:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:59:30,767:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-11-22 07:59:30,793:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-11-22 07:59:31,022:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-11-22 07:59:31,188:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-22 07:59:31,188:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:59:31,188:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:59:31,188:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2024-11-22 07:59:31,218:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-11-22 07:59:31,375:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-11-22 07:59:31,515:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-22 07:59:31,517:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:59:31,517:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:59:31,538:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-11-22 07:59:31,729:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-11-22 07:59:31,870:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-22 07:59:31,870:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:59:31,870:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:59:31,870:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2024-11-22 07:59:32,073:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-11-22 07:59:32,249:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-22 07:59:32,249:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:59:32,258:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:59:32,451:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-11-22 07:59:32,577:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-22 07:59:32,577:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:59:32,577:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:59:32,577:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-11-22 07:59:32,775:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-11-22 07:59:32,905:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:59:32,905:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:59:33,134:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-11-22 07:59:33,285:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:59:33,285:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:59:33,285:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2024-11-22 07:59:33,727:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:59:33,727:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:59:34,058:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:59:34,058:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:59:34,067:INFO:Preparing preprocessing pipeline...
2024-11-22 07:59:34,067:INFO:Set up simple imputation.
2024-11-22 07:59:34,083:INFO:Set up encoding of ordinal features.
2024-11-22 07:59:34,134:INFO:Set up encoding of categorical features.
2024-11-22 07:59:34,134:INFO:Set up feature normalization.
2024-11-22 07:59:34,517:INFO:Finished creating preprocessing pipeline.
2024-11-22 07:59:34,967:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\teklu\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Sex', 'Cough', 'Temprature',
                                             'Headache', 'Skin_rash',
                                             'runny_nose', 'sorthroat',
                                             'Hemoptysis', 'Breathing',
                                             'Arthritis', 'Vomiting'],
                                    tran...
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64},
                                                                        {'col': 'Breathing',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64},
                                                                        {'col': 'Arthritis',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64},
                                                                        {'col': 'Vomiting',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}]))),
                ('normalize',
                 TransformerWrapper(transformer=StandardScaler()))])
2024-11-22 07:59:34,967:INFO:Creating final display dataframe.
2024-11-22 07:59:35,819:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:289: UserWarning: Persisting input arguments took 0.53s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_full_transform(

2024-11-22 07:59:36,649:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:289: UserWarning: Persisting input arguments took 0.53s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_full_transform(

2024-11-22 07:59:36,813:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target   Covid_19_result
2                   Target type        Regression
3           Original data shape        (2001, 13)
4        Transformed data shape        (2001, 13)
5   Transformed train set shape        (1400, 13)
6    Transformed test set shape         (601, 13)
7              Numeric features                 1
8          Categorical features                11
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13     Maximum one-hot encoding                25
14              Encoding method              None
15                    Normalize              True
16             Normalize method            zscore
17               Fold Generator             KFold
18                  Fold Number                10
19                     CPU Jobs                -1
20                      Use GPU             False
21               Log Experiment             False
22              Experiment Name  reg-default-name
23                          USI              4ee5
2024-11-22 07:59:37,150:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:59:37,150:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:59:37,477:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:59:37,477:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 07:59:37,477:INFO:setup() successfully completed in 7.96s...............
2024-11-22 07:59:37,485:INFO:Initializing create_model()
2024-11-22 07:59:37,485:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F5BBD2F940>, estimator=rf, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 07:59:37,485:INFO:Checking exceptions
2024-11-22 07:59:37,541:INFO:Importing libraries
2024-11-22 07:59:37,541:INFO:Copying training dataset
2024-11-22 07:59:37,566:INFO:Defining folds
2024-11-22 07:59:37,566:INFO:Declaring metric variables
2024-11-22 07:59:37,577:INFO:Importing untrained model
2024-11-22 07:59:37,585:INFO:Random Forest Regressor Imported successfully
2024-11-22 07:59:37,600:INFO:Starting cross validation
2024-11-22 07:59:37,603:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 08:02:43,868:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\teklu\AppData\Local\Temp\joblib_memmapping_folder_14180_c71be9a87ab84e61a891b2463d01c666_306d9179b5834efa94544337dddd2249
  warnings.warn("Failed to delete temporary folder: {}"

2024-11-22 08:02:43,869:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\teklu\AppData\Local\Temp\joblib_memmapping_folder_14180_6827f20061f547fbae14d18b8b950029_488e69865c7344cc8d887f2f254da0d3
  warnings.warn("Failed to delete temporary folder: {}"

2024-11-22 08:02:43,869:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\teklu\AppData\Local\Temp\joblib_memmapping_folder_14180_c71be9a87ab84e61a891b2463d01c666_c8954fdd921841898eeaf0c62523defd
  warnings.warn("Failed to delete temporary folder: {}"

2024-11-22 08:02:43,870:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\teklu\AppData\Local\Temp\joblib_memmapping_folder_14180_c71be9a87ab84e61a891b2463d01c666_7d3b1c393727403e8fc735d39da87f48
  warnings.warn("Failed to delete temporary folder: {}"

2024-11-22 08:02:56,195:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 08:02:56,195:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 08:02:56,195:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 08:02:56,195:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 08:02:57,239:INFO:PyCaret RegressionExperiment
2024-11-22 08:02:57,239:INFO:Logging name: reg-default-name
2024-11-22 08:02:57,240:INFO:ML Usecase: MLUsecase.REGRESSION
2024-11-22 08:02:57,240:INFO:version 3.3.2
2024-11-22 08:02:57,240:INFO:Initializing setup()
2024-11-22 08:02:57,240:INFO:self.USI: aeb9
2024-11-22 08:02:57,240:INFO:self._variable_keys: {'fold_shuffle_param', 'n_jobs_param', 'gpu_n_jobs_param', 'X_test', 'USI', 'fold_generator', 'target_param', 'fold_groups_param', 'html_param', 'exp_id', 'data', '_ml_usecase', 'logging_param', 'log_plots_param', 'y', 'y_train', '_available_plots', 'idx', 'memory', 'y_test', 'seed', 'gpu_param', 'exp_name_log', 'X_train', 'transform_target_param', 'X', 'pipeline'}
2024-11-22 08:02:57,240:INFO:Checking environment
2024-11-22 08:02:57,241:INFO:python_version: 3.10.9
2024-11-22 08:02:57,241:INFO:python_build: ('main', 'Mar  1 2023 18:18:15')
2024-11-22 08:02:57,241:INFO:machine: AMD64
2024-11-22 08:02:57,241:INFO:platform: Windows-10-10.0.19045-SP0
2024-11-22 08:02:57,241:INFO:Memory: svmem(total=17044500480, available=8754171904, percent=48.6, used=8290328576, free=8754171904)
2024-11-22 08:02:57,241:INFO:Physical Core: 2
2024-11-22 08:02:57,241:INFO:Logical Core: 4
2024-11-22 08:02:57,241:INFO:Checking libraries
2024-11-22 08:02:57,241:INFO:System:
2024-11-22 08:02:57,241:INFO:    python: 3.10.9 | packaged by Anaconda, Inc. | (main, Mar  1 2023, 18:18:15) [MSC v.1916 64 bit (AMD64)]
2024-11-22 08:02:57,241:INFO:executable: C:\Users\teklu\anaconda3\python.exe
2024-11-22 08:02:57,241:INFO:   machine: Windows-10-10.0.19045-SP0
2024-11-22 08:02:57,241:INFO:PyCaret required dependencies:
2024-11-22 08:02:59,033:INFO:                 pip: 22.3.1
2024-11-22 08:02:59,033:INFO:          setuptools: 65.6.3
2024-11-22 08:02:59,033:INFO:             pycaret: 3.3.2
2024-11-22 08:02:59,033:INFO:             IPython: 8.10.0
2024-11-22 08:02:59,033:INFO:          ipywidgets: 7.6.5
2024-11-22 08:02:59,033:INFO:                tqdm: 4.64.1
2024-11-22 08:02:59,033:INFO:               numpy: 1.23.5
2024-11-22 08:02:59,033:INFO:              pandas: 1.5.3
2024-11-22 08:02:59,033:INFO:              jinja2: 3.1.2
2024-11-22 08:02:59,033:INFO:               scipy: 1.10.0
2024-11-22 08:02:59,033:INFO:              joblib: 1.3.2
2024-11-22 08:02:59,033:INFO:             sklearn: 1.4.2
2024-11-22 08:02:59,033:INFO:                pyod: 2.0.2
2024-11-22 08:02:59,033:INFO:            imblearn: 0.12.4
2024-11-22 08:02:59,033:INFO:   category_encoders: 2.6.4
2024-11-22 08:02:59,033:INFO:            lightgbm: 4.5.0
2024-11-22 08:02:59,033:INFO:               numba: 0.56.4
2024-11-22 08:02:59,033:INFO:            requests: 2.28.1
2024-11-22 08:02:59,033:INFO:          matplotlib: 3.7.0
2024-11-22 08:02:59,033:INFO:          scikitplot: 0.3.7
2024-11-22 08:02:59,033:INFO:         yellowbrick: 1.5
2024-11-22 08:02:59,033:INFO:              plotly: 5.24.1
2024-11-22 08:02:59,033:INFO:    plotly-resampler: Not installed
2024-11-22 08:02:59,033:INFO:             kaleido: 0.2.1
2024-11-22 08:02:59,033:INFO:           schemdraw: 0.15
2024-11-22 08:02:59,033:INFO:         statsmodels: 0.13.5
2024-11-22 08:02:59,033:INFO:              sktime: 0.26.0
2024-11-22 08:02:59,033:INFO:               tbats: 1.1.3
2024-11-22 08:02:59,033:INFO:            pmdarima: 2.0.4
2024-11-22 08:02:59,033:INFO:              psutil: 5.9.0
2024-11-22 08:02:59,033:INFO:          markupsafe: 2.1.1
2024-11-22 08:02:59,033:INFO:             pickle5: Not installed
2024-11-22 08:02:59,033:INFO:         cloudpickle: 2.0.0
2024-11-22 08:02:59,033:INFO:         deprecation: 2.1.0
2024-11-22 08:02:59,041:INFO:              xxhash: 3.5.0
2024-11-22 08:02:59,041:INFO:           wurlitzer: Not installed
2024-11-22 08:02:59,041:INFO:PyCaret optional dependencies:
2024-11-22 08:02:59,074:INFO:                shap: Not installed
2024-11-22 08:02:59,074:INFO:           interpret: Not installed
2024-11-22 08:02:59,074:INFO:                umap: Not installed
2024-11-22 08:02:59,074:INFO:     ydata_profiling: Not installed
2024-11-22 08:02:59,074:INFO:  explainerdashboard: Not installed
2024-11-22 08:02:59,074:INFO:             autoviz: Not installed
2024-11-22 08:02:59,074:INFO:           fairlearn: Not installed
2024-11-22 08:02:59,074:INFO:          deepchecks: Not installed
2024-11-22 08:02:59,074:INFO:             xgboost: Not installed
2024-11-22 08:02:59,074:INFO:            catboost: Not installed
2024-11-22 08:02:59,074:INFO:              kmodes: Not installed
2024-11-22 08:02:59,074:INFO:             mlxtend: Not installed
2024-11-22 08:02:59,074:INFO:       statsforecast: Not installed
2024-11-22 08:02:59,074:INFO:        tune_sklearn: Not installed
2024-11-22 08:02:59,074:INFO:                 ray: Not installed
2024-11-22 08:02:59,074:INFO:            hyperopt: Not installed
2024-11-22 08:02:59,074:INFO:              optuna: Not installed
2024-11-22 08:02:59,074:INFO:               skopt: Not installed
2024-11-22 08:02:59,074:INFO:              mlflow: Not installed
2024-11-22 08:02:59,074:INFO:              gradio: Not installed
2024-11-22 08:02:59,074:INFO:             fastapi: Not installed
2024-11-22 08:02:59,082:INFO:             uvicorn: Not installed
2024-11-22 08:02:59,082:INFO:              m2cgen: Not installed
2024-11-22 08:02:59,082:INFO:           evidently: Not installed
2024-11-22 08:02:59,082:INFO:               fugue: Not installed
2024-11-22 08:02:59,082:INFO:           streamlit: Not installed
2024-11-22 08:02:59,082:INFO:             prophet: Not installed
2024-11-22 08:02:59,082:INFO:None
2024-11-22 08:02:59,082:INFO:Set up data.
2024-11-22 08:02:59,100:INFO:Set up folding strategy.
2024-11-22 08:02:59,100:INFO:Set up train/test split.
2024-11-22 08:02:59,116:INFO:Set up index.
2024-11-22 08:02:59,116:INFO:Assigning column types.
2024-11-22 08:02:59,124:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-11-22 08:02:59,124:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-11-22 08:02:59,141:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-11-22 08:02:59,149:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-11-22 08:02:59,315:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-11-22 08:02:59,435:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-22 08:02:59,436:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:02:59,436:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:02:59,436:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-11-22 08:02:59,448:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-11-22 08:02:59,456:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-11-22 08:02:59,655:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-11-22 08:02:59,796:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-22 08:02:59,796:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:02:59,796:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:02:59,796:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2024-11-22 08:02:59,812:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-11-22 08:02:59,820:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-11-22 08:02:59,991:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-11-22 08:03:00,125:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-22 08:03:00,125:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:03:00,133:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:03:00,141:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-11-22 08:03:00,158:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-11-22 08:03:00,311:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-11-22 08:03:00,431:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-22 08:03:00,431:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:03:00,431:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:03:00,431:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2024-11-22 08:03:00,464:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-11-22 08:03:00,681:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-11-22 08:03:00,829:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-22 08:03:00,829:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:03:00,829:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:03:00,853:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-11-22 08:03:01,010:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-11-22 08:03:01,137:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-22 08:03:01,137:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:03:01,137:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:03:01,137:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2024-11-22 08:03:01,312:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-11-22 08:03:01,442:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-22 08:03:01,443:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:03:01,444:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:03:01,673:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-11-22 08:03:01,805:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-22 08:03:01,805:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:03:01,805:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:03:01,813:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-11-22 08:03:01,994:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-11-22 08:03:02,122:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:03:02,123:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:03:02,326:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-11-22 08:03:02,458:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:03:02,458:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:03:02,459:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2024-11-22 08:03:02,883:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:03:02,883:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:03:03,227:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:03:03,227:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:03:03,236:INFO:Preparing preprocessing pipeline...
2024-11-22 08:03:03,236:INFO:Set up simple imputation.
2024-11-22 08:03:03,246:INFO:Set up encoding of ordinal features.
2024-11-22 08:03:03,287:INFO:Set up encoding of categorical features.
2024-11-22 08:03:03,287:INFO:Set up feature normalization.
2024-11-22 08:03:03,928:INFO:Finished creating preprocessing pipeline.
2024-11-22 08:03:04,372:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\teklu\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Sex', 'Cough', 'Temprature',
                                             'Headache', 'Skin_rash',
                                             'runny_nose', 'sorthroat',
                                             'Hemoptysis', 'Breathing',
                                             'Arthritis', 'Vomiting'],
                                    tran...
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64},
                                                                        {'col': 'Breathing',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64},
                                                                        {'col': 'Arthritis',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64},
                                                                        {'col': 'Vomiting',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}]))),
                ('normalize',
                 TransformerWrapper(transformer=StandardScaler()))])
2024-11-22 08:03:04,372:INFO:Creating final display dataframe.
2024-11-22 08:03:04,683:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target   Covid_19_result
2                   Target type        Regression
3           Original data shape        (2001, 13)
4        Transformed data shape        (2001, 13)
5   Transformed train set shape        (1400, 13)
6    Transformed test set shape         (601, 13)
7              Numeric features                 1
8          Categorical features                11
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13     Maximum one-hot encoding                25
14              Encoding method              None
15                    Normalize              True
16             Normalize method            zscore
17               Fold Generator             KFold
18                  Fold Number                10
19                     CPU Jobs                -1
20                      Use GPU             False
21               Log Experiment             False
22              Experiment Name  reg-default-name
23                          USI              aeb9
2024-11-22 08:03:05,015:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:03:05,015:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:03:05,333:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:03:05,333:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:03:05,333:INFO:setup() successfully completed in 8.11s...............
2024-11-22 08:03:05,333:INFO:Initializing create_model()
2024-11-22 08:03:05,333:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023D30C91F90>, estimator=rf, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 08:03:05,333:INFO:Checking exceptions
2024-11-22 08:03:05,434:INFO:Importing libraries
2024-11-22 08:03:05,435:INFO:Copying training dataset
2024-11-22 08:03:05,448:INFO:Defining folds
2024-11-22 08:03:05,449:INFO:Declaring metric variables
2024-11-22 08:03:05,455:INFO:Importing untrained model
2024-11-22 08:03:05,463:INFO:Random Forest Regressor Imported successfully
2024-11-22 08:03:05,483:INFO:Starting cross validation
2024-11-22 08:03:05,505:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 08:06:03,431:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\teklu\AppData\Local\Temp\joblib_memmapping_folder_14628_9c73c53c46564146b9a78f8d22d70225_96b487eded5440069b96d302edc4f0be
  warnings.warn("Failed to delete temporary folder: {}"

2024-11-22 08:06:03,431:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\teklu\AppData\Local\Temp\joblib_memmapping_folder_14628_9c73c53c46564146b9a78f8d22d70225_1b71281bd9a54007b8a53481628977eb
  warnings.warn("Failed to delete temporary folder: {}"

2024-11-22 08:06:19,876:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 08:06:19,876:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 08:06:19,876:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 08:06:19,876:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 08:08:13,921:INFO:PyCaret RegressionExperiment
2024-11-22 08:08:13,921:INFO:Logging name: reg-default-name
2024-11-22 08:08:13,921:INFO:ML Usecase: MLUsecase.REGRESSION
2024-11-22 08:08:13,922:INFO:version 3.3.2
2024-11-22 08:08:13,922:INFO:Initializing setup()
2024-11-22 08:08:13,922:INFO:self.USI: 1cf8
2024-11-22 08:08:13,922:INFO:self._variable_keys: {'exp_id', 'log_plots_param', 'gpu_param', 'y', 'X_test', 'target_param', 'data', 'y_train', 'idx', 'USI', 'memory', 'y_test', 'X_train', 'gpu_n_jobs_param', 'n_jobs_param', 'X', 'logging_param', 'html_param', 'fold_generator', 'transform_target_param', 'fold_groups_param', '_ml_usecase', '_available_plots', 'exp_name_log', 'fold_shuffle_param', 'pipeline', 'seed'}
2024-11-22 08:08:13,923:INFO:Checking environment
2024-11-22 08:08:13,923:INFO:python_version: 3.10.9
2024-11-22 08:08:13,923:INFO:python_build: ('main', 'Mar  1 2023 18:18:15')
2024-11-22 08:08:13,923:INFO:machine: AMD64
2024-11-22 08:08:13,923:INFO:platform: Windows-10-10.0.19045-SP0
2024-11-22 08:08:13,924:INFO:Memory: svmem(total=17044500480, available=8793522176, percent=48.4, used=8250978304, free=8793522176)
2024-11-22 08:08:13,924:INFO:Physical Core: 2
2024-11-22 08:08:13,924:INFO:Logical Core: 4
2024-11-22 08:08:13,925:INFO:Checking libraries
2024-11-22 08:08:13,925:INFO:System:
2024-11-22 08:08:13,925:INFO:    python: 3.10.9 | packaged by Anaconda, Inc. | (main, Mar  1 2023, 18:18:15) [MSC v.1916 64 bit (AMD64)]
2024-11-22 08:08:13,925:INFO:executable: C:\Users\teklu\anaconda3\python.exe
2024-11-22 08:08:13,926:INFO:   machine: Windows-10-10.0.19045-SP0
2024-11-22 08:08:13,926:INFO:PyCaret required dependencies:
2024-11-22 08:08:15,934:INFO:                 pip: 22.3.1
2024-11-22 08:08:15,934:INFO:          setuptools: 65.6.3
2024-11-22 08:08:15,934:INFO:             pycaret: 3.3.2
2024-11-22 08:08:15,934:INFO:             IPython: 8.10.0
2024-11-22 08:08:15,934:INFO:          ipywidgets: 7.6.5
2024-11-22 08:08:15,934:INFO:                tqdm: 4.64.1
2024-11-22 08:08:15,934:INFO:               numpy: 1.23.5
2024-11-22 08:08:15,934:INFO:              pandas: 1.5.3
2024-11-22 08:08:15,934:INFO:              jinja2: 3.1.2
2024-11-22 08:08:15,934:INFO:               scipy: 1.10.0
2024-11-22 08:08:15,934:INFO:              joblib: 1.3.2
2024-11-22 08:08:15,934:INFO:             sklearn: 1.4.2
2024-11-22 08:08:15,934:INFO:                pyod: 2.0.2
2024-11-22 08:08:15,934:INFO:            imblearn: 0.12.4
2024-11-22 08:08:15,934:INFO:   category_encoders: 2.6.4
2024-11-22 08:08:15,939:INFO:            lightgbm: 4.5.0
2024-11-22 08:08:15,939:INFO:               numba: 0.56.4
2024-11-22 08:08:15,939:INFO:            requests: 2.28.1
2024-11-22 08:08:15,939:INFO:          matplotlib: 3.7.0
2024-11-22 08:08:15,939:INFO:          scikitplot: 0.3.7
2024-11-22 08:08:15,941:INFO:         yellowbrick: 1.5
2024-11-22 08:08:15,941:INFO:              plotly: 5.24.1
2024-11-22 08:08:15,941:INFO:    plotly-resampler: Not installed
2024-11-22 08:08:15,941:INFO:             kaleido: 0.2.1
2024-11-22 08:08:15,941:INFO:           schemdraw: 0.15
2024-11-22 08:08:15,941:INFO:         statsmodels: 0.13.5
2024-11-22 08:08:15,941:INFO:              sktime: 0.26.0
2024-11-22 08:08:15,941:INFO:               tbats: 1.1.3
2024-11-22 08:08:15,941:INFO:            pmdarima: 2.0.4
2024-11-22 08:08:15,942:INFO:              psutil: 5.9.0
2024-11-22 08:08:15,942:INFO:          markupsafe: 2.1.1
2024-11-22 08:08:15,942:INFO:             pickle5: Not installed
2024-11-22 08:08:15,942:INFO:         cloudpickle: 2.0.0
2024-11-22 08:08:15,942:INFO:         deprecation: 2.1.0
2024-11-22 08:08:15,942:INFO:              xxhash: 3.5.0
2024-11-22 08:08:15,943:INFO:           wurlitzer: Not installed
2024-11-22 08:08:15,943:INFO:PyCaret optional dependencies:
2024-11-22 08:08:15,977:INFO:                shap: Not installed
2024-11-22 08:08:15,977:INFO:           interpret: Not installed
2024-11-22 08:08:15,977:INFO:                umap: Not installed
2024-11-22 08:08:15,977:INFO:     ydata_profiling: Not installed
2024-11-22 08:08:15,977:INFO:  explainerdashboard: Not installed
2024-11-22 08:08:15,977:INFO:             autoviz: Not installed
2024-11-22 08:08:15,977:INFO:           fairlearn: Not installed
2024-11-22 08:08:15,977:INFO:          deepchecks: Not installed
2024-11-22 08:08:15,977:INFO:             xgboost: Not installed
2024-11-22 08:08:15,977:INFO:            catboost: Not installed
2024-11-22 08:08:15,977:INFO:              kmodes: Not installed
2024-11-22 08:08:15,977:INFO:             mlxtend: Not installed
2024-11-22 08:08:15,977:INFO:       statsforecast: Not installed
2024-11-22 08:08:15,977:INFO:        tune_sklearn: Not installed
2024-11-22 08:08:15,977:INFO:                 ray: Not installed
2024-11-22 08:08:15,977:INFO:            hyperopt: Not installed
2024-11-22 08:08:15,977:INFO:              optuna: Not installed
2024-11-22 08:08:15,977:INFO:               skopt: Not installed
2024-11-22 08:08:15,977:INFO:              mlflow: Not installed
2024-11-22 08:08:15,977:INFO:              gradio: Not installed
2024-11-22 08:08:15,985:INFO:             fastapi: Not installed
2024-11-22 08:08:15,985:INFO:             uvicorn: Not installed
2024-11-22 08:08:15,985:INFO:              m2cgen: Not installed
2024-11-22 08:08:15,985:INFO:           evidently: Not installed
2024-11-22 08:08:15,985:INFO:               fugue: Not installed
2024-11-22 08:08:15,985:INFO:           streamlit: Not installed
2024-11-22 08:08:15,985:INFO:             prophet: Not installed
2024-11-22 08:08:15,985:INFO:None
2024-11-22 08:08:15,986:INFO:Set up data.
2024-11-22 08:14:38,424:INFO:PyCaret ClassificationExperiment
2024-11-22 08:14:38,424:INFO:Logging name: clf-default-name
2024-11-22 08:14:38,424:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-11-22 08:14:38,424:INFO:version 3.3.2
2024-11-22 08:14:38,425:INFO:Initializing setup()
2024-11-22 08:14:38,425:INFO:self.USI: e3ac
2024-11-22 08:14:38,425:INFO:self._variable_keys: {'exp_id', 'log_plots_param', 'gpu_param', 'y', 'X_test', 'target_param', 'data', 'y_train', 'idx', 'USI', 'memory', 'y_test', 'X_train', 'gpu_n_jobs_param', 'n_jobs_param', 'X', 'logging_param', 'html_param', 'fold_generator', 'fold_groups_param', 'is_multiclass', '_ml_usecase', '_available_plots', 'fix_imbalance', 'exp_name_log', 'fold_shuffle_param', 'pipeline', 'seed'}
2024-11-22 08:14:38,425:INFO:Checking environment
2024-11-22 08:14:38,425:INFO:python_version: 3.10.9
2024-11-22 08:14:38,425:INFO:python_build: ('main', 'Mar  1 2023 18:18:15')
2024-11-22 08:14:38,425:INFO:machine: AMD64
2024-11-22 08:14:38,425:INFO:platform: Windows-10-10.0.19045-SP0
2024-11-22 08:14:38,425:INFO:Memory: svmem(total=17044500480, available=8345686016, percent=51.0, used=8698814464, free=8345686016)
2024-11-22 08:14:38,425:INFO:Physical Core: 2
2024-11-22 08:14:38,425:INFO:Logical Core: 4
2024-11-22 08:14:38,425:INFO:Checking libraries
2024-11-22 08:14:38,425:INFO:System:
2024-11-22 08:14:38,425:INFO:    python: 3.10.9 | packaged by Anaconda, Inc. | (main, Mar  1 2023, 18:18:15) [MSC v.1916 64 bit (AMD64)]
2024-11-22 08:14:38,425:INFO:executable: C:\Users\teklu\anaconda3\python.exe
2024-11-22 08:14:38,425:INFO:   machine: Windows-10-10.0.19045-SP0
2024-11-22 08:14:38,425:INFO:PyCaret required dependencies:
2024-11-22 08:14:38,425:INFO:                 pip: 22.3.1
2024-11-22 08:14:38,425:INFO:          setuptools: 65.6.3
2024-11-22 08:14:38,425:INFO:             pycaret: 3.3.2
2024-11-22 08:14:38,425:INFO:             IPython: 8.10.0
2024-11-22 08:14:38,425:INFO:          ipywidgets: 7.6.5
2024-11-22 08:14:38,425:INFO:                tqdm: 4.64.1
2024-11-22 08:14:38,425:INFO:               numpy: 1.23.5
2024-11-22 08:14:38,425:INFO:              pandas: 1.5.3
2024-11-22 08:14:38,425:INFO:              jinja2: 3.1.2
2024-11-22 08:14:38,425:INFO:               scipy: 1.10.0
2024-11-22 08:14:38,425:INFO:              joblib: 1.3.2
2024-11-22 08:14:38,425:INFO:             sklearn: 1.4.2
2024-11-22 08:14:38,425:INFO:                pyod: 2.0.2
2024-11-22 08:14:38,425:INFO:            imblearn: 0.12.4
2024-11-22 08:14:38,425:INFO:   category_encoders: 2.6.4
2024-11-22 08:14:38,425:INFO:            lightgbm: 4.5.0
2024-11-22 08:14:38,425:INFO:               numba: 0.56.4
2024-11-22 08:14:38,425:INFO:            requests: 2.28.1
2024-11-22 08:14:38,430:INFO:          matplotlib: 3.7.0
2024-11-22 08:14:38,430:INFO:          scikitplot: 0.3.7
2024-11-22 08:14:38,430:INFO:         yellowbrick: 1.5
2024-11-22 08:14:38,430:INFO:              plotly: 5.24.1
2024-11-22 08:14:38,430:INFO:    plotly-resampler: Not installed
2024-11-22 08:14:38,431:INFO:             kaleido: 0.2.1
2024-11-22 08:14:38,431:INFO:           schemdraw: 0.15
2024-11-22 08:14:38,431:INFO:         statsmodels: 0.13.5
2024-11-22 08:14:38,431:INFO:              sktime: 0.26.0
2024-11-22 08:14:38,431:INFO:               tbats: 1.1.3
2024-11-22 08:14:38,431:INFO:            pmdarima: 2.0.4
2024-11-22 08:14:38,431:INFO:              psutil: 5.9.0
2024-11-22 08:14:38,432:INFO:          markupsafe: 2.1.1
2024-11-22 08:14:38,432:INFO:             pickle5: Not installed
2024-11-22 08:14:38,432:INFO:         cloudpickle: 2.0.0
2024-11-22 08:14:38,432:INFO:         deprecation: 2.1.0
2024-11-22 08:14:38,432:INFO:              xxhash: 3.5.0
2024-11-22 08:14:38,432:INFO:           wurlitzer: Not installed
2024-11-22 08:14:38,432:INFO:PyCaret optional dependencies:
2024-11-22 08:14:38,433:INFO:                shap: Not installed
2024-11-22 08:14:38,433:INFO:           interpret: Not installed
2024-11-22 08:14:38,434:INFO:                umap: Not installed
2024-11-22 08:14:38,434:INFO:     ydata_profiling: Not installed
2024-11-22 08:14:38,434:INFO:  explainerdashboard: Not installed
2024-11-22 08:14:38,436:INFO:             autoviz: Not installed
2024-11-22 08:14:38,437:INFO:           fairlearn: Not installed
2024-11-22 08:14:38,437:INFO:          deepchecks: Not installed
2024-11-22 08:14:38,437:INFO:             xgboost: Not installed
2024-11-22 08:14:38,437:INFO:            catboost: Not installed
2024-11-22 08:14:38,437:INFO:              kmodes: Not installed
2024-11-22 08:14:38,437:INFO:             mlxtend: Not installed
2024-11-22 08:14:38,437:INFO:       statsforecast: Not installed
2024-11-22 08:14:38,437:INFO:        tune_sklearn: Not installed
2024-11-22 08:14:38,438:INFO:                 ray: Not installed
2024-11-22 08:14:38,438:INFO:            hyperopt: Not installed
2024-11-22 08:14:38,438:INFO:              optuna: Not installed
2024-11-22 08:14:38,438:INFO:               skopt: Not installed
2024-11-22 08:14:38,438:INFO:              mlflow: Not installed
2024-11-22 08:14:38,439:INFO:              gradio: Not installed
2024-11-22 08:14:38,439:INFO:             fastapi: Not installed
2024-11-22 08:14:38,439:INFO:             uvicorn: Not installed
2024-11-22 08:14:38,439:INFO:              m2cgen: Not installed
2024-11-22 08:14:38,439:INFO:           evidently: Not installed
2024-11-22 08:14:38,440:INFO:               fugue: Not installed
2024-11-22 08:14:38,440:INFO:           streamlit: Not installed
2024-11-22 08:14:38,441:INFO:             prophet: Not installed
2024-11-22 08:14:38,441:INFO:None
2024-11-22 08:14:38,441:INFO:Set up data.
2024-11-22 08:14:38,531:INFO:Set up folding strategy.
2024-11-22 08:14:38,531:INFO:Set up train/test split.
2024-11-22 08:14:38,558:INFO:Set up index.
2024-11-22 08:14:38,559:INFO:Assigning column types.
2024-11-22 08:14:38,573:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-11-22 08:14:38,712:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-22 08:14:38,731:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-22 08:14:38,844:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:14:38,845:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:14:38,991:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-22 08:14:38,993:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-22 08:14:39,082:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:14:39,083:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:14:39,085:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-11-22 08:14:39,246:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-22 08:14:39,345:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:14:39,345:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:14:39,529:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-22 08:14:39,618:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:14:39,623:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:14:39,623:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-11-22 08:14:39,881:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:14:39,881:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:14:40,116:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:14:40,118:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:14:40,123:INFO:Preparing preprocessing pipeline...
2024-11-22 08:14:40,124:INFO:Set up label encoding.
2024-11-22 08:14:40,124:INFO:Set up simple imputation.
2024-11-22 08:14:40,149:INFO:Set up encoding of ordinal features.
2024-11-22 08:14:40,205:INFO:Set up encoding of categorical features.
2024-11-22 08:14:40,888:INFO:Finished creating preprocessing pipeline.
2024-11-22 08:14:41,212:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\teklu\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['Age'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                                        {'col': 'Hemoptysis',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64},
                                                                        {'col': 'Breathing',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64},
                                                                        {'col': 'Arthritis',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64},
                                                                        {'col': 'Vomiting',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False)
2024-11-22 08:14:41,212:INFO:Creating final display dataframe.
2024-11-22 08:14:43,017:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:289: UserWarning: Persisting input arguments took 0.61s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_full_transform(

2024-11-22 08:14:43,194:INFO:Setup _display_container:                     Description                     Value
0                    Session id                       123
1                        Target           Covid_19_result
2                   Target type                    Binary
3                Target mapping  Negative: 0, Positive: 1
4           Original data shape                (2001, 13)
5        Transformed data shape                (2001, 13)
6   Transformed train set shape                (1400, 13)
7    Transformed test set shape                 (601, 13)
8              Numeric features                         1
9          Categorical features                        11
10                   Preprocess                      True
11              Imputation type                    simple
12           Numeric imputation                      mean
13       Categorical imputation                      mode
14     Maximum one-hot encoding                        25
15              Encoding method                      None
16               Fold Generator           StratifiedKFold
17                  Fold Number                        10
18                     CPU Jobs                        -1
19                      Use GPU                     False
20               Log Experiment                     False
21              Experiment Name          clf-default-name
22                          USI                      e3ac
2024-11-22 08:14:43,559:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:14:43,559:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:14:43,822:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:14:43,822:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:14:43,831:INFO:setup() successfully completed in 5.43s...............
2024-11-22 08:14:43,831:INFO:Initializing compare_models()
2024-11-22 08:14:43,831:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B1A7280>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002165B1A7280>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-11-22 08:14:43,831:INFO:Checking exceptions
2024-11-22 08:14:43,839:INFO:Preparing display monitor
2024-11-22 08:14:43,936:INFO:Initializing Logistic Regression
2024-11-22 08:14:43,936:INFO:Total runtime is 0.0 minutes
2024-11-22 08:14:43,944:INFO:SubProcess create_model() called ==================================
2024-11-22 08:14:43,945:INFO:Initializing create_model()
2024-11-22 08:14:43,945:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B1A7280>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002165EA75960>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 08:14:43,946:INFO:Checking exceptions
2024-11-22 08:14:43,946:INFO:Importing libraries
2024-11-22 08:14:43,946:INFO:Copying training dataset
2024-11-22 08:14:43,959:INFO:Defining folds
2024-11-22 08:14:43,959:INFO:Declaring metric variables
2024-11-22 08:14:43,966:INFO:Importing untrained model
2024-11-22 08:14:43,973:INFO:Logistic Regression Imported successfully
2024-11-22 08:14:43,993:INFO:Starting cross validation
2024-11-22 08:14:43,997:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 08:14:57,654:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:14:57,654:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:14:57,672:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:14:57,752:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:14:57,768:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:14:57,783:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:14:57,805:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:14:57,806:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:14:57,821:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:14:57,860:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:14:57,876:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:14:57,876:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:14:58,581:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:14:58,585:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:14:58,615:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:14:58,649:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:14:58,665:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:14:58,665:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:14:58,682:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:14:58,683:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:14:58,683:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:14:58,751:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:14:58,762:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:14:58,770:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:14:59,197:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:14:59,215:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:14:59,223:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:14:59,241:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:14:59,251:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:14:59,259:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:14:59,283:INFO:Calculating mean and std
2024-11-22 08:14:59,283:INFO:Creating metrics dataframe
2024-11-22 08:14:59,297:INFO:Uploading results into container
2024-11-22 08:14:59,297:INFO:Uploading model into container now
2024-11-22 08:14:59,297:INFO:_master_model_container: 1
2024-11-22 08:14:59,297:INFO:_display_container: 2
2024-11-22 08:14:59,297:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-22 08:14:59,297:INFO:create_model() successfully completed......................................
2024-11-22 08:14:59,491:INFO:SubProcess create_model() end ==================================
2024-11-22 08:14:59,491:INFO:Creating metrics dataframe
2024-11-22 08:14:59,520:INFO:Initializing K Neighbors Classifier
2024-11-22 08:14:59,520:INFO:Total runtime is 0.2597362041473389 minutes
2024-11-22 08:14:59,536:INFO:SubProcess create_model() called ==================================
2024-11-22 08:14:59,536:INFO:Initializing create_model()
2024-11-22 08:14:59,536:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B1A7280>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002165EA75960>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 08:14:59,536:INFO:Checking exceptions
2024-11-22 08:14:59,536:INFO:Importing libraries
2024-11-22 08:14:59,536:INFO:Copying training dataset
2024-11-22 08:14:59,556:INFO:Defining folds
2024-11-22 08:14:59,556:INFO:Declaring metric variables
2024-11-22 08:14:59,573:INFO:Importing untrained model
2024-11-22 08:14:59,596:INFO:K Neighbors Classifier Imported successfully
2024-11-22 08:14:59,623:INFO:Starting cross validation
2024-11-22 08:14:59,632:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 08:15:00,442:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:00,450:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:00,457:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:00,457:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:00,457:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:00,465:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:00,473:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:00,473:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:00,473:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:00,481:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:00,489:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:00,489:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:01,203:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:01,217:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:01,233:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:01,235:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:01,246:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:01,246:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:01,248:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:01,256:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:01,264:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:01,272:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:01,272:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:01,281:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:01,853:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:01,864:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:01,869:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:01,882:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:01,882:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:01,890:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:01,923:INFO:Calculating mean and std
2024-11-22 08:15:01,924:INFO:Creating metrics dataframe
2024-11-22 08:15:01,933:INFO:Uploading results into container
2024-11-22 08:15:01,933:INFO:Uploading model into container now
2024-11-22 08:15:01,933:INFO:_master_model_container: 2
2024-11-22 08:15:01,933:INFO:_display_container: 2
2024-11-22 08:15:01,933:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-11-22 08:15:01,933:INFO:create_model() successfully completed......................................
2024-11-22 08:15:02,106:INFO:SubProcess create_model() end ==================================
2024-11-22 08:15:02,106:INFO:Creating metrics dataframe
2024-11-22 08:15:02,137:INFO:Initializing Naive Bayes
2024-11-22 08:15:02,137:INFO:Total runtime is 0.30335062742233276 minutes
2024-11-22 08:15:02,154:INFO:SubProcess create_model() called ==================================
2024-11-22 08:15:02,154:INFO:Initializing create_model()
2024-11-22 08:15:02,154:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B1A7280>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002165EA75960>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 08:15:02,154:INFO:Checking exceptions
2024-11-22 08:15:02,154:INFO:Importing libraries
2024-11-22 08:15:02,154:INFO:Copying training dataset
2024-11-22 08:15:02,182:INFO:Defining folds
2024-11-22 08:15:02,184:INFO:Declaring metric variables
2024-11-22 08:15:02,198:INFO:Importing untrained model
2024-11-22 08:15:02,213:INFO:Naive Bayes Imported successfully
2024-11-22 08:15:02,241:INFO:Starting cross validation
2024-11-22 08:15:02,247:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 08:15:02,966:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:02,974:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:02,982:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:02,982:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:02,982:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:02,990:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:02,998:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:02,998:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:02,998:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:03,006:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:03,016:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:03,665:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:03,675:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:03,683:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:03,683:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:03,683:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:03,691:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:03,691:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:03,691:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:03,691:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:03,707:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:03,707:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:04,173:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:04,181:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:04,181:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:04,198:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:04,198:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:04,206:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:04,243:INFO:Calculating mean and std
2024-11-22 08:15:04,243:INFO:Creating metrics dataframe
2024-11-22 08:15:04,258:INFO:Uploading results into container
2024-11-22 08:15:04,262:INFO:Uploading model into container now
2024-11-22 08:15:04,263:INFO:_master_model_container: 3
2024-11-22 08:15:04,263:INFO:_display_container: 2
2024-11-22 08:15:04,263:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-11-22 08:15:04,266:INFO:create_model() successfully completed......................................
2024-11-22 08:15:04,445:INFO:SubProcess create_model() end ==================================
2024-11-22 08:15:04,445:INFO:Creating metrics dataframe
2024-11-22 08:15:04,488:INFO:Initializing Decision Tree Classifier
2024-11-22 08:15:04,488:INFO:Total runtime is 0.34253634214401246 minutes
2024-11-22 08:15:04,500:INFO:SubProcess create_model() called ==================================
2024-11-22 08:15:04,500:INFO:Initializing create_model()
2024-11-22 08:15:04,500:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B1A7280>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002165EA75960>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 08:15:04,500:INFO:Checking exceptions
2024-11-22 08:15:04,500:INFO:Importing libraries
2024-11-22 08:15:04,500:INFO:Copying training dataset
2024-11-22 08:15:04,531:INFO:Defining folds
2024-11-22 08:15:04,531:INFO:Declaring metric variables
2024-11-22 08:15:04,547:INFO:Importing untrained model
2024-11-22 08:15:04,564:INFO:Decision Tree Classifier Imported successfully
2024-11-22 08:15:04,589:INFO:Starting cross validation
2024-11-22 08:15:04,595:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 08:15:05,314:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:05,314:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:05,322:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:05,330:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:05,330:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:05,338:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:05,338:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:05,346:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:05,346:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:05,354:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:05,362:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:06,011:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:06,011:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:06,014:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:06,024:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:06,024:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:06,024:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:06,033:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:06,033:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:06,033:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:06,041:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:06,041:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:06,057:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:06,577:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:06,585:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:06,585:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:06,602:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:06,602:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:06,610:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:06,646:INFO:Calculating mean and std
2024-11-22 08:15:06,646:INFO:Creating metrics dataframe
2024-11-22 08:15:06,654:INFO:Uploading results into container
2024-11-22 08:15:06,654:INFO:Uploading model into container now
2024-11-22 08:15:06,654:INFO:_master_model_container: 4
2024-11-22 08:15:06,654:INFO:_display_container: 2
2024-11-22 08:15:06,654:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-11-22 08:15:06,662:INFO:create_model() successfully completed......................................
2024-11-22 08:15:06,825:INFO:SubProcess create_model() end ==================================
2024-11-22 08:15:06,833:INFO:Creating metrics dataframe
2024-11-22 08:15:06,865:INFO:Initializing SVM - Linear Kernel
2024-11-22 08:15:06,865:INFO:Total runtime is 0.3821439385414124 minutes
2024-11-22 08:15:06,873:INFO:SubProcess create_model() called ==================================
2024-11-22 08:15:06,873:INFO:Initializing create_model()
2024-11-22 08:15:06,873:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B1A7280>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002165EA75960>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 08:15:06,873:INFO:Checking exceptions
2024-11-22 08:15:06,873:INFO:Importing libraries
2024-11-22 08:15:06,873:INFO:Copying training dataset
2024-11-22 08:15:06,904:INFO:Defining folds
2024-11-22 08:15:06,904:INFO:Declaring metric variables
2024-11-22 08:15:06,915:INFO:Importing untrained model
2024-11-22 08:15:06,928:INFO:SVM - Linear Kernel Imported successfully
2024-11-22 08:15:06,957:INFO:Starting cross validation
2024-11-22 08:15:06,957:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 08:15:07,690:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:07,690:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:07,706:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:07,709:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:07,709:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:07,724:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:07,724:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:07,740:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:07,740:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:07,740:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:07,755:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:08,373:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:08,373:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:08,388:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:08,388:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:08,388:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:08,404:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:08,404:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:08,404:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:08,404:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:08,420:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:08,420:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:08,435:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:08,933:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:08,933:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:08,942:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:08,942:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:08,950:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:08,950:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:08,975:INFO:Calculating mean and std
2024-11-22 08:15:08,975:INFO:Creating metrics dataframe
2024-11-22 08:15:08,992:INFO:Uploading results into container
2024-11-22 08:15:08,994:INFO:Uploading model into container now
2024-11-22 08:15:08,994:INFO:_master_model_container: 5
2024-11-22 08:15:08,994:INFO:_display_container: 2
2024-11-22 08:15:08,998:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-11-22 08:15:08,998:INFO:create_model() successfully completed......................................
2024-11-22 08:15:09,169:INFO:SubProcess create_model() end ==================================
2024-11-22 08:15:09,169:INFO:Creating metrics dataframe
2024-11-22 08:15:09,198:INFO:Initializing Ridge Classifier
2024-11-22 08:15:09,198:INFO:Total runtime is 0.42102763255437214 minutes
2024-11-22 08:15:09,214:INFO:SubProcess create_model() called ==================================
2024-11-22 08:15:09,214:INFO:Initializing create_model()
2024-11-22 08:15:09,214:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B1A7280>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002165EA75960>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 08:15:09,214:INFO:Checking exceptions
2024-11-22 08:15:09,214:INFO:Importing libraries
2024-11-22 08:15:09,214:INFO:Copying training dataset
2024-11-22 08:15:09,247:INFO:Defining folds
2024-11-22 08:15:09,247:INFO:Declaring metric variables
2024-11-22 08:15:09,259:INFO:Importing untrained model
2024-11-22 08:15:09,266:INFO:Ridge Classifier Imported successfully
2024-11-22 08:15:09,306:INFO:Starting cross validation
2024-11-22 08:15:09,309:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 08:15:10,031:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:10,039:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:10,039:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:10,046:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:10,054:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:10,054:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:10,062:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:10,062:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:10,070:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:10,070:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:10,070:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:10,712:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:10,728:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:10,728:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:10,736:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:10,744:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:10,744:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:10,752:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:10,752:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:10,761:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:10,764:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:10,780:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:10,780:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:11,277:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:11,287:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:11,301:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:11,302:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:11,316:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:11,324:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:11,357:INFO:Calculating mean and std
2024-11-22 08:15:11,357:INFO:Creating metrics dataframe
2024-11-22 08:15:11,366:INFO:Uploading results into container
2024-11-22 08:15:11,366:INFO:Uploading model into container now
2024-11-22 08:15:11,366:INFO:_master_model_container: 6
2024-11-22 08:15:11,366:INFO:_display_container: 2
2024-11-22 08:15:11,374:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-11-22 08:15:11,374:INFO:create_model() successfully completed......................................
2024-11-22 08:15:11,539:INFO:SubProcess create_model() end ==================================
2024-11-22 08:15:11,539:INFO:Creating metrics dataframe
2024-11-22 08:15:11,574:INFO:Initializing Random Forest Classifier
2024-11-22 08:15:11,574:INFO:Total runtime is 0.4606227517127991 minutes
2024-11-22 08:15:11,588:INFO:SubProcess create_model() called ==================================
2024-11-22 08:15:11,588:INFO:Initializing create_model()
2024-11-22 08:15:11,588:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B1A7280>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002165EA75960>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 08:15:11,588:INFO:Checking exceptions
2024-11-22 08:15:11,588:INFO:Importing libraries
2024-11-22 08:15:11,588:INFO:Copying training dataset
2024-11-22 08:15:11,612:INFO:Defining folds
2024-11-22 08:15:11,613:INFO:Declaring metric variables
2024-11-22 08:15:11,623:INFO:Importing untrained model
2024-11-22 08:15:11,644:INFO:Random Forest Classifier Imported successfully
2024-11-22 08:15:11,668:INFO:Starting cross validation
2024-11-22 08:15:11,673:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 08:15:13,259:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:13,274:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:13,274:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:13,289:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:13,293:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:13,310:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:13,326:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:13,335:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:13,344:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:13,541:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:13,557:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:13,574:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:14,787:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:14,803:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:14,813:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:14,813:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:14,829:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:14,863:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:14,910:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:14,925:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:14,958:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:15,276:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:15,291:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:15,299:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:16,128:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:16,144:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:16,153:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:16,191:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:16,200:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:16,208:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:16,233:INFO:Calculating mean and std
2024-11-22 08:15:16,233:INFO:Creating metrics dataframe
2024-11-22 08:15:16,241:INFO:Uploading results into container
2024-11-22 08:15:16,241:INFO:Uploading model into container now
2024-11-22 08:15:16,241:INFO:_master_model_container: 7
2024-11-22 08:15:16,241:INFO:_display_container: 2
2024-11-22 08:15:16,241:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-11-22 08:15:16,250:INFO:create_model() successfully completed......................................
2024-11-22 08:15:16,441:INFO:SubProcess create_model() end ==================================
2024-11-22 08:15:16,441:INFO:Creating metrics dataframe
2024-11-22 08:15:16,490:INFO:Initializing Quadratic Discriminant Analysis
2024-11-22 08:15:16,490:INFO:Total runtime is 0.5425574819246928 minutes
2024-11-22 08:15:16,501:INFO:SubProcess create_model() called ==================================
2024-11-22 08:15:16,501:INFO:Initializing create_model()
2024-11-22 08:15:16,507:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B1A7280>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002165EA75960>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 08:15:16,508:INFO:Checking exceptions
2024-11-22 08:15:16,509:INFO:Importing libraries
2024-11-22 08:15:16,510:INFO:Copying training dataset
2024-11-22 08:15:16,524:INFO:Defining folds
2024-11-22 08:15:16,525:INFO:Declaring metric variables
2024-11-22 08:15:16,544:INFO:Importing untrained model
2024-11-22 08:15:16,564:INFO:Quadratic Discriminant Analysis Imported successfully
2024-11-22 08:15:16,595:INFO:Starting cross validation
2024-11-22 08:15:16,615:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 08:15:17,324:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:17,332:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:17,332:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:17,340:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:17,340:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:17,340:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:17,340:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:17,348:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:17,348:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:17,356:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:17,356:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:17,364:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:17,985:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:18,001:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:18,001:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:18,009:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:18,017:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:18,017:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:18,025:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:18,033:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:18,033:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:18,049:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:18,049:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:18,057:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:18,510:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:18,510:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:18,518:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:18,518:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:18,527:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:18,528:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:18,561:INFO:Calculating mean and std
2024-11-22 08:15:18,561:INFO:Creating metrics dataframe
2024-11-22 08:15:18,576:INFO:Uploading results into container
2024-11-22 08:15:18,578:INFO:Uploading model into container now
2024-11-22 08:15:18,580:INFO:_master_model_container: 8
2024-11-22 08:15:18,581:INFO:_display_container: 2
2024-11-22 08:15:18,582:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-11-22 08:15:18,582:INFO:create_model() successfully completed......................................
2024-11-22 08:15:18,758:INFO:SubProcess create_model() end ==================================
2024-11-22 08:15:18,758:INFO:Creating metrics dataframe
2024-11-22 08:15:18,791:INFO:Initializing Ada Boost Classifier
2024-11-22 08:15:18,791:INFO:Total runtime is 0.5809208154678345 minutes
2024-11-22 08:15:18,798:INFO:SubProcess create_model() called ==================================
2024-11-22 08:15:18,798:INFO:Initializing create_model()
2024-11-22 08:15:18,798:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B1A7280>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002165EA75960>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 08:15:18,798:INFO:Checking exceptions
2024-11-22 08:15:18,798:INFO:Importing libraries
2024-11-22 08:15:18,798:INFO:Copying training dataset
2024-11-22 08:15:18,829:INFO:Defining folds
2024-11-22 08:15:18,829:INFO:Declaring metric variables
2024-11-22 08:15:18,835:INFO:Importing untrained model
2024-11-22 08:15:18,846:INFO:Ada Boost Classifier Imported successfully
2024-11-22 08:15:18,873:INFO:Starting cross validation
2024-11-22 08:15:18,878:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 08:15:19,397:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-22 08:15:19,398:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-22 08:15:19,407:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-22 08:15:19,415:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-22 08:15:20,044:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:20,052:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:20,052:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:20,060:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:20,060:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:20,060:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:20,060:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:20,068:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:20,076:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:20,076:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:20,076:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:20,092:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:20,529:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-22 08:15:20,537:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-22 08:15:20,545:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-22 08:15:20,553:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-22 08:15:21,180:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:21,188:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:21,196:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:21,196:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:21,205:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:21,214:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:21,214:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:21,214:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:21,214:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:21,222:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:21,234:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:21,554:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-22 08:15:21,562:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-22 08:15:22,068:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:22,085:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:22,086:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:22,095:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:22,095:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:22,103:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:22,136:INFO:Calculating mean and std
2024-11-22 08:15:22,137:INFO:Creating metrics dataframe
2024-11-22 08:15:22,145:INFO:Uploading results into container
2024-11-22 08:15:22,145:INFO:Uploading model into container now
2024-11-22 08:15:22,145:INFO:_master_model_container: 9
2024-11-22 08:15:22,145:INFO:_display_container: 2
2024-11-22 08:15:22,145:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-11-22 08:15:22,145:INFO:create_model() successfully completed......................................
2024-11-22 08:15:22,320:INFO:SubProcess create_model() end ==================================
2024-11-22 08:15:22,320:INFO:Creating metrics dataframe
2024-11-22 08:15:22,353:INFO:Initializing Gradient Boosting Classifier
2024-11-22 08:15:22,353:INFO:Total runtime is 0.640280298391978 minutes
2024-11-22 08:15:22,368:INFO:SubProcess create_model() called ==================================
2024-11-22 08:15:22,368:INFO:Initializing create_model()
2024-11-22 08:15:22,372:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B1A7280>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002165EA75960>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 08:15:22,372:INFO:Checking exceptions
2024-11-22 08:15:22,372:INFO:Importing libraries
2024-11-22 08:15:22,372:INFO:Copying training dataset
2024-11-22 08:15:22,387:INFO:Defining folds
2024-11-22 08:15:22,387:INFO:Declaring metric variables
2024-11-22 08:15:22,402:INFO:Importing untrained model
2024-11-22 08:15:22,424:INFO:Gradient Boosting Classifier Imported successfully
2024-11-22 08:15:22,450:INFO:Starting cross validation
2024-11-22 08:15:22,462:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 08:15:23,724:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:23,724:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:23,724:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:23,740:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:23,740:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:23,740:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:23,755:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:23,755:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:23,756:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:23,766:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:24,973:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:24,981:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:24,981:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:24,989:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:24,989:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:24,997:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:24,997:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:25,005:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:25,016:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:25,016:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:25,032:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:25,048:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:26,101:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:26,109:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:26,118:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:26,135:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:26,138:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:26,153:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:26,180:INFO:Calculating mean and std
2024-11-22 08:15:26,180:INFO:Creating metrics dataframe
2024-11-22 08:15:26,189:INFO:Uploading results into container
2024-11-22 08:15:26,189:INFO:Uploading model into container now
2024-11-22 08:15:26,189:INFO:_master_model_container: 10
2024-11-22 08:15:26,189:INFO:_display_container: 2
2024-11-22 08:15:26,189:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-11-22 08:15:26,198:INFO:create_model() successfully completed......................................
2024-11-22 08:15:26,365:INFO:SubProcess create_model() end ==================================
2024-11-22 08:15:26,365:INFO:Creating metrics dataframe
2024-11-22 08:15:26,404:INFO:Initializing Linear Discriminant Analysis
2024-11-22 08:15:26,404:INFO:Total runtime is 0.7077991882960002 minutes
2024-11-22 08:15:26,421:INFO:SubProcess create_model() called ==================================
2024-11-22 08:15:26,423:INFO:Initializing create_model()
2024-11-22 08:15:26,423:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B1A7280>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002165EA75960>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 08:15:26,423:INFO:Checking exceptions
2024-11-22 08:15:26,423:INFO:Importing libraries
2024-11-22 08:15:26,423:INFO:Copying training dataset
2024-11-22 08:15:26,442:INFO:Defining folds
2024-11-22 08:15:26,442:INFO:Declaring metric variables
2024-11-22 08:15:26,458:INFO:Importing untrained model
2024-11-22 08:15:26,524:INFO:Linear Discriminant Analysis Imported successfully
2024-11-22 08:15:26,551:INFO:Starting cross validation
2024-11-22 08:15:26,575:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 08:15:27,234:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:27,248:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:27,261:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:27,266:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:27,279:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:27,280:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:27,290:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:27,290:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:27,306:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:27,332:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:27,338:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:27,356:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:27,999:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:28,018:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:28,022:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:28,033:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:28,037:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:28,037:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:28,053:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:28,054:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:28,071:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:28,095:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:28,105:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:28,123:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:28,684:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:28,692:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:28,702:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:28,710:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:28,716:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:28,725:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:28,759:INFO:Calculating mean and std
2024-11-22 08:15:28,760:INFO:Creating metrics dataframe
2024-11-22 08:15:28,775:INFO:Uploading results into container
2024-11-22 08:15:28,775:INFO:Uploading model into container now
2024-11-22 08:15:28,779:INFO:_master_model_container: 11
2024-11-22 08:15:28,780:INFO:_display_container: 2
2024-11-22 08:15:28,780:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-11-22 08:15:28,780:INFO:create_model() successfully completed......................................
2024-11-22 08:15:28,944:INFO:SubProcess create_model() end ==================================
2024-11-22 08:15:28,944:INFO:Creating metrics dataframe
2024-11-22 08:15:28,983:INFO:Initializing Extra Trees Classifier
2024-11-22 08:15:28,990:INFO:Total runtime is 0.7507865071296692 minutes
2024-11-22 08:15:29,000:INFO:SubProcess create_model() called ==================================
2024-11-22 08:15:29,001:INFO:Initializing create_model()
2024-11-22 08:15:29,001:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B1A7280>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002165EA75960>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 08:15:29,001:INFO:Checking exceptions
2024-11-22 08:15:29,001:INFO:Importing libraries
2024-11-22 08:15:29,001:INFO:Copying training dataset
2024-11-22 08:15:29,019:INFO:Defining folds
2024-11-22 08:15:29,019:INFO:Declaring metric variables
2024-11-22 08:15:29,030:INFO:Importing untrained model
2024-11-22 08:15:29,043:INFO:Extra Trees Classifier Imported successfully
2024-11-22 08:15:29,060:INFO:Starting cross validation
2024-11-22 08:15:29,065:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 08:15:30,539:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:30,554:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:30,559:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:30,567:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:30,567:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:30,567:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:30,575:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:30,575:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:30,599:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:30,820:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:30,836:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:30,852:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:31,945:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:31,951:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:31,951:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:31,988:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:31,996:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:32,021:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:32,120:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:32,136:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:32,152:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:32,392:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:32,401:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:32,418:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:33,166:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:33,174:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:33,183:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:33,198:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:33,208:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:33,215:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:33,240:INFO:Calculating mean and std
2024-11-22 08:15:33,240:INFO:Creating metrics dataframe
2024-11-22 08:15:33,249:INFO:Uploading results into container
2024-11-22 08:15:33,249:INFO:Uploading model into container now
2024-11-22 08:15:33,249:INFO:_master_model_container: 12
2024-11-22 08:15:33,249:INFO:_display_container: 2
2024-11-22 08:15:33,258:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-11-22 08:15:33,258:INFO:create_model() successfully completed......................................
2024-11-22 08:15:33,441:INFO:SubProcess create_model() end ==================================
2024-11-22 08:15:33,441:INFO:Creating metrics dataframe
2024-11-22 08:15:33,475:INFO:Initializing Light Gradient Boosting Machine
2024-11-22 08:15:33,475:INFO:Total runtime is 0.825646162033081 minutes
2024-11-22 08:15:33,485:INFO:SubProcess create_model() called ==================================
2024-11-22 08:15:33,485:INFO:Initializing create_model()
2024-11-22 08:15:33,485:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B1A7280>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002165EA75960>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 08:15:33,485:INFO:Checking exceptions
2024-11-22 08:15:33,485:INFO:Importing libraries
2024-11-22 08:15:33,485:INFO:Copying training dataset
2024-11-22 08:15:33,498:INFO:Defining folds
2024-11-22 08:15:33,499:INFO:Declaring metric variables
2024-11-22 08:15:33,503:INFO:Importing untrained model
2024-11-22 08:15:33,514:INFO:Light Gradient Boosting Machine Imported successfully
2024-11-22 08:15:33,528:INFO:Starting cross validation
2024-11-22 08:15:33,543:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 08:15:34,910:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:34,926:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:34,942:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:34,950:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:34,966:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:34,974:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:34,974:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:34,990:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:34,990:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:34,998:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:34,998:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:35,006:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:36,178:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:36,194:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:36,211:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:36,305:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:36,306:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:36,315:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:36,326:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:36,326:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:36,334:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:36,374:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:36,390:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:36,406:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:37,169:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:37,185:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:37,201:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:37,329:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:37,349:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:37,360:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:37,403:INFO:Calculating mean and std
2024-11-22 08:15:37,403:INFO:Creating metrics dataframe
2024-11-22 08:15:37,423:INFO:Uploading results into container
2024-11-22 08:15:37,424:INFO:Uploading model into container now
2024-11-22 08:15:37,425:INFO:_master_model_container: 13
2024-11-22 08:15:37,425:INFO:_display_container: 2
2024-11-22 08:15:37,426:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-11-22 08:15:37,428:INFO:create_model() successfully completed......................................
2024-11-22 08:15:37,615:INFO:SubProcess create_model() end ==================================
2024-11-22 08:15:37,617:INFO:Creating metrics dataframe
2024-11-22 08:15:37,655:INFO:Initializing Dummy Classifier
2024-11-22 08:15:37,655:INFO:Total runtime is 0.8953112920125326 minutes
2024-11-22 08:15:37,670:INFO:SubProcess create_model() called ==================================
2024-11-22 08:15:37,670:INFO:Initializing create_model()
2024-11-22 08:15:37,670:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B1A7280>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002165EA75960>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 08:15:37,670:INFO:Checking exceptions
2024-11-22 08:15:37,670:INFO:Importing libraries
2024-11-22 08:15:37,670:INFO:Copying training dataset
2024-11-22 08:15:37,688:INFO:Defining folds
2024-11-22 08:15:37,689:INFO:Declaring metric variables
2024-11-22 08:15:37,698:INFO:Importing untrained model
2024-11-22 08:15:37,710:INFO:Dummy Classifier Imported successfully
2024-11-22 08:15:37,739:INFO:Starting cross validation
2024-11-22 08:15:37,746:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 08:15:38,428:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:38,436:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:38,436:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:38,444:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:38,444:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-22 08:15:38,444:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:38,452:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:38,452:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:38,452:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:38,460:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-22 08:15:38,460:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:38,460:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-22 08:15:38,468:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-22 08:15:38,468:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:38,468:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:38,477:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:39,088:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:39,096:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:39,096:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:39,104:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:39,104:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-22 08:15:39,112:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:39,112:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:39,120:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:39,120:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-22 08:15:39,128:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-22 08:15:39,128:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:39,128:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:39,128:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:39,144:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:39,152:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-22 08:15:39,160:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:39,621:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:39,629:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:39,629:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-22 08:15:39,638:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:39,638:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:39,656:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:39,656:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-22 08:15:39,664:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:39,693:INFO:Calculating mean and std
2024-11-22 08:15:39,693:INFO:Creating metrics dataframe
2024-11-22 08:15:39,701:INFO:Uploading results into container
2024-11-22 08:15:39,701:INFO:Uploading model into container now
2024-11-22 08:15:39,701:INFO:_master_model_container: 14
2024-11-22 08:15:39,701:INFO:_display_container: 2
2024-11-22 08:15:39,709:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-11-22 08:15:39,711:INFO:create_model() successfully completed......................................
2024-11-22 08:15:39,885:INFO:SubProcess create_model() end ==================================
2024-11-22 08:15:39,885:INFO:Creating metrics dataframe
2024-11-22 08:15:39,956:INFO:Initializing create_model()
2024-11-22 08:15:39,956:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B1A7280>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 08:15:39,956:INFO:Checking exceptions
2024-11-22 08:15:39,965:INFO:Importing libraries
2024-11-22 08:15:39,965:INFO:Copying training dataset
2024-11-22 08:15:39,978:INFO:Defining folds
2024-11-22 08:15:39,978:INFO:Declaring metric variables
2024-11-22 08:15:39,979:INFO:Importing untrained model
2024-11-22 08:15:39,980:INFO:Declaring custom model
2024-11-22 08:15:39,986:INFO:Logistic Regression Imported successfully
2024-11-22 08:15:39,994:INFO:Cross validation set to False
2024-11-22 08:15:39,994:INFO:Fitting Model
2024-11-22 08:15:40,319:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-22 08:15:40,319:INFO:create_model() successfully completed......................................
2024-11-22 08:15:40,642:INFO:_master_model_container: 14
2024-11-22 08:15:40,642:INFO:_display_container: 2
2024-11-22 08:15:40,645:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-22 08:15:40,645:INFO:compare_models() successfully completed......................................
2024-11-22 08:15:40,646:INFO:Initializing create_model()
2024-11-22 08:15:40,646:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B1A7280>, estimator=rf, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 08:15:40,646:INFO:Checking exceptions
2024-11-22 08:15:40,744:INFO:Importing libraries
2024-11-22 08:15:40,744:INFO:Copying training dataset
2024-11-22 08:15:40,759:INFO:Defining folds
2024-11-22 08:15:40,759:INFO:Declaring metric variables
2024-11-22 08:15:40,770:INFO:Importing untrained model
2024-11-22 08:15:40,781:INFO:Random Forest Classifier Imported successfully
2024-11-22 08:15:40,807:INFO:Starting cross validation
2024-11-22 08:15:40,816:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 08:15:42,388:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:42,389:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:42,394:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:42,405:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:42,405:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:42,412:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:42,425:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:42,427:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:42,429:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:42,542:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:42,562:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:42,598:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:44,130:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:44,131:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:44,147:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:44,147:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:44,167:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:44,167:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:44,215:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:44,226:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:44,241:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:44,414:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:44,425:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:44,439:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:45,421:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:45,438:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:45,438:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:45,446:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:45,446:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:45,455:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:15:45,497:INFO:Calculating mean and std
2024-11-22 08:15:45,497:INFO:Creating metrics dataframe
2024-11-22 08:15:45,514:INFO:Finalizing model
2024-11-22 08:15:46,272:INFO:Uploading results into container
2024-11-22 08:15:46,276:INFO:Uploading model into container now
2024-11-22 08:15:46,325:INFO:_master_model_container: 15
2024-11-22 08:15:46,325:INFO:_display_container: 3
2024-11-22 08:15:46,328:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-11-22 08:15:46,328:INFO:create_model() successfully completed......................................
2024-11-22 08:15:46,509:INFO:Initializing tune_model()
2024-11-22 08:15:46,509:INFO:tune_model(estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B1A7280>)
2024-11-22 08:15:46,509:INFO:Checking exceptions
2024-11-22 08:15:46,585:INFO:Copying training dataset
2024-11-22 08:15:46,607:INFO:Checking base model
2024-11-22 08:15:46,608:INFO:Base model : Random Forest Classifier
2024-11-22 08:15:46,620:INFO:Declaring metric variables
2024-11-22 08:15:46,634:INFO:Defining Hyperparameters
2024-11-22 08:15:46,840:INFO:Tuning with n_jobs=-1
2024-11-22 08:15:46,840:INFO:Initializing RandomizedSearchCV
2024-11-22 08:16:31,286:INFO:best_params: {'actual_estimator__n_estimators': 190, 'actual_estimator__min_samples_split': 9, 'actual_estimator__min_samples_leaf': 6, 'actual_estimator__min_impurity_decrease': 0.001, 'actual_estimator__max_features': 'log2', 'actual_estimator__max_depth': 6, 'actual_estimator__criterion': 'gini', 'actual_estimator__class_weight': 'balanced_subsample', 'actual_estimator__bootstrap': False}
2024-11-22 08:16:31,286:INFO:Hyperparameter search completed
2024-11-22 08:16:31,286:INFO:SubProcess create_model() called ==================================
2024-11-22 08:16:31,286:INFO:Initializing create_model()
2024-11-22 08:16:31,286:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B1A7280>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002165447A500>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'n_estimators': 190, 'min_samples_split': 9, 'min_samples_leaf': 6, 'min_impurity_decrease': 0.001, 'max_features': 'log2', 'max_depth': 6, 'criterion': 'gini', 'class_weight': 'balanced_subsample', 'bootstrap': False})
2024-11-22 08:16:31,286:INFO:Checking exceptions
2024-11-22 08:16:31,286:INFO:Importing libraries
2024-11-22 08:16:31,294:INFO:Copying training dataset
2024-11-22 08:16:31,316:INFO:Defining folds
2024-11-22 08:16:31,317:INFO:Declaring metric variables
2024-11-22 08:16:31,324:INFO:Importing untrained model
2024-11-22 08:16:31,324:INFO:Declaring custom model
2024-11-22 08:16:31,339:INFO:Random Forest Classifier Imported successfully
2024-11-22 08:16:31,367:INFO:Starting cross validation
2024-11-22 08:16:31,375:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 08:16:33,273:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:33,286:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:33,294:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:33,294:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:33,310:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:33,334:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:33,351:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:33,351:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:33,386:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:33,408:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:33,421:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:33,437:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:35,188:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:35,188:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:35,204:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:35,204:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:35,220:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:35,220:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:35,309:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:35,325:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:35,333:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:35,511:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:35,522:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:35,531:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:36,780:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:36,788:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:36,804:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:36,836:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:36,844:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:36,852:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:36,898:INFO:Calculating mean and std
2024-11-22 08:16:36,898:INFO:Creating metrics dataframe
2024-11-22 08:16:36,914:INFO:Finalizing model
2024-11-22 08:16:37,912:INFO:Uploading results into container
2024-11-22 08:16:37,915:INFO:Uploading model into container now
2024-11-22 08:16:37,917:INFO:_master_model_container: 16
2024-11-22 08:16:37,919:INFO:_display_container: 4
2024-11-22 08:16:37,921:INFO:RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)
2024-11-22 08:16:37,921:INFO:create_model() successfully completed......................................
2024-11-22 08:16:38,097:INFO:SubProcess create_model() end ==================================
2024-11-22 08:16:38,097:INFO:choose_better activated
2024-11-22 08:16:38,106:INFO:SubProcess create_model() called ==================================
2024-11-22 08:16:38,106:INFO:Initializing create_model()
2024-11-22 08:16:38,106:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B1A7280>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 08:16:38,106:INFO:Checking exceptions
2024-11-22 08:16:38,117:INFO:Importing libraries
2024-11-22 08:16:38,117:INFO:Copying training dataset
2024-11-22 08:16:38,131:INFO:Defining folds
2024-11-22 08:16:38,131:INFO:Declaring metric variables
2024-11-22 08:16:38,131:INFO:Importing untrained model
2024-11-22 08:16:38,132:INFO:Declaring custom model
2024-11-22 08:16:38,134:INFO:Random Forest Classifier Imported successfully
2024-11-22 08:16:38,135:INFO:Starting cross validation
2024-11-22 08:16:38,136:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 08:16:39,727:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:39,727:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:39,743:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:39,743:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:39,755:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:39,755:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:39,763:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:39,764:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:39,772:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:39,772:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:39,788:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:39,807:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:41,281:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:41,282:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:41,291:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:41,291:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:41,308:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:41,308:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:41,367:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:41,383:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:41,399:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:41,484:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:41,492:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:41,510:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:42,536:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:42,558:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:42,559:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:42,565:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:42,573:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:42,582:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:16:42,608:INFO:Calculating mean and std
2024-11-22 08:16:42,608:INFO:Creating metrics dataframe
2024-11-22 08:16:42,617:INFO:Finalizing model
2024-11-22 08:16:43,408:INFO:Uploading results into container
2024-11-22 08:16:43,408:INFO:Uploading model into container now
2024-11-22 08:16:43,408:INFO:_master_model_container: 17
2024-11-22 08:16:43,408:INFO:_display_container: 5
2024-11-22 08:16:43,408:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-11-22 08:16:43,408:INFO:create_model() successfully completed......................................
2024-11-22 08:16:43,608:INFO:SubProcess create_model() end ==================================
2024-11-22 08:16:43,610:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for Accuracy is 0.8886
2024-11-22 08:16:43,610:INFO:RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False) result for Accuracy is 0.9114
2024-11-22 08:16:43,610:INFO:RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False) is best model
2024-11-22 08:16:43,610:INFO:choose_better completed
2024-11-22 08:16:43,645:INFO:_master_model_container: 17
2024-11-22 08:16:43,645:INFO:_display_container: 4
2024-11-22 08:16:43,645:INFO:RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)
2024-11-22 08:16:43,645:INFO:tune_model() successfully completed......................................
2024-11-22 08:16:43,835:INFO:Initializing evaluate_model()
2024-11-22 08:16:43,835:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B1A7280>, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-11-22 08:16:43,906:INFO:Initializing plot_model()
2024-11-22 08:16:43,906:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B1A7280>, system=True)
2024-11-22 08:16:43,907:INFO:Checking exceptions
2024-11-22 08:16:44,009:INFO:Preloading libraries
2024-11-22 08:16:44,049:INFO:Copying training dataset
2024-11-22 08:16:44,049:INFO:Plot type: pipeline
2024-11-22 08:16:44,585:INFO:Visual Rendered Successfully
2024-11-22 08:16:44,778:INFO:plot_model() successfully completed......................................
2024-11-22 08:16:44,779:INFO:Initializing finalize_model()
2024-11-22 08:16:44,779:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B1A7280>, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-11-22 08:16:44,786:INFO:Finalizing RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)
2024-11-22 08:16:44,800:INFO:Initializing create_model()
2024-11-22 08:16:44,801:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B1A7280>, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 08:16:44,801:INFO:Checking exceptions
2024-11-22 08:16:44,808:INFO:Importing libraries
2024-11-22 08:16:44,809:INFO:Copying training dataset
2024-11-22 08:16:44,810:INFO:Defining folds
2024-11-22 08:16:44,810:INFO:Declaring metric variables
2024-11-22 08:16:44,811:INFO:Importing untrained model
2024-11-22 08:16:44,811:INFO:Declaring custom model
2024-11-22 08:16:44,813:INFO:Random Forest Classifier Imported successfully
2024-11-22 08:16:44,814:INFO:Cross validation set to False
2024-11-22 08:16:44,814:INFO:Fitting Model
2024-11-22 08:16:46,178:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['Age'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean')...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight='balanced_subsample',
                                        criterion='gini', max_depth=6,
                                        max_features='log2',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.001,
                                        min_samples_leaf=6, min_samples_split=9,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=190,
                                        n_jobs=-1, oob_score=False,
                                        random_state=123, verbose=0,
                                        warm_start=False))],
         verbose=False)
2024-11-22 08:16:46,178:INFO:create_model() successfully completed......................................
2024-11-22 08:16:46,378:INFO:_master_model_container: 17
2024-11-22 08:16:46,380:INFO:_display_container: 4
2024-11-22 08:16:46,837:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['Age'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean')...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight='balanced_subsample',
                                        criterion='gini', max_depth=6,
                                        max_features='log2',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.001,
                                        min_samples_leaf=6, min_samples_split=9,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=190,
                                        n_jobs=-1, oob_score=False,
                                        random_state=123, verbose=0,
                                        warm_start=False))],
         verbose=False)
2024-11-22 08:16:46,837:INFO:finalize_model() successfully completed......................................
2024-11-22 08:16:47,782:INFO:Initializing save_model()
2024-11-22 08:16:47,783:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['Age'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean')...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight='balanced_subsample',
                                        criterion='gini', max_depth=6,
                                        max_features='log2',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.001,
                                        min_samples_leaf=6, min_samples_split=9,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=190,
                                        n_jobs=-1, oob_score=False,
                                        random_state=123, verbose=0,
                                        warm_start=False))],
         verbose=False), model_name=rf_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\teklu\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['Age'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                                        {'col': 'Hemoptysis',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64},
                                                                        {'col': 'Breathing',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64},
                                                                        {'col': 'Arthritis',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64},
                                                                        {'col': 'Vomiting',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-11-22 08:16:47,783:INFO:Adding model into prep_pipe
2024-11-22 08:16:47,783:WARNING:Only Model saved as it was a pipeline.
2024-11-22 08:16:48,033:INFO:rf_model.pkl saved in current working directory
2024-11-22 08:16:48,377:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['Age'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean')...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight='balanced_subsample',
                                        criterion='gini', max_depth=6,
                                        max_features='log2',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.001,
                                        min_samples_leaf=6, min_samples_split=9,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=190,
                                        n_jobs=-1, oob_score=False,
                                        random_state=123, verbose=0,
                                        warm_start=False))],
         verbose=False)
2024-11-22 08:16:48,377:INFO:save_model() successfully completed......................................
2024-11-22 08:17:07,518:INFO:Initializing plot_model()
2024-11-22 08:17:07,518:INFO:plot_model(plot=manifold, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B1A7280>, system=True)
2024-11-22 08:17:07,518:INFO:Checking exceptions
2024-11-22 08:17:07,624:INFO:Preloading libraries
2024-11-22 08:17:07,668:INFO:Copying training dataset
2024-11-22 08:17:07,668:INFO:Plot type: manifold
2024-11-22 08:17:08,058:INFO:Fitting & Transforming Model
2024-11-22 08:17:27,460:INFO:Visual Rendered Successfully
2024-11-22 08:17:27,626:INFO:plot_model() successfully completed......................................
2024-11-22 08:17:27,720:INFO:Initializing plot_model()
2024-11-22 08:17:27,720:INFO:plot_model(plot=lift, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B1A7280>, system=True)
2024-11-22 08:17:27,720:INFO:Checking exceptions
2024-11-22 08:17:27,795:INFO:Preloading libraries
2024-11-22 08:17:27,837:INFO:Copying training dataset
2024-11-22 08:17:27,837:INFO:Plot type: lift
2024-11-22 08:17:27,837:INFO:Generating predictions / predict_proba on X_test
2024-11-22 08:17:28,592:INFO:Visual Rendered Successfully
2024-11-22 08:17:28,767:INFO:plot_model() successfully completed......................................
2024-11-22 08:17:28,790:INFO:Initializing plot_model()
2024-11-22 08:17:28,791:INFO:plot_model(plot=ks, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B1A7280>, system=True)
2024-11-22 08:17:28,792:INFO:Checking exceptions
2024-11-22 08:17:28,866:INFO:Preloading libraries
2024-11-22 08:17:28,909:INFO:Copying training dataset
2024-11-22 08:17:28,910:INFO:Plot type: ks
2024-11-22 08:17:28,910:INFO:Generating predictions / predict_proba on X_test
2024-11-22 08:17:29,699:INFO:Visual Rendered Successfully
2024-11-22 08:17:29,914:INFO:plot_model() successfully completed......................................
2024-11-22 08:17:33,901:INFO:Initializing plot_model()
2024-11-22 08:17:33,901:INFO:plot_model(plot=tree, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B1A7280>, system=True)
2024-11-22 08:17:33,901:INFO:Checking exceptions
2024-11-22 08:17:34,072:INFO:Preloading libraries
2024-11-22 08:17:34,132:INFO:Copying training dataset
2024-11-22 08:17:34,132:INFO:Plot type: tree
2024-11-22 08:17:42,363:INFO:Plotting decision trees
2024-11-22 08:17:42,440:INFO:Plotting tree 0
2024-11-22 08:17:43,864:INFO:Plotting tree 1
2024-11-22 08:17:44,110:INFO:Plotting tree 2
2024-11-22 08:17:44,232:INFO:Plotting tree 3
2024-11-22 08:17:44,511:INFO:Plotting tree 4
2024-11-22 08:17:44,817:INFO:Plotting tree 5
2024-11-22 08:17:44,906:INFO:Plotting tree 6
2024-11-22 08:17:45,054:INFO:Plotting tree 7
2024-11-22 08:17:45,165:INFO:Plotting tree 8
2024-11-22 08:17:45,262:INFO:Plotting tree 9
2024-11-22 08:17:45,340:INFO:Plotting tree 10
2024-11-22 08:17:45,671:INFO:Plotting tree 11
2024-11-22 08:17:45,782:INFO:Plotting tree 12
2024-11-22 08:17:46,446:INFO:Plotting tree 13
2024-11-22 08:17:46,881:INFO:Plotting tree 14
2024-11-22 08:17:46,968:INFO:Plotting tree 15
2024-11-22 08:17:47,215:INFO:Plotting tree 16
2024-11-22 08:17:47,356:INFO:Plotting tree 17
2024-11-22 08:17:47,535:INFO:Plotting tree 18
2024-11-22 08:17:47,642:INFO:Plotting tree 19
2024-11-22 08:17:47,924:INFO:Plotting tree 20
2024-11-22 08:17:48,163:INFO:Plotting tree 21
2024-11-22 08:17:48,313:INFO:Plotting tree 22
2024-11-22 08:17:48,382:INFO:Plotting tree 23
2024-11-22 08:17:48,477:INFO:Plotting tree 24
2024-11-22 08:17:48,576:INFO:Plotting tree 25
2024-11-22 08:17:48,782:INFO:Plotting tree 26
2024-11-22 08:17:49,057:INFO:Plotting tree 27
2024-11-22 08:17:49,179:INFO:Plotting tree 28
2024-11-22 08:17:49,261:INFO:Plotting tree 29
2024-11-22 08:17:49,471:INFO:Plotting tree 30
2024-11-22 08:17:49,734:INFO:Plotting tree 31
2024-11-22 08:17:50,107:INFO:Plotting tree 32
2024-11-22 08:17:50,242:INFO:Plotting tree 33
2024-11-22 08:17:50,548:INFO:Plotting tree 34
2024-11-22 08:17:50,756:INFO:Plotting tree 35
2024-11-22 08:17:50,859:INFO:Plotting tree 36
2024-11-22 08:17:51,105:INFO:Plotting tree 37
2024-11-22 08:17:51,428:INFO:Plotting tree 38
2024-11-22 08:17:51,684:INFO:Plotting tree 39
2024-11-22 08:17:51,935:INFO:Plotting tree 40
2024-11-22 08:17:52,093:INFO:Plotting tree 41
2024-11-22 08:17:52,324:INFO:Plotting tree 42
2024-11-22 08:17:52,541:INFO:Plotting tree 43
2024-11-22 08:17:52,641:INFO:Plotting tree 44
2024-11-22 08:17:52,799:INFO:Plotting tree 45
2024-11-22 08:17:53,050:INFO:Plotting tree 46
2024-11-22 08:17:53,226:INFO:Plotting tree 47
2024-11-22 08:17:53,356:INFO:Plotting tree 48
2024-11-22 08:17:53,577:INFO:Plotting tree 49
2024-11-22 08:17:53,734:INFO:Plotting tree 50
2024-11-22 08:17:53,982:INFO:Plotting tree 51
2024-11-22 08:17:54,268:INFO:Plotting tree 52
2024-11-22 08:17:54,337:INFO:Plotting tree 53
2024-11-22 08:17:54,429:INFO:Plotting tree 54
2024-11-22 08:17:54,598:INFO:Plotting tree 55
2024-11-22 08:17:54,689:INFO:Plotting tree 56
2024-11-22 08:17:54,969:INFO:Plotting tree 57
2024-11-22 08:17:55,205:INFO:Plotting tree 58
2024-11-22 08:17:55,438:INFO:Plotting tree 59
2024-11-22 08:17:55,650:INFO:Plotting tree 60
2024-11-22 08:17:55,819:INFO:Plotting tree 61
2024-11-22 08:17:56,041:INFO:Plotting tree 62
2024-11-22 08:17:56,171:INFO:Plotting tree 63
2024-11-22 08:17:56,284:INFO:Plotting tree 64
2024-11-22 08:17:56,536:INFO:Plotting tree 65
2024-11-22 08:17:56,780:INFO:Plotting tree 66
2024-11-22 08:17:56,942:INFO:Plotting tree 67
2024-11-22 08:17:57,187:INFO:Plotting tree 68
2024-11-22 08:17:57,411:INFO:Plotting tree 69
2024-11-22 08:17:57,649:INFO:Plotting tree 70
2024-11-22 08:17:57,910:INFO:Plotting tree 71
2024-11-22 08:17:58,071:INFO:Plotting tree 72
2024-11-22 08:17:58,247:INFO:Plotting tree 73
2024-11-22 08:17:58,480:INFO:Plotting tree 74
2024-11-22 08:17:58,653:INFO:Plotting tree 75
2024-11-22 08:17:58,763:INFO:Plotting tree 76
2024-11-22 08:17:58,862:INFO:Plotting tree 77
2024-11-22 08:17:59,148:INFO:Plotting tree 78
2024-11-22 08:17:59,380:INFO:Plotting tree 79
2024-11-22 08:17:59,464:INFO:Plotting tree 80
2024-11-22 08:17:59,680:INFO:Plotting tree 81
2024-11-22 08:18:00,014:INFO:Plotting tree 82
2024-11-22 08:18:00,397:INFO:Plotting tree 83
2024-11-22 08:18:00,488:INFO:Plotting tree 84
2024-11-22 08:18:00,605:INFO:Plotting tree 85
2024-11-22 08:18:00,718:INFO:Plotting tree 86
2024-11-22 08:18:00,861:INFO:Plotting tree 87
2024-11-22 08:18:00,982:INFO:Plotting tree 88
2024-11-22 08:18:01,272:INFO:Plotting tree 89
2024-11-22 08:18:01,353:INFO:Plotting tree 90
2024-11-22 08:18:01,549:INFO:Plotting tree 91
2024-11-22 08:18:02,040:INFO:Plotting tree 92
2024-11-22 08:18:02,345:INFO:Plotting tree 93
2024-11-22 08:18:02,550:INFO:Plotting tree 94
2024-11-22 08:18:02,800:INFO:Plotting tree 95
2024-11-22 08:18:02,875:INFO:Plotting tree 96
2024-11-22 08:18:02,983:INFO:Plotting tree 97
2024-11-22 08:18:03,095:INFO:Plotting tree 98
2024-11-22 08:18:03,279:INFO:Plotting tree 99
2024-11-22 08:18:03,513:INFO:Plotting tree 100
2024-11-22 08:18:03,630:INFO:Plotting tree 101
2024-11-22 08:18:03,825:INFO:Plotting tree 102
2024-11-22 08:18:03,926:INFO:Plotting tree 103
2024-11-22 08:18:04,021:INFO:Plotting tree 104
2024-11-22 08:18:04,238:INFO:Plotting tree 105
2024-11-22 08:18:04,414:INFO:Plotting tree 106
2024-11-22 08:18:04,602:INFO:Plotting tree 107
2024-11-22 08:18:04,719:INFO:Plotting tree 108
2024-11-22 08:18:04,805:INFO:Plotting tree 109
2024-11-22 08:18:05,033:INFO:Plotting tree 110
2024-11-22 08:18:05,313:INFO:Plotting tree 111
2024-11-22 08:18:05,398:INFO:Plotting tree 112
2024-11-22 08:18:05,507:INFO:Plotting tree 113
2024-11-22 08:18:05,791:INFO:Plotting tree 114
2024-11-22 08:18:05,864:INFO:Plotting tree 115
2024-11-22 08:18:05,938:INFO:Plotting tree 116
2024-11-22 08:18:06,027:INFO:Plotting tree 117
2024-11-22 08:18:06,232:INFO:Plotting tree 118
2024-11-22 08:18:06,428:INFO:Plotting tree 119
2024-11-22 08:18:06,553:INFO:Plotting tree 120
2024-11-22 08:18:06,627:INFO:Plotting tree 121
2024-11-22 08:18:06,857:INFO:Plotting tree 122
2024-11-22 08:18:06,985:INFO:Plotting tree 123
2024-11-22 08:18:07,077:INFO:Plotting tree 124
2024-11-22 08:18:07,203:INFO:Plotting tree 125
2024-11-22 08:18:07,364:INFO:Plotting tree 126
2024-11-22 08:18:07,435:INFO:Plotting tree 127
2024-11-22 08:18:07,617:INFO:Plotting tree 128
2024-11-22 08:18:07,873:INFO:Plotting tree 129
2024-11-22 08:18:07,962:INFO:Plotting tree 130
2024-11-22 08:18:08,104:INFO:Plotting tree 131
2024-11-22 08:18:08,299:INFO:Plotting tree 132
2024-11-22 08:18:08,424:INFO:Plotting tree 133
2024-11-22 08:18:08,524:INFO:Plotting tree 134
2024-11-22 08:18:08,633:INFO:Plotting tree 135
2024-11-22 08:18:08,732:INFO:Plotting tree 136
2024-11-22 08:18:08,859:INFO:Plotting tree 137
2024-11-22 08:18:09,038:INFO:Plotting tree 138
2024-11-22 08:18:09,219:INFO:Plotting tree 139
2024-11-22 08:18:09,411:INFO:Plotting tree 140
2024-11-22 08:18:09,506:INFO:Plotting tree 141
2024-11-22 08:18:09,686:INFO:Plotting tree 142
2024-11-22 08:18:09,770:INFO:Plotting tree 143
2024-11-22 08:18:09,880:INFO:Plotting tree 144
2024-11-22 08:18:09,967:INFO:Plotting tree 145
2024-11-22 08:18:10,127:INFO:Plotting tree 146
2024-11-22 08:18:10,370:INFO:Plotting tree 147
2024-11-22 08:18:10,676:INFO:Plotting tree 148
2024-11-22 08:18:10,910:INFO:Plotting tree 149
2024-11-22 08:18:11,099:INFO:Plotting tree 150
2024-11-22 08:18:11,256:INFO:Plotting tree 151
2024-11-22 08:18:11,437:INFO:Plotting tree 152
2024-11-22 08:18:11,512:INFO:Plotting tree 153
2024-11-22 08:18:11,768:INFO:Plotting tree 154
2024-11-22 08:18:12,087:INFO:Plotting tree 155
2024-11-22 08:18:12,367:INFO:Plotting tree 156
2024-11-22 08:18:12,516:INFO:Plotting tree 157
2024-11-22 08:18:12,607:INFO:Plotting tree 158
2024-11-22 08:18:12,787:INFO:Plotting tree 159
2024-11-22 08:18:12,956:INFO:Plotting tree 160
2024-11-22 08:18:13,207:INFO:Plotting tree 161
2024-11-22 08:18:13,411:INFO:Plotting tree 162
2024-11-22 08:18:13,536:INFO:Plotting tree 163
2024-11-22 08:18:13,658:INFO:Plotting tree 164
2024-11-22 08:18:13,732:INFO:Plotting tree 165
2024-11-22 08:18:13,831:INFO:Plotting tree 166
2024-11-22 08:18:13,947:INFO:Plotting tree 167
2024-11-22 08:18:14,085:INFO:Plotting tree 168
2024-11-22 08:18:14,230:INFO:Plotting tree 169
2024-11-22 08:18:14,497:INFO:Plotting tree 170
2024-11-22 08:18:14,692:INFO:Plotting tree 171
2024-11-22 08:18:14,809:INFO:Plotting tree 172
2024-11-22 08:18:14,959:INFO:Plotting tree 173
2024-11-22 08:18:15,135:INFO:Plotting tree 174
2024-11-22 08:18:15,279:INFO:Plotting tree 175
2024-11-22 08:18:15,487:INFO:Plotting tree 176
2024-11-22 08:18:15,731:INFO:Plotting tree 177
2024-11-22 08:18:15,910:INFO:Plotting tree 178
2024-11-22 08:18:16,462:INFO:Plotting tree 179
2024-11-22 08:18:16,574:INFO:Plotting tree 180
2024-11-22 08:18:16,698:INFO:Plotting tree 181
2024-11-22 08:18:16,772:INFO:Plotting tree 182
2024-11-22 08:18:16,918:INFO:Plotting tree 183
2024-11-22 08:18:17,127:INFO:Plotting tree 184
2024-11-22 08:18:17,343:INFO:Plotting tree 185
2024-11-22 08:18:17,425:INFO:Plotting tree 186
2024-11-22 08:18:17,532:INFO:Plotting tree 187
2024-11-22 08:18:17,605:INFO:Plotting tree 188
2024-11-22 08:18:17,745:INFO:Plotting tree 189
2024-11-22 08:23:59,914:INFO:Visual Rendered Successfully
2024-11-22 08:24:00,969:INFO:plot_model() successfully completed......................................
2024-11-22 08:24:00,994:INFO:Initializing plot_model()
2024-11-22 08:24:01,002:INFO:plot_model(plot=dimension, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B1A7280>, system=True)
2024-11-22 08:24:01,002:INFO:Checking exceptions
2024-11-22 08:24:01,102:INFO:Preloading libraries
2024-11-22 08:24:01,178:INFO:Copying training dataset
2024-11-22 08:24:01,178:INFO:Plot type: dimension
2024-11-22 08:24:01,298:INFO:Fitting StandardScaler()
2024-11-22 08:24:01,402:INFO:Fitting PCA()
2024-11-22 08:24:01,723:INFO:Fitting & Transforming Model
2024-11-22 08:24:02,322:INFO:Visual Rendered Successfully
2024-11-22 08:24:02,517:INFO:plot_model() successfully completed......................................
2024-11-22 08:24:02,540:INFO:Initializing plot_model()
2024-11-22 08:24:02,540:INFO:plot_model(plot=feature_all, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B1A7280>, system=True)
2024-11-22 08:24:02,540:INFO:Checking exceptions
2024-11-22 08:24:02,653:INFO:Preloading libraries
2024-11-22 08:24:02,736:INFO:Copying training dataset
2024-11-22 08:24:02,736:INFO:Plot type: feature_all
2024-11-22 08:24:02,833:WARNING:No coef_ found. Trying feature_importances_
2024-11-22 08:24:03,621:INFO:Visual Rendered Successfully
2024-11-22 08:24:03,848:INFO:plot_model() successfully completed......................................
2024-11-22 08:24:03,875:INFO:Initializing plot_model()
2024-11-22 08:24:03,875:INFO:plot_model(plot=gain, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B1A7280>, system=True)
2024-11-22 08:24:03,875:INFO:Checking exceptions
2024-11-22 08:24:03,961:INFO:Preloading libraries
2024-11-22 08:24:04,003:INFO:Copying training dataset
2024-11-22 08:24:04,003:INFO:Plot type: gain
2024-11-22 08:24:04,003:INFO:Generating predictions / predict_proba on X_test
2024-11-22 08:24:04,925:INFO:Visual Rendered Successfully
2024-11-22 08:24:05,127:INFO:plot_model() successfully completed......................................
2024-11-22 08:24:05,152:INFO:Initializing plot_model()
2024-11-22 08:24:05,152:INFO:plot_model(plot=vc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B1A7280>, system=True)
2024-11-22 08:24:05,152:INFO:Checking exceptions
2024-11-22 08:24:05,262:INFO:Preloading libraries
2024-11-22 08:24:05,333:INFO:Copying training dataset
2024-11-22 08:24:05,333:INFO:Plot type: vc
2024-11-22 08:24:05,333:INFO:Determining param_name
2024-11-22 08:24:05,333:INFO:param_name: max_depth
2024-11-22 08:24:05,653:INFO:Fitting Model
2024-11-22 08:24:50,493:INFO:Visual Rendered Successfully
2024-11-22 08:24:50,726:INFO:plot_model() successfully completed......................................
2024-11-22 08:24:50,757:INFO:Initializing plot_model()
2024-11-22 08:24:50,757:INFO:plot_model(plot=learning, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B1A7280>, system=True)
2024-11-22 08:24:50,757:INFO:Checking exceptions
2024-11-22 08:24:50,885:INFO:Preloading libraries
2024-11-22 08:24:50,966:INFO:Copying training dataset
2024-11-22 08:24:50,967:INFO:Plot type: learning
2024-11-22 08:24:51,380:INFO:Fitting Model
2024-11-22 08:25:32,550:INFO:Visual Rendered Successfully
2024-11-22 08:25:32,792:INFO:plot_model() successfully completed......................................
2024-11-22 08:25:32,823:INFO:Initializing plot_model()
2024-11-22 08:25:32,823:INFO:plot_model(plot=threshold, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B1A7280>, system=True)
2024-11-22 08:25:32,823:INFO:Checking exceptions
2024-11-22 08:25:32,920:INFO:Preloading libraries
2024-11-22 08:25:33,000:INFO:Copying training dataset
2024-11-22 08:25:33,000:INFO:Plot type: threshold
2024-11-22 08:25:33,291:INFO:Fitting Model
2024-11-22 08:26:17,160:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2024-11-22 08:26:17,206:INFO:Scoring test/hold-out set
2024-11-22 08:26:18,284:INFO:Visual Rendered Successfully
2024-11-22 08:26:18,466:INFO:plot_model() successfully completed......................................
2024-11-22 08:26:18,491:INFO:Initializing plot_model()
2024-11-22 08:26:18,491:INFO:plot_model(plot=tree, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B1A7280>, system=True)
2024-11-22 08:26:18,491:INFO:Checking exceptions
2024-11-22 08:26:18,590:INFO:Preloading libraries
2024-11-22 08:26:18,631:INFO:Copying training dataset
2024-11-22 08:26:18,631:INFO:Plot type: tree
2024-11-22 08:26:25,683:INFO:Plotting decision trees
2024-11-22 08:26:25,747:INFO:Plotting tree 0
2024-11-22 08:26:27,066:INFO:Plotting tree 1
2024-11-22 08:26:27,240:INFO:Plotting tree 2
2024-11-22 08:26:27,338:INFO:Plotting tree 3
2024-11-22 08:26:27,557:INFO:Plotting tree 4
2024-11-22 08:26:27,788:INFO:Plotting tree 5
2024-11-22 08:26:27,860:INFO:Plotting tree 6
2024-11-22 08:26:27,950:INFO:Plotting tree 7
2024-11-22 08:26:28,023:INFO:Plotting tree 8
2024-11-22 08:26:28,097:INFO:Plotting tree 9
2024-11-22 08:26:28,163:INFO:Plotting tree 10
2024-11-22 08:26:28,467:INFO:Plotting tree 11
2024-11-22 08:26:28,581:INFO:Plotting tree 12
2024-11-22 08:26:28,814:INFO:Plotting tree 13
2024-11-22 08:26:29,529:INFO:Plotting tree 14
2024-11-22 08:26:29,609:INFO:Plotting tree 15
2024-11-22 08:26:29,783:INFO:Plotting tree 16
2024-11-22 08:26:29,931:INFO:Plotting tree 17
2024-11-22 08:26:30,113:INFO:Plotting tree 18
2024-11-22 08:26:30,215:INFO:Plotting tree 19
2024-11-22 08:26:30,438:INFO:Plotting tree 20
2024-11-22 08:26:30,619:INFO:Plotting tree 21
2024-11-22 08:26:30,717:INFO:Plotting tree 22
2024-11-22 08:26:30,791:INFO:Plotting tree 23
2024-11-22 08:26:30,903:INFO:Plotting tree 24
2024-11-22 08:26:31,024:INFO:Plotting tree 25
2024-11-22 08:26:31,225:INFO:Plotting tree 26
2024-11-22 08:26:31,458:INFO:Plotting tree 27
2024-11-22 08:26:31,532:INFO:Plotting tree 28
2024-11-22 08:26:31,614:INFO:Plotting tree 29
2024-11-22 08:26:31,822:INFO:Plotting tree 30
2024-11-22 08:26:32,046:INFO:Plotting tree 31
2024-11-22 08:26:32,302:INFO:Plotting tree 32
2024-11-22 08:26:32,379:INFO:Plotting tree 33
2024-11-22 08:26:32,635:INFO:Plotting tree 34
2024-11-22 08:26:32,835:INFO:Plotting tree 35
2024-11-22 08:26:32,934:INFO:Plotting tree 36
2024-11-22 08:26:33,139:INFO:Plotting tree 37
2024-11-22 08:26:33,426:INFO:Plotting tree 38
2024-11-22 08:26:33,639:INFO:Plotting tree 39
2024-11-22 08:26:33,899:INFO:Plotting tree 40
2024-11-22 08:26:34,021:INFO:Plotting tree 41
2024-11-22 08:26:34,223:INFO:Plotting tree 42
2024-11-22 08:26:34,422:INFO:Plotting tree 43
2024-11-22 08:26:34,501:INFO:Plotting tree 44
2024-11-22 08:26:34,658:INFO:Plotting tree 45
2024-11-22 08:26:34,900:INFO:Plotting tree 46
2024-11-22 08:26:35,009:INFO:Plotting tree 47
2024-11-22 08:26:35,142:INFO:Plotting tree 48
2024-11-22 08:26:35,340:INFO:Plotting tree 49
2024-11-22 08:26:35,494:INFO:Plotting tree 50
2024-11-22 08:26:35,716:INFO:Plotting tree 51
2024-11-22 08:26:35,923:INFO:Plotting tree 52
2024-11-22 08:26:35,997:INFO:Plotting tree 53
2024-11-22 08:26:36,080:INFO:Plotting tree 54
2024-11-22 08:26:36,247:INFO:Plotting tree 55
2024-11-22 08:26:36,342:INFO:Plotting tree 56
2024-11-22 08:26:36,605:INFO:Plotting tree 57
2024-11-22 08:26:36,800:INFO:Plotting tree 58
2024-11-22 08:26:37,053:INFO:Plotting tree 59
2024-11-22 08:26:37,242:INFO:Plotting tree 60
2024-11-22 08:26:37,436:INFO:Plotting tree 61
2024-11-22 08:26:37,637:INFO:Plotting tree 62
2024-11-22 08:26:37,718:INFO:Plotting tree 63
2024-11-22 08:26:37,811:INFO:Plotting tree 64
2024-11-22 08:26:38,085:INFO:Plotting tree 65
2024-11-22 08:26:38,337:INFO:Plotting tree 66
2024-11-22 08:26:38,502:INFO:Plotting tree 67
2024-11-22 08:26:38,702:INFO:Plotting tree 68
2024-11-22 08:26:38,916:INFO:Plotting tree 69
2024-11-22 08:26:39,143:INFO:Plotting tree 70
2024-11-22 08:26:39,413:INFO:Plotting tree 71
2024-11-22 08:26:39,536:INFO:Plotting tree 72
2024-11-22 08:26:39,619:INFO:Plotting tree 73
2024-11-22 08:26:39,837:INFO:Plotting tree 74
2024-11-22 08:26:39,978:INFO:Plotting tree 75
2024-11-22 08:26:40,077:INFO:Plotting tree 76
2024-11-22 08:26:40,171:INFO:Plotting tree 77
2024-11-22 08:26:40,353:INFO:Plotting tree 78
2024-11-22 08:26:40,551:INFO:Plotting tree 79
2024-11-22 08:26:40,633:INFO:Plotting tree 80
2024-11-22 08:26:40,830:INFO:Plotting tree 81
2024-11-22 08:26:41,107:INFO:Plotting tree 82
2024-11-22 08:26:41,432:INFO:Plotting tree 83
2024-11-22 08:26:41,507:INFO:Plotting tree 84
2024-11-22 08:26:41,614:INFO:Plotting tree 85
2024-11-22 08:26:41,728:INFO:Plotting tree 86
2024-11-22 08:26:41,847:INFO:Plotting tree 87
2024-11-22 08:26:41,948:INFO:Plotting tree 88
2024-11-22 08:26:42,145:INFO:Plotting tree 89
2024-11-22 08:26:42,210:INFO:Plotting tree 90
2024-11-22 08:26:42,407:INFO:Plotting tree 91
2024-11-22 08:26:42,529:INFO:Plotting tree 92
2024-11-22 08:26:42,718:INFO:Plotting tree 93
2024-11-22 08:26:43,316:INFO:Plotting tree 94
2024-11-22 08:26:43,535:INFO:Plotting tree 95
2024-11-22 08:26:43,608:INFO:Plotting tree 96
2024-11-22 08:26:43,720:INFO:Plotting tree 97
2024-11-22 08:26:43,803:INFO:Plotting tree 98
2024-11-22 08:26:44,043:INFO:Plotting tree 99
2024-11-22 08:26:44,256:INFO:Plotting tree 100
2024-11-22 08:26:44,354:INFO:Plotting tree 101
2024-11-22 08:26:44,533:INFO:Plotting tree 102
2024-11-22 08:26:44,634:INFO:Plotting tree 103
2024-11-22 08:26:44,717:INFO:Plotting tree 104
2024-11-22 08:26:44,864:INFO:Plotting tree 105
2024-11-22 08:26:45,035:INFO:Plotting tree 106
2024-11-22 08:26:45,222:INFO:Plotting tree 107
2024-11-22 08:26:45,339:INFO:Plotting tree 108
2024-11-22 08:26:45,421:INFO:Plotting tree 109
2024-11-22 08:26:45,635:INFO:Plotting tree 110
2024-11-22 08:26:45,849:INFO:Plotting tree 111
2024-11-22 08:26:45,923:INFO:Plotting tree 112
2024-11-22 08:26:46,023:INFO:Plotting tree 113
2024-11-22 08:26:46,269:INFO:Plotting tree 114
2024-11-22 08:26:46,344:INFO:Plotting tree 115
2024-11-22 08:26:46,409:INFO:Plotting tree 116
2024-11-22 08:26:46,483:INFO:Plotting tree 117
2024-11-22 08:26:46,646:INFO:Plotting tree 118
2024-11-22 08:26:46,827:INFO:Plotting tree 119
2024-11-22 08:26:46,952:INFO:Plotting tree 120
2024-11-22 08:26:47,018:INFO:Plotting tree 121
2024-11-22 08:26:47,236:INFO:Plotting tree 122
2024-11-22 08:26:47,351:INFO:Plotting tree 123
2024-11-22 08:26:47,424:INFO:Plotting tree 124
2024-11-22 08:26:47,515:INFO:Plotting tree 125
2024-11-22 08:26:47,658:INFO:Plotting tree 126
2024-11-22 08:26:47,730:INFO:Plotting tree 127
2024-11-22 08:26:47,878:INFO:Plotting tree 128
2024-11-22 08:26:48,075:INFO:Plotting tree 129
2024-11-22 08:26:48,148:INFO:Plotting tree 130
2024-11-22 08:26:48,247:INFO:Plotting tree 131
2024-11-22 08:26:48,384:INFO:Plotting tree 132
2024-11-22 08:26:48,507:INFO:Plotting tree 133
2024-11-22 08:26:48,584:INFO:Plotting tree 134
2024-11-22 08:26:48,683:INFO:Plotting tree 135
2024-11-22 08:26:48,783:INFO:Plotting tree 136
2024-11-22 08:26:48,908:INFO:Plotting tree 137
2024-11-22 08:26:49,050:INFO:Plotting tree 138
2024-11-22 08:26:49,192:INFO:Plotting tree 139
2024-11-22 08:26:49,360:INFO:Plotting tree 140
2024-11-22 08:26:49,443:INFO:Plotting tree 141
2024-11-22 08:26:49,583:INFO:Plotting tree 142
2024-11-22 08:26:49,657:INFO:Plotting tree 143
2024-11-22 08:26:49,745:INFO:Plotting tree 144
2024-11-22 08:26:49,818:INFO:Plotting tree 145
2024-11-22 08:26:49,943:INFO:Plotting tree 146
2024-11-22 08:26:50,134:INFO:Plotting tree 147
2024-11-22 08:26:50,446:INFO:Plotting tree 148
2024-11-22 08:26:50,634:INFO:Plotting tree 149
2024-11-22 08:26:50,789:INFO:Plotting tree 150
2024-11-22 08:26:50,925:INFO:Plotting tree 151
2024-11-22 08:26:51,106:INFO:Plotting tree 152
2024-11-22 08:26:51,179:INFO:Plotting tree 153
2024-11-22 08:26:51,408:INFO:Plotting tree 154
2024-11-22 08:26:51,665:INFO:Plotting tree 155
2024-11-22 08:26:51,756:INFO:Plotting tree 156
2024-11-22 08:26:51,882:INFO:Plotting tree 157
2024-11-22 08:26:51,971:INFO:Plotting tree 158
2024-11-22 08:26:52,153:INFO:Plotting tree 159
2024-11-22 08:26:52,288:INFO:Plotting tree 160
2024-11-22 08:26:52,450:INFO:Plotting tree 161
2024-11-22 08:26:52,555:INFO:Plotting tree 162
2024-11-22 08:26:52,636:INFO:Plotting tree 163
2024-11-22 08:26:52,741:INFO:Plotting tree 164
2024-11-22 08:26:52,820:INFO:Plotting tree 165
2024-11-22 08:26:52,903:INFO:Plotting tree 166
2024-11-22 08:26:53,005:INFO:Plotting tree 167
2024-11-22 08:26:53,108:INFO:Plotting tree 168
2024-11-22 08:26:53,226:INFO:Plotting tree 169
2024-11-22 08:26:53,428:INFO:Plotting tree 170
2024-11-22 08:26:53,638:INFO:Plotting tree 171
2024-11-22 08:26:53,763:INFO:Plotting tree 172
2024-11-22 08:26:53,903:INFO:Plotting tree 173
2024-11-22 08:26:54,062:INFO:Plotting tree 174
2024-11-22 08:26:54,165:INFO:Plotting tree 175
2024-11-22 08:26:54,379:INFO:Plotting tree 176
2024-11-22 08:26:54,611:INFO:Plotting tree 177
2024-11-22 08:26:54,791:INFO:Plotting tree 178
2024-11-22 08:26:54,872:INFO:Plotting tree 179
2024-11-22 08:26:54,980:INFO:Plotting tree 180
2024-11-22 08:26:55,089:INFO:Plotting tree 181
2024-11-22 08:26:55,162:INFO:Plotting tree 182
2024-11-22 08:26:55,287:INFO:Plotting tree 183
2024-11-22 08:26:55,885:INFO:Plotting tree 184
2024-11-22 08:26:56,073:INFO:Plotting tree 185
2024-11-22 08:26:56,162:INFO:Plotting tree 186
2024-11-22 08:26:56,270:INFO:Plotting tree 187
2024-11-22 08:26:56,347:INFO:Plotting tree 188
2024-11-22 08:26:56,487:INFO:Plotting tree 189
2024-11-22 08:32:11,099:INFO:Visual Rendered Successfully
2024-11-22 08:32:12,144:INFO:plot_model() successfully completed......................................
2024-11-22 08:32:12,162:INFO:Initializing plot_model()
2024-11-22 08:32:12,162:INFO:plot_model(plot=ks, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B1A7280>, system=True)
2024-11-22 08:32:12,162:INFO:Checking exceptions
2024-11-22 08:32:12,267:INFO:Preloading libraries
2024-11-22 08:32:12,317:INFO:Copying training dataset
2024-11-22 08:32:12,317:INFO:Plot type: ks
2024-11-22 08:32:12,317:INFO:Generating predictions / predict_proba on X_test
2024-11-22 08:32:13,278:INFO:Visual Rendered Successfully
2024-11-22 08:32:13,463:INFO:plot_model() successfully completed......................................
2024-11-22 08:32:13,491:INFO:Initializing plot_model()
2024-11-22 08:32:13,491:INFO:plot_model(plot=lift, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B1A7280>, system=True)
2024-11-22 08:32:13,491:INFO:Checking exceptions
2024-11-22 08:32:13,585:INFO:Preloading libraries
2024-11-22 08:32:13,636:INFO:Copying training dataset
2024-11-22 08:32:13,636:INFO:Plot type: lift
2024-11-22 08:32:13,644:INFO:Generating predictions / predict_proba on X_test
2024-11-22 08:32:14,476:INFO:Visual Rendered Successfully
2024-11-22 08:32:14,720:INFO:plot_model() successfully completed......................................
2024-11-22 08:32:14,746:INFO:Initializing plot_model()
2024-11-22 08:32:14,746:INFO:plot_model(plot=parameter, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B1A7280>, system=True)
2024-11-22 08:32:14,746:INFO:Checking exceptions
2024-11-22 08:32:14,831:INFO:Preloading libraries
2024-11-22 08:32:14,890:INFO:Copying training dataset
2024-11-22 08:32:14,890:INFO:Plot type: parameter
2024-11-22 08:32:14,912:INFO:Visual Rendered Successfully
2024-11-22 08:32:15,161:INFO:plot_model() successfully completed......................................
2024-11-22 08:32:15,188:INFO:Initializing plot_model()
2024-11-22 08:32:15,188:INFO:plot_model(plot=auc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B1A7280>, system=True)
2024-11-22 08:32:15,188:INFO:Checking exceptions
2024-11-22 08:32:15,305:INFO:Preloading libraries
2024-11-22 08:32:15,354:INFO:Copying training dataset
2024-11-22 08:32:15,354:INFO:Plot type: auc
2024-11-22 08:32:15,692:INFO:Fitting Model
2024-11-22 08:32:15,692:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2024-11-22 08:32:15,692:INFO:Scoring test/hold-out set
2024-11-22 08:32:16,623:INFO:Visual Rendered Successfully
2024-11-22 08:32:16,823:INFO:plot_model() successfully completed......................................
2024-11-22 08:32:16,841:INFO:Initializing plot_model()
2024-11-22 08:32:16,841:INFO:plot_model(plot=gain, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B1A7280>, system=True)
2024-11-22 08:32:16,841:INFO:Checking exceptions
2024-11-22 08:32:16,938:INFO:Preloading libraries
2024-11-22 08:32:16,995:INFO:Copying training dataset
2024-11-22 08:32:16,995:INFO:Plot type: gain
2024-11-22 08:32:16,995:INFO:Generating predictions / predict_proba on X_test
2024-11-22 08:32:17,824:INFO:Visual Rendered Successfully
2024-11-22 08:32:18,027:INFO:plot_model() successfully completed......................................
2024-11-22 08:32:18,057:INFO:Initializing plot_model()
2024-11-22 08:32:18,059:INFO:plot_model(plot=learning, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B1A7280>, system=True)
2024-11-22 08:32:18,059:INFO:Checking exceptions
2024-11-22 08:32:18,191:INFO:Preloading libraries
2024-11-22 08:32:18,252:INFO:Copying training dataset
2024-11-22 08:32:18,252:INFO:Plot type: learning
2024-11-22 08:32:18,625:INFO:Fitting Model
2024-11-22 08:32:59,684:INFO:Visual Rendered Successfully
2024-11-22 08:32:59,873:INFO:plot_model() successfully completed......................................
2024-11-22 08:32:59,889:INFO:Initializing plot_model()
2024-11-22 08:32:59,891:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B1A7280>, system=True)
2024-11-22 08:32:59,891:INFO:Checking exceptions
2024-11-22 08:32:59,974:INFO:Preloading libraries
2024-11-22 08:33:00,004:INFO:Copying training dataset
2024-11-22 08:33:00,004:INFO:Plot type: pipeline
2024-11-22 08:33:00,361:INFO:Visual Rendered Successfully
2024-11-22 08:33:00,683:INFO:plot_model() successfully completed......................................
2024-11-22 08:33:00,697:INFO:Initializing plot_model()
2024-11-22 08:33:00,697:INFO:plot_model(plot=confusion_matrix, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B1A7280>, system=True)
2024-11-22 08:33:00,697:INFO:Checking exceptions
2024-11-22 08:33:00,759:INFO:Preloading libraries
2024-11-22 08:33:00,790:INFO:Copying training dataset
2024-11-22 08:33:00,790:INFO:Plot type: confusion_matrix
2024-11-22 08:33:01,030:INFO:Fitting Model
2024-11-22 08:33:01,031:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2024-11-22 08:33:01,032:INFO:Scoring test/hold-out set
2024-11-22 08:33:01,650:INFO:Visual Rendered Successfully
2024-11-22 08:33:01,885:INFO:plot_model() successfully completed......................................
2024-11-22 08:33:01,908:INFO:Initializing plot_model()
2024-11-22 08:33:01,908:INFO:plot_model(plot=threshold, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165B1A7280>, system=True)
2024-11-22 08:33:01,908:INFO:Checking exceptions
2024-11-22 08:33:01,961:INFO:Preloading libraries
2024-11-22 08:33:01,992:INFO:Copying training dataset
2024-11-22 08:33:01,992:INFO:Plot type: threshold
2024-11-22 08:33:02,325:INFO:Fitting Model
2024-11-22 08:33:42,760:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2024-11-22 08:33:42,805:INFO:Scoring test/hold-out set
2024-11-22 08:33:43,581:INFO:Visual Rendered Successfully
2024-11-22 08:33:43,763:INFO:plot_model() successfully completed......................................
2024-11-22 08:50:47,216:INFO:PyCaret ClassificationExperiment
2024-11-22 08:50:47,224:INFO:Logging name: clf-default-name
2024-11-22 08:50:47,224:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-11-22 08:50:47,224:INFO:version 3.3.2
2024-11-22 08:50:47,224:INFO:Initializing setup()
2024-11-22 08:50:47,224:INFO:self.USI: a6ae
2024-11-22 08:50:47,224:INFO:self._variable_keys: {'exp_id', 'log_plots_param', 'gpu_param', 'y', 'X_test', 'target_param', 'data', 'y_train', 'idx', 'USI', 'memory', 'y_test', 'X_train', 'gpu_n_jobs_param', 'n_jobs_param', 'X', 'logging_param', 'html_param', 'fold_generator', 'fold_groups_param', 'is_multiclass', '_ml_usecase', '_available_plots', 'fix_imbalance', 'exp_name_log', 'fold_shuffle_param', 'pipeline', 'seed'}
2024-11-22 08:50:47,224:INFO:Checking environment
2024-11-22 08:50:47,225:INFO:python_version: 3.10.9
2024-11-22 08:50:47,225:INFO:python_build: ('main', 'Mar  1 2023 18:18:15')
2024-11-22 08:50:47,225:INFO:machine: AMD64
2024-11-22 08:50:47,225:INFO:platform: Windows-10-10.0.19045-SP0
2024-11-22 08:50:47,226:INFO:Memory: svmem(total=17044500480, available=8492625920, percent=50.2, used=8551874560, free=8492625920)
2024-11-22 08:50:47,226:INFO:Physical Core: 2
2024-11-22 08:50:47,226:INFO:Logical Core: 4
2024-11-22 08:50:47,226:INFO:Checking libraries
2024-11-22 08:50:47,226:INFO:System:
2024-11-22 08:50:47,228:INFO:    python: 3.10.9 | packaged by Anaconda, Inc. | (main, Mar  1 2023, 18:18:15) [MSC v.1916 64 bit (AMD64)]
2024-11-22 08:50:47,228:INFO:executable: C:\Users\teklu\anaconda3\python.exe
2024-11-22 08:50:47,228:INFO:   machine: Windows-10-10.0.19045-SP0
2024-11-22 08:50:47,228:INFO:PyCaret required dependencies:
2024-11-22 08:50:47,229:INFO:                 pip: 22.3.1
2024-11-22 08:50:47,230:INFO:          setuptools: 65.6.3
2024-11-22 08:50:47,232:INFO:             pycaret: 3.3.2
2024-11-22 08:50:47,232:INFO:             IPython: 8.10.0
2024-11-22 08:50:47,232:INFO:          ipywidgets: 7.6.5
2024-11-22 08:50:47,233:INFO:                tqdm: 4.64.1
2024-11-22 08:50:47,233:INFO:               numpy: 1.23.5
2024-11-22 08:50:47,233:INFO:              pandas: 1.5.3
2024-11-22 08:50:47,237:INFO:              jinja2: 3.1.2
2024-11-22 08:50:47,237:INFO:               scipy: 1.10.0
2024-11-22 08:50:47,238:INFO:              joblib: 1.3.2
2024-11-22 08:50:47,238:INFO:             sklearn: 1.4.2
2024-11-22 08:50:47,238:INFO:                pyod: 2.0.2
2024-11-22 08:50:47,239:INFO:            imblearn: 0.12.4
2024-11-22 08:50:47,239:INFO:   category_encoders: 2.6.4
2024-11-22 08:50:47,240:INFO:            lightgbm: 4.5.0
2024-11-22 08:50:47,241:INFO:               numba: 0.56.4
2024-11-22 08:50:47,241:INFO:            requests: 2.28.1
2024-11-22 08:50:47,241:INFO:          matplotlib: 3.7.0
2024-11-22 08:50:47,242:INFO:          scikitplot: 0.3.7
2024-11-22 08:50:47,242:INFO:         yellowbrick: 1.5
2024-11-22 08:50:47,242:INFO:              plotly: 5.24.1
2024-11-22 08:50:47,242:INFO:    plotly-resampler: Not installed
2024-11-22 08:50:47,242:INFO:             kaleido: 0.2.1
2024-11-22 08:50:47,242:INFO:           schemdraw: 0.15
2024-11-22 08:50:47,242:INFO:         statsmodels: 0.13.5
2024-11-22 08:50:47,243:INFO:              sktime: 0.26.0
2024-11-22 08:50:47,243:INFO:               tbats: 1.1.3
2024-11-22 08:50:47,243:INFO:            pmdarima: 2.0.4
2024-11-22 08:50:47,243:INFO:              psutil: 5.9.0
2024-11-22 08:50:47,243:INFO:          markupsafe: 2.1.1
2024-11-22 08:50:47,243:INFO:             pickle5: Not installed
2024-11-22 08:50:47,244:INFO:         cloudpickle: 2.0.0
2024-11-22 08:50:47,244:INFO:         deprecation: 2.1.0
2024-11-22 08:50:47,245:INFO:              xxhash: 3.5.0
2024-11-22 08:50:47,245:INFO:           wurlitzer: Not installed
2024-11-22 08:50:47,245:INFO:PyCaret optional dependencies:
2024-11-22 08:50:47,245:INFO:                shap: Not installed
2024-11-22 08:50:47,245:INFO:           interpret: Not installed
2024-11-22 08:50:47,245:INFO:                umap: Not installed
2024-11-22 08:50:47,245:INFO:     ydata_profiling: Not installed
2024-11-22 08:50:47,245:INFO:  explainerdashboard: Not installed
2024-11-22 08:50:47,245:INFO:             autoviz: Not installed
2024-11-22 08:50:47,245:INFO:           fairlearn: Not installed
2024-11-22 08:50:47,245:INFO:          deepchecks: Not installed
2024-11-22 08:50:47,245:INFO:             xgboost: Not installed
2024-11-22 08:50:47,245:INFO:            catboost: Not installed
2024-11-22 08:50:47,245:INFO:              kmodes: Not installed
2024-11-22 08:50:47,245:INFO:             mlxtend: Not installed
2024-11-22 08:50:47,245:INFO:       statsforecast: Not installed
2024-11-22 08:50:47,245:INFO:        tune_sklearn: Not installed
2024-11-22 08:50:47,245:INFO:                 ray: Not installed
2024-11-22 08:50:47,245:INFO:            hyperopt: Not installed
2024-11-22 08:50:47,250:INFO:              optuna: Not installed
2024-11-22 08:50:47,250:INFO:               skopt: Not installed
2024-11-22 08:50:47,250:INFO:              mlflow: Not installed
2024-11-22 08:50:47,250:INFO:              gradio: Not installed
2024-11-22 08:50:47,250:INFO:             fastapi: Not installed
2024-11-22 08:50:47,250:INFO:             uvicorn: Not installed
2024-11-22 08:50:47,250:INFO:              m2cgen: Not installed
2024-11-22 08:50:47,250:INFO:           evidently: Not installed
2024-11-22 08:50:47,250:INFO:               fugue: Not installed
2024-11-22 08:50:47,250:INFO:           streamlit: Not installed
2024-11-22 08:50:47,250:INFO:             prophet: Not installed
2024-11-22 08:50:47,250:INFO:None
2024-11-22 08:50:47,250:INFO:Set up data.
2024-11-22 08:50:47,286:INFO:Set up folding strategy.
2024-11-22 08:50:47,286:INFO:Set up train/test split.
2024-11-22 08:50:47,317:INFO:Set up index.
2024-11-22 08:50:47,317:INFO:Assigning column types.
2024-11-22 08:50:47,318:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-11-22 08:50:47,446:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-22 08:50:47,454:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-22 08:50:47,533:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:50:47,533:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:50:47,688:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-22 08:50:47,690:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-22 08:50:47,794:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:50:47,794:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:50:47,794:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-11-22 08:50:47,949:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-22 08:50:48,038:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:50:48,038:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:50:48,186:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-22 08:50:48,310:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:50:48,310:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:50:48,310:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-11-22 08:50:48,517:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:50:48,517:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:50:48,734:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:50:48,734:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:50:48,739:INFO:Preparing preprocessing pipeline...
2024-11-22 08:50:48,739:INFO:Set up label encoding.
2024-11-22 08:50:48,739:INFO:Set up simple imputation.
2024-11-22 08:50:48,763:INFO:Set up encoding of ordinal features.
2024-11-22 08:50:48,803:INFO:Set up encoding of categorical features.
2024-11-22 08:50:49,053:INFO:Finished creating preprocessing pipeline.
2024-11-22 08:50:49,376:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\teklu\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['Age'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                                        {'col': 'Hemoptysis',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64},
                                                                        {'col': 'Breathing',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64},
                                                                        {'col': 'Arthritis',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64},
                                                                        {'col': 'Vomiting',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False)
2024-11-22 08:50:49,376:INFO:Creating final display dataframe.
2024-11-22 08:50:50,997:INFO:Setup _display_container:                     Description                     Value
0                    Session id                       123
1                        Target           Covid_19_result
2                   Target type                    Binary
3                Target mapping  Negative: 0, Positive: 1
4           Original data shape                (2001, 13)
5        Transformed data shape                (2001, 13)
6   Transformed train set shape                (1400, 13)
7    Transformed test set shape                 (601, 13)
8              Numeric features                         1
9          Categorical features                        11
10                   Preprocess                      True
11              Imputation type                    simple
12           Numeric imputation                      mean
13       Categorical imputation                      mode
14     Maximum one-hot encoding                        25
15              Encoding method                      None
16               Fold Generator           StratifiedKFold
17                  Fold Number                        10
18                     CPU Jobs                        -1
19                      Use GPU                     False
20               Log Experiment                     False
21              Experiment Name          clf-default-name
22                          USI                      a6ae
2024-11-22 08:50:51,263:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:50:51,263:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:50:51,484:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:50:51,484:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 08:50:51,488:INFO:setup() successfully completed in 4.29s...............
2024-11-22 08:50:51,488:INFO:Initializing compare_models()
2024-11-22 08:50:51,488:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C3CA0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C3CA0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-11-22 08:50:51,488:INFO:Checking exceptions
2024-11-22 08:50:51,496:INFO:Preparing display monitor
2024-11-22 08:50:51,603:INFO:Initializing Logistic Regression
2024-11-22 08:50:51,603:INFO:Total runtime is 0.0 minutes
2024-11-22 08:50:51,615:INFO:SubProcess create_model() called ==================================
2024-11-22 08:50:51,616:INFO:Initializing create_model()
2024-11-22 08:50:51,616:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C3CA0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000216FD5D2560>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 08:50:51,616:INFO:Checking exceptions
2024-11-22 08:50:51,616:INFO:Importing libraries
2024-11-22 08:50:51,617:INFO:Copying training dataset
2024-11-22 08:50:51,633:INFO:Defining folds
2024-11-22 08:50:51,634:INFO:Declaring metric variables
2024-11-22 08:50:51,641:INFO:Importing untrained model
2024-11-22 08:50:51,648:INFO:Logistic Regression Imported successfully
2024-11-22 08:50:51,668:INFO:Starting cross validation
2024-11-22 08:50:51,673:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 08:51:02,897:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:02,906:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:02,906:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:02,922:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:02,922:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:02,929:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:02,929:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:02,945:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:02,962:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:03,302:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:03,318:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:03,334:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:03,767:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:03,767:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:03,783:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:03,783:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:03,799:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:03,810:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:03,810:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:03,815:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:03,830:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:04,161:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:04,177:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:04,193:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:04,336:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:04,352:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:04,361:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:04,419:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:04,427:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:04,435:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:04,460:INFO:Calculating mean and std
2024-11-22 08:51:04,460:INFO:Creating metrics dataframe
2024-11-22 08:51:04,468:INFO:Uploading results into container
2024-11-22 08:51:04,468:INFO:Uploading model into container now
2024-11-22 08:51:04,468:INFO:_master_model_container: 1
2024-11-22 08:51:04,468:INFO:_display_container: 2
2024-11-22 08:51:04,476:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-22 08:51:04,477:INFO:create_model() successfully completed......................................
2024-11-22 08:51:04,677:INFO:SubProcess create_model() end ==================================
2024-11-22 08:51:04,677:INFO:Creating metrics dataframe
2024-11-22 08:51:04,707:INFO:Initializing K Neighbors Classifier
2024-11-22 08:51:04,707:INFO:Total runtime is 0.21839611530303954 minutes
2024-11-22 08:51:04,723:INFO:SubProcess create_model() called ==================================
2024-11-22 08:51:04,723:INFO:Initializing create_model()
2024-11-22 08:51:04,723:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C3CA0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000216FD5D2560>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 08:51:04,723:INFO:Checking exceptions
2024-11-22 08:51:04,723:INFO:Importing libraries
2024-11-22 08:51:04,723:INFO:Copying training dataset
2024-11-22 08:51:04,740:INFO:Defining folds
2024-11-22 08:51:04,740:INFO:Declaring metric variables
2024-11-22 08:51:04,755:INFO:Importing untrained model
2024-11-22 08:51:04,769:INFO:K Neighbors Classifier Imported successfully
2024-11-22 08:51:04,792:INFO:Starting cross validation
2024-11-22 08:51:04,795:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 08:51:05,589:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:05,597:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:05,597:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:05,597:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:05,597:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:05,597:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:05,612:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:05,612:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:05,612:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:05,612:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:05,628:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:06,373:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:06,384:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:06,399:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:06,410:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:06,417:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:06,435:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:06,436:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:06,451:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:06,459:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:06,459:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:06,475:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:06,494:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:06,996:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:07,004:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:07,016:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:07,025:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:07,041:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:07,049:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:07,082:INFO:Calculating mean and std
2024-11-22 08:51:07,082:INFO:Creating metrics dataframe
2024-11-22 08:51:07,091:INFO:Uploading results into container
2024-11-22 08:51:07,091:INFO:Uploading model into container now
2024-11-22 08:51:07,091:INFO:_master_model_container: 2
2024-11-22 08:51:07,091:INFO:_display_container: 2
2024-11-22 08:51:07,091:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-11-22 08:51:07,091:INFO:create_model() successfully completed......................................
2024-11-22 08:51:07,288:INFO:SubProcess create_model() end ==================================
2024-11-22 08:51:07,288:INFO:Creating metrics dataframe
2024-11-22 08:51:07,309:INFO:Initializing Naive Bayes
2024-11-22 08:51:07,309:INFO:Total runtime is 0.2617587447166443 minutes
2024-11-22 08:51:07,329:INFO:SubProcess create_model() called ==================================
2024-11-22 08:51:07,329:INFO:Initializing create_model()
2024-11-22 08:51:07,329:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C3CA0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000216FD5D2560>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 08:51:07,329:INFO:Checking exceptions
2024-11-22 08:51:07,329:INFO:Importing libraries
2024-11-22 08:51:07,329:INFO:Copying training dataset
2024-11-22 08:51:07,360:INFO:Defining folds
2024-11-22 08:51:07,360:INFO:Declaring metric variables
2024-11-22 08:51:07,372:INFO:Importing untrained model
2024-11-22 08:51:07,389:INFO:Naive Bayes Imported successfully
2024-11-22 08:51:07,421:INFO:Starting cross validation
2024-11-22 08:51:07,428:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 08:51:08,096:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:08,107:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:08,109:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:08,118:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:08,118:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:08,122:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:08,126:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:08,133:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:08,134:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:08,138:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:08,162:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:08,178:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:08,753:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:08,768:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:08,777:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:08,777:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:08,791:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:08,807:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:08,821:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:08,837:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:08,851:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:08,859:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:08,872:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:08,886:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:09,345:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:09,362:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:09,370:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:09,378:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:09,389:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:09,405:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:09,437:INFO:Calculating mean and std
2024-11-22 08:51:09,437:INFO:Creating metrics dataframe
2024-11-22 08:51:09,443:INFO:Uploading results into container
2024-11-22 08:51:09,443:INFO:Uploading model into container now
2024-11-22 08:51:09,443:INFO:_master_model_container: 3
2024-11-22 08:51:09,451:INFO:_display_container: 2
2024-11-22 08:51:09,452:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-11-22 08:51:09,452:INFO:create_model() successfully completed......................................
2024-11-22 08:51:09,635:INFO:SubProcess create_model() end ==================================
2024-11-22 08:51:09,635:INFO:Creating metrics dataframe
2024-11-22 08:51:09,669:INFO:Initializing Decision Tree Classifier
2024-11-22 08:51:09,669:INFO:Total runtime is 0.30109344323476156 minutes
2024-11-22 08:51:09,678:INFO:SubProcess create_model() called ==================================
2024-11-22 08:51:09,679:INFO:Initializing create_model()
2024-11-22 08:51:09,679:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C3CA0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000216FD5D2560>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 08:51:09,679:INFO:Checking exceptions
2024-11-22 08:51:09,679:INFO:Importing libraries
2024-11-22 08:51:09,679:INFO:Copying training dataset
2024-11-22 08:51:09,699:INFO:Defining folds
2024-11-22 08:51:09,699:INFO:Declaring metric variables
2024-11-22 08:51:09,715:INFO:Importing untrained model
2024-11-22 08:51:09,725:INFO:Decision Tree Classifier Imported successfully
2024-11-22 08:51:09,748:INFO:Starting cross validation
2024-11-22 08:51:09,759:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 08:51:10,580:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:10,593:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:10,595:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:10,595:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:10,611:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:10,611:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:10,618:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:10,628:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:10,634:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:10,649:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:11,248:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:11,256:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:11,272:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:11,272:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:11,280:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:11,296:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:11,304:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:11,312:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:11,312:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:11,329:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:11,330:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:11,338:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:12,100:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:12,110:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:12,121:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:12,122:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:12,130:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:12,130:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:12,164:INFO:Calculating mean and std
2024-11-22 08:51:12,164:INFO:Creating metrics dataframe
2024-11-22 08:51:12,172:INFO:Uploading results into container
2024-11-22 08:51:12,172:INFO:Uploading model into container now
2024-11-22 08:51:12,172:INFO:_master_model_container: 4
2024-11-22 08:51:12,172:INFO:_display_container: 2
2024-11-22 08:51:12,172:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-11-22 08:51:12,172:INFO:create_model() successfully completed......................................
2024-11-22 08:51:12,369:INFO:SubProcess create_model() end ==================================
2024-11-22 08:51:12,369:INFO:Creating metrics dataframe
2024-11-22 08:51:12,395:INFO:Initializing SVM - Linear Kernel
2024-11-22 08:51:12,395:INFO:Total runtime is 0.3465364972750346 minutes
2024-11-22 08:51:12,409:INFO:SubProcess create_model() called ==================================
2024-11-22 08:51:12,410:INFO:Initializing create_model()
2024-11-22 08:51:12,410:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C3CA0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000216FD5D2560>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 08:51:12,410:INFO:Checking exceptions
2024-11-22 08:51:12,410:INFO:Importing libraries
2024-11-22 08:51:12,410:INFO:Copying training dataset
2024-11-22 08:51:12,428:INFO:Defining folds
2024-11-22 08:51:12,429:INFO:Declaring metric variables
2024-11-22 08:51:12,441:INFO:Importing untrained model
2024-11-22 08:51:12,450:INFO:SVM - Linear Kernel Imported successfully
2024-11-22 08:51:12,474:INFO:Starting cross validation
2024-11-22 08:51:12,483:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 08:51:13,180:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:13,199:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:13,200:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:13,216:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:13,223:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:13,244:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:13,252:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:13,280:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:13,308:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:13,286:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:13,371:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:13,385:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:13,983:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:13,991:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:13,999:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:13,999:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:14,015:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:14,016:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:14,017:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:14,025:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:14,033:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:14,053:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:14,073:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:14,086:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:14,542:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:14,556:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:14,557:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:14,561:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:14,570:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:14,578:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:14,613:INFO:Calculating mean and std
2024-11-22 08:51:14,614:INFO:Creating metrics dataframe
2024-11-22 08:51:14,619:INFO:Uploading results into container
2024-11-22 08:51:14,619:INFO:Uploading model into container now
2024-11-22 08:51:14,627:INFO:_master_model_container: 5
2024-11-22 08:51:14,627:INFO:_display_container: 2
2024-11-22 08:51:14,627:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-11-22 08:51:14,627:INFO:create_model() successfully completed......................................
2024-11-22 08:51:14,828:INFO:SubProcess create_model() end ==================================
2024-11-22 08:51:14,828:INFO:Creating metrics dataframe
2024-11-22 08:51:14,858:INFO:Initializing Ridge Classifier
2024-11-22 08:51:14,858:INFO:Total runtime is 0.3875757972399394 minutes
2024-11-22 08:51:14,871:INFO:SubProcess create_model() called ==================================
2024-11-22 08:51:14,871:INFO:Initializing create_model()
2024-11-22 08:51:14,871:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C3CA0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000216FD5D2560>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 08:51:14,871:INFO:Checking exceptions
2024-11-22 08:51:14,871:INFO:Importing libraries
2024-11-22 08:51:14,871:INFO:Copying training dataset
2024-11-22 08:51:14,893:INFO:Defining folds
2024-11-22 08:51:14,894:INFO:Declaring metric variables
2024-11-22 08:51:14,913:INFO:Importing untrained model
2024-11-22 08:51:14,928:INFO:Ridge Classifier Imported successfully
2024-11-22 08:51:14,964:INFO:Starting cross validation
2024-11-22 08:51:14,975:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 08:51:15,679:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:15,695:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:15,695:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:15,695:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:15,703:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:15,711:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:15,711:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:15,711:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:15,719:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:15,719:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:15,727:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:15,751:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:16,359:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:16,359:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:16,367:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:16,376:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:16,376:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:16,383:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:16,383:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:16,391:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:16,400:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:16,416:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:16,433:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:16,446:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:16,912:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:16,926:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:16,934:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:16,942:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:16,943:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:16,959:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:16,976:INFO:Calculating mean and std
2024-11-22 08:51:16,976:INFO:Creating metrics dataframe
2024-11-22 08:51:16,984:INFO:Uploading results into container
2024-11-22 08:51:16,984:INFO:Uploading model into container now
2024-11-22 08:51:16,984:INFO:_master_model_container: 6
2024-11-22 08:51:16,984:INFO:_display_container: 2
2024-11-22 08:51:16,984:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-11-22 08:51:16,984:INFO:create_model() successfully completed......................................
2024-11-22 08:51:17,179:INFO:SubProcess create_model() end ==================================
2024-11-22 08:51:17,179:INFO:Creating metrics dataframe
2024-11-22 08:51:17,203:INFO:Initializing Random Forest Classifier
2024-11-22 08:51:17,203:INFO:Total runtime is 0.42666858037312827 minutes
2024-11-22 08:51:17,221:INFO:SubProcess create_model() called ==================================
2024-11-22 08:51:17,222:INFO:Initializing create_model()
2024-11-22 08:51:17,222:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C3CA0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000216FD5D2560>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 08:51:17,222:INFO:Checking exceptions
2024-11-22 08:51:17,222:INFO:Importing libraries
2024-11-22 08:51:17,222:INFO:Copying training dataset
2024-11-22 08:51:17,246:INFO:Defining folds
2024-11-22 08:51:17,247:INFO:Declaring metric variables
2024-11-22 08:51:17,261:INFO:Importing untrained model
2024-11-22 08:51:17,272:INFO:Random Forest Classifier Imported successfully
2024-11-22 08:51:17,287:INFO:Starting cross validation
2024-11-22 08:51:17,294:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 08:51:18,926:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:18,926:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:18,941:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:18,941:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:18,941:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:18,957:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:18,959:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:19,130:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:19,146:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:19,162:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:20,455:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:20,479:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:20,485:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:20,501:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:20,510:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:20,529:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:20,552:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:20,568:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:20,594:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:20,910:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:20,921:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:20,934:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:21,787:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:21,795:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:21,803:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:21,826:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:21,834:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:21,842:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:21,859:INFO:Calculating mean and std
2024-11-22 08:51:21,861:INFO:Creating metrics dataframe
2024-11-22 08:51:21,870:INFO:Uploading results into container
2024-11-22 08:51:21,870:INFO:Uploading model into container now
2024-11-22 08:51:21,870:INFO:_master_model_container: 7
2024-11-22 08:51:21,870:INFO:_display_container: 2
2024-11-22 08:51:21,870:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-11-22 08:51:21,870:INFO:create_model() successfully completed......................................
2024-11-22 08:51:22,057:INFO:SubProcess create_model() end ==================================
2024-11-22 08:51:22,057:INFO:Creating metrics dataframe
2024-11-22 08:51:22,091:INFO:Initializing Quadratic Discriminant Analysis
2024-11-22 08:51:22,091:INFO:Total runtime is 0.5081267317136129 minutes
2024-11-22 08:51:22,104:INFO:SubProcess create_model() called ==================================
2024-11-22 08:51:22,104:INFO:Initializing create_model()
2024-11-22 08:51:22,104:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C3CA0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000216FD5D2560>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 08:51:22,104:INFO:Checking exceptions
2024-11-22 08:51:22,104:INFO:Importing libraries
2024-11-22 08:51:22,104:INFO:Copying training dataset
2024-11-22 08:51:22,120:INFO:Defining folds
2024-11-22 08:51:22,120:INFO:Declaring metric variables
2024-11-22 08:51:22,127:INFO:Importing untrained model
2024-11-22 08:51:22,141:INFO:Quadratic Discriminant Analysis Imported successfully
2024-11-22 08:51:22,168:INFO:Starting cross validation
2024-11-22 08:51:22,175:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 08:51:22,868:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:22,868:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:22,884:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:22,884:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:22,900:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:22,900:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:22,900:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:22,900:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:22,915:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:22,931:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:22,931:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:23,547:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:23,555:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:23,555:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:23,571:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:23,571:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:23,571:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:23,579:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:23,587:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:23,587:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:23,587:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:23,611:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:23,619:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:24,123:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:24,132:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:24,132:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:24,140:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:24,174:INFO:Calculating mean and std
2024-11-22 08:51:24,174:INFO:Creating metrics dataframe
2024-11-22 08:51:24,182:INFO:Uploading results into container
2024-11-22 08:51:24,182:INFO:Uploading model into container now
2024-11-22 08:51:24,182:INFO:_master_model_container: 8
2024-11-22 08:51:24,182:INFO:_display_container: 2
2024-11-22 08:51:24,182:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-11-22 08:51:24,182:INFO:create_model() successfully completed......................................
2024-11-22 08:51:24,380:INFO:SubProcess create_model() end ==================================
2024-11-22 08:51:24,380:INFO:Creating metrics dataframe
2024-11-22 08:51:24,416:INFO:Initializing Ada Boost Classifier
2024-11-22 08:51:24,416:INFO:Total runtime is 0.5468788941701254 minutes
2024-11-22 08:51:24,430:INFO:SubProcess create_model() called ==================================
2024-11-22 08:51:24,430:INFO:Initializing create_model()
2024-11-22 08:51:24,430:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C3CA0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000216FD5D2560>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 08:51:24,430:INFO:Checking exceptions
2024-11-22 08:51:24,430:INFO:Importing libraries
2024-11-22 08:51:24,430:INFO:Copying training dataset
2024-11-22 08:51:24,459:INFO:Defining folds
2024-11-22 08:51:24,459:INFO:Declaring metric variables
2024-11-22 08:51:24,475:INFO:Importing untrained model
2024-11-22 08:51:24,486:INFO:Ada Boost Classifier Imported successfully
2024-11-22 08:51:24,503:INFO:Starting cross validation
2024-11-22 08:51:24,508:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 08:51:25,001:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-22 08:51:25,019:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-22 08:51:25,020:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-22 08:51:25,025:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-22 08:51:25,639:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:25,655:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:25,670:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:25,670:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:25,670:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:25,670:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:25,670:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:25,686:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:25,686:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:25,686:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:25,686:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:26,139:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-22 08:51:26,147:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-22 08:51:26,171:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-22 08:51:26,187:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-22 08:51:26,770:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:26,786:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:26,786:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:26,794:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:26,802:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:26,810:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:26,818:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:26,826:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:26,834:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:26,842:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:26,842:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:26,858:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:27,193:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-22 08:51:27,193:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-22 08:51:27,718:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:27,718:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:27,726:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:27,726:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:27,735:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:27,735:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:27,776:INFO:Calculating mean and std
2024-11-22 08:51:27,776:INFO:Creating metrics dataframe
2024-11-22 08:51:27,784:INFO:Uploading results into container
2024-11-22 08:51:27,784:INFO:Uploading model into container now
2024-11-22 08:51:27,784:INFO:_master_model_container: 9
2024-11-22 08:51:27,784:INFO:_display_container: 2
2024-11-22 08:51:27,784:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-11-22 08:51:27,792:INFO:create_model() successfully completed......................................
2024-11-22 08:51:27,984:INFO:SubProcess create_model() end ==================================
2024-11-22 08:51:27,984:INFO:Creating metrics dataframe
2024-11-22 08:51:28,014:INFO:Initializing Gradient Boosting Classifier
2024-11-22 08:51:28,014:INFO:Total runtime is 0.6068467179934184 minutes
2024-11-22 08:51:28,023:INFO:SubProcess create_model() called ==================================
2024-11-22 08:51:28,023:INFO:Initializing create_model()
2024-11-22 08:51:28,023:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C3CA0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000216FD5D2560>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 08:51:28,023:INFO:Checking exceptions
2024-11-22 08:51:28,023:INFO:Importing libraries
2024-11-22 08:51:28,023:INFO:Copying training dataset
2024-11-22 08:51:28,043:INFO:Defining folds
2024-11-22 08:51:28,043:INFO:Declaring metric variables
2024-11-22 08:51:28,052:INFO:Importing untrained model
2024-11-22 08:51:28,070:INFO:Gradient Boosting Classifier Imported successfully
2024-11-22 08:51:28,092:INFO:Starting cross validation
2024-11-22 08:51:28,096:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 08:51:29,376:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:29,384:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:29,392:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:29,400:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:29,408:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:29,408:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:29,408:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:29,424:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:29,424:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:29,432:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:29,440:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:29,457:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:30,636:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:30,657:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:30,665:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:30,672:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:30,673:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:30,690:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:30,690:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:30,690:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:30,707:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:30,715:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:30,724:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:30,732:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:31,610:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:31,627:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:31,635:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:31,635:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:31,652:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:31,660:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:31,685:INFO:Calculating mean and std
2024-11-22 08:51:31,685:INFO:Creating metrics dataframe
2024-11-22 08:51:31,693:INFO:Uploading results into container
2024-11-22 08:51:31,693:INFO:Uploading model into container now
2024-11-22 08:51:31,693:INFO:_master_model_container: 10
2024-11-22 08:51:31,693:INFO:_display_container: 2
2024-11-22 08:51:31,693:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-11-22 08:51:31,701:INFO:create_model() successfully completed......................................
2024-11-22 08:51:31,885:INFO:SubProcess create_model() end ==================================
2024-11-22 08:51:31,885:INFO:Creating metrics dataframe
2024-11-22 08:51:31,924:INFO:Initializing Linear Discriminant Analysis
2024-11-22 08:51:31,924:INFO:Total runtime is 0.672020717461904 minutes
2024-11-22 08:51:31,933:INFO:SubProcess create_model() called ==================================
2024-11-22 08:51:31,933:INFO:Initializing create_model()
2024-11-22 08:51:31,933:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C3CA0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000216FD5D2560>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 08:51:31,933:INFO:Checking exceptions
2024-11-22 08:51:31,933:INFO:Importing libraries
2024-11-22 08:51:31,933:INFO:Copying training dataset
2024-11-22 08:51:31,942:INFO:Defining folds
2024-11-22 08:51:31,942:INFO:Declaring metric variables
2024-11-22 08:51:31,954:INFO:Importing untrained model
2024-11-22 08:51:31,967:INFO:Linear Discriminant Analysis Imported successfully
2024-11-22 08:51:31,985:INFO:Starting cross validation
2024-11-22 08:51:32,003:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 08:51:32,671:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:32,687:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:32,687:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:32,703:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:32,703:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:32,719:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:32,719:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:32,726:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:32,736:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:32,752:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:32,736:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:32,780:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:33,340:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:33,347:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:33,363:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:33,363:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:33,379:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:33,387:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:33,413:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:33,413:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:33,421:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:33,429:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:33,437:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:33,445:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:33,926:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:33,926:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:33,934:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:33,942:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:33,951:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:33,951:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:33,992:INFO:Calculating mean and std
2024-11-22 08:51:33,992:INFO:Creating metrics dataframe
2024-11-22 08:51:34,001:INFO:Uploading results into container
2024-11-22 08:51:34,001:INFO:Uploading model into container now
2024-11-22 08:51:34,001:INFO:_master_model_container: 11
2024-11-22 08:51:34,001:INFO:_display_container: 2
2024-11-22 08:51:34,009:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-11-22 08:51:34,010:INFO:create_model() successfully completed......................................
2024-11-22 08:51:34,192:INFO:SubProcess create_model() end ==================================
2024-11-22 08:51:34,192:INFO:Creating metrics dataframe
2024-11-22 08:51:34,225:INFO:Initializing Extra Trees Classifier
2024-11-22 08:51:34,225:INFO:Total runtime is 0.7103732307751974 minutes
2024-11-22 08:51:34,239:INFO:SubProcess create_model() called ==================================
2024-11-22 08:51:34,240:INFO:Initializing create_model()
2024-11-22 08:51:34,240:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C3CA0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000216FD5D2560>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 08:51:34,240:INFO:Checking exceptions
2024-11-22 08:51:34,240:INFO:Importing libraries
2024-11-22 08:51:34,240:INFO:Copying training dataset
2024-11-22 08:51:34,307:INFO:Defining folds
2024-11-22 08:51:34,307:INFO:Declaring metric variables
2024-11-22 08:51:34,324:INFO:Importing untrained model
2024-11-22 08:51:34,333:INFO:Extra Trees Classifier Imported successfully
2024-11-22 08:51:34,402:INFO:Starting cross validation
2024-11-22 08:51:34,406:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 08:51:35,853:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:35,877:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:35,890:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:35,898:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:35,904:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:35,904:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:35,921:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:35,921:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:35,937:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:36,055:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:36,071:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:36,089:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:37,302:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:37,309:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:37,311:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:37,323:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:37,324:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:37,324:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:37,499:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:37,515:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:37,530:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:37,672:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:37,689:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:37,698:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:38,539:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:38,548:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:38,556:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:38,580:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:38,581:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:38,591:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:38,623:INFO:Calculating mean and std
2024-11-22 08:51:38,623:INFO:Creating metrics dataframe
2024-11-22 08:51:38,633:INFO:Uploading results into container
2024-11-22 08:51:38,633:INFO:Uploading model into container now
2024-11-22 08:51:38,633:INFO:_master_model_container: 12
2024-11-22 08:51:38,633:INFO:_display_container: 2
2024-11-22 08:51:38,641:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-11-22 08:51:38,641:INFO:create_model() successfully completed......................................
2024-11-22 08:51:38,825:INFO:SubProcess create_model() end ==================================
2024-11-22 08:51:38,825:INFO:Creating metrics dataframe
2024-11-22 08:51:38,860:INFO:Initializing Light Gradient Boosting Machine
2024-11-22 08:51:38,861:INFO:Total runtime is 0.7876354177792868 minutes
2024-11-22 08:51:38,874:INFO:SubProcess create_model() called ==================================
2024-11-22 08:51:38,874:INFO:Initializing create_model()
2024-11-22 08:51:38,874:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C3CA0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000216FD5D2560>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 08:51:38,878:INFO:Checking exceptions
2024-11-22 08:51:38,878:INFO:Importing libraries
2024-11-22 08:51:38,878:INFO:Copying training dataset
2024-11-22 08:51:38,901:INFO:Defining folds
2024-11-22 08:51:38,902:INFO:Declaring metric variables
2024-11-22 08:51:38,915:INFO:Importing untrained model
2024-11-22 08:51:38,927:INFO:Light Gradient Boosting Machine Imported successfully
2024-11-22 08:51:38,950:INFO:Starting cross validation
2024-11-22 08:51:38,968:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 08:51:40,275:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:40,299:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:40,309:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:40,317:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:40,333:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:40,349:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:40,381:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:40,397:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:40,413:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:40,510:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:40,526:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:40,534:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:41,599:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:41,615:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:41,631:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:41,719:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:41,728:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:41,752:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:41,768:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:41,776:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:41,796:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:41,942:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:41,956:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:41,973:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:42,630:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:42,646:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:42,662:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:42,767:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:42,791:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:42,808:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:42,845:INFO:Calculating mean and std
2024-11-22 08:51:42,847:INFO:Creating metrics dataframe
2024-11-22 08:51:42,865:INFO:Uploading results into container
2024-11-22 08:51:42,867:INFO:Uploading model into container now
2024-11-22 08:51:42,867:INFO:_master_model_container: 13
2024-11-22 08:51:42,867:INFO:_display_container: 2
2024-11-22 08:51:42,868:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-11-22 08:51:42,868:INFO:create_model() successfully completed......................................
2024-11-22 08:51:43,054:INFO:SubProcess create_model() end ==================================
2024-11-22 08:51:43,054:INFO:Creating metrics dataframe
2024-11-22 08:51:43,094:INFO:Initializing Dummy Classifier
2024-11-22 08:51:43,094:INFO:Total runtime is 0.8581770340601604 minutes
2024-11-22 08:51:43,105:INFO:SubProcess create_model() called ==================================
2024-11-22 08:51:43,105:INFO:Initializing create_model()
2024-11-22 08:51:43,105:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C3CA0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000216FD5D2560>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 08:51:43,105:INFO:Checking exceptions
2024-11-22 08:51:43,105:INFO:Importing libraries
2024-11-22 08:51:43,105:INFO:Copying training dataset
2024-11-22 08:51:43,111:INFO:Defining folds
2024-11-22 08:51:43,111:INFO:Declaring metric variables
2024-11-22 08:51:43,124:INFO:Importing untrained model
2024-11-22 08:51:43,135:INFO:Dummy Classifier Imported successfully
2024-11-22 08:51:43,159:INFO:Starting cross validation
2024-11-22 08:51:43,168:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 08:51:43,837:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:43,837:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:43,845:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:43,845:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:43,853:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-22 08:51:43,853:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-22 08:51:43,853:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:43,861:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:43,861:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:43,861:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:43,869:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:43,877:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:43,877:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-22 08:51:43,877:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-22 08:51:43,885:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:43,885:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:44,481:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:44,498:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:44,499:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:44,499:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-22 08:51:44,507:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:44,507:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:44,515:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:44,523:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

f"{metric.capitalize()} is", len(result))

2024-11-22 08:51:44,523:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-22 08:51:44,531:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:44,531:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:44,531:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:44,556:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:44,564:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-22 08:51:44,572:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:45,054:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:45,066:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:45,072:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-22 08:51:45,082:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:45,083:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:45,106:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:45,120:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-22 08:51:45,128:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:45,158:INFO:Calculating mean and std
2024-11-22 08:51:45,158:INFO:Creating metrics dataframe
2024-11-22 08:51:45,167:INFO:Uploading results into container
2024-11-22 08:51:45,167:INFO:Uploading model into container now
2024-11-22 08:51:45,167:INFO:_master_model_container: 14
2024-11-22 08:51:45,167:INFO:_display_container: 2
2024-11-22 08:51:45,167:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-11-22 08:51:45,175:INFO:create_model() successfully completed......................................
2024-11-22 08:51:45,360:INFO:SubProcess create_model() end ==================================
2024-11-22 08:51:45,360:INFO:Creating metrics dataframe
2024-11-22 08:51:45,421:INFO:Initializing create_model()
2024-11-22 08:51:45,421:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C3CA0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 08:51:45,422:INFO:Checking exceptions
2024-11-22 08:51:45,422:INFO:Importing libraries
2024-11-22 08:51:45,422:INFO:Copying training dataset
2024-11-22 08:51:45,445:INFO:Defining folds
2024-11-22 08:51:45,445:INFO:Declaring metric variables
2024-11-22 08:51:45,446:INFO:Importing untrained model
2024-11-22 08:51:45,446:INFO:Declaring custom model
2024-11-22 08:51:45,446:INFO:Logistic Regression Imported successfully
2024-11-22 08:51:45,450:INFO:Cross validation set to False
2024-11-22 08:51:45,450:INFO:Fitting Model
2024-11-22 08:51:45,772:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-22 08:51:45,772:INFO:create_model() successfully completed......................................
2024-11-22 08:51:46,069:INFO:_master_model_container: 14
2024-11-22 08:51:46,069:INFO:_display_container: 2
2024-11-22 08:51:46,073:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-22 08:51:46,073:INFO:compare_models() successfully completed......................................
2024-11-22 08:51:46,074:INFO:Initializing create_model()
2024-11-22 08:51:46,074:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C3CA0>, estimator=dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 08:51:46,074:INFO:Checking exceptions
2024-11-22 08:51:46,162:INFO:Importing libraries
2024-11-22 08:51:46,162:INFO:Copying training dataset
2024-11-22 08:51:46,189:INFO:Defining folds
2024-11-22 08:51:46,189:INFO:Declaring metric variables
2024-11-22 08:51:46,202:INFO:Importing untrained model
2024-11-22 08:51:46,214:INFO:Decision Tree Classifier Imported successfully
2024-11-22 08:51:46,242:INFO:Starting cross validation
2024-11-22 08:51:46,251:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 08:51:46,971:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:46,979:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:46,987:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:46,995:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:46,995:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:46,995:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:47,011:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:47,011:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:47,027:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:47,036:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:47,044:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:47,052:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:47,648:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:47,664:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:47,679:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:47,679:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:47,689:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:47,689:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:47,698:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:47,706:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:47,714:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:47,722:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:47,731:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:48,241:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:48,241:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:48,250:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:48,258:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:48,267:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:48,275:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:51:48,300:INFO:Calculating mean and std
2024-11-22 08:51:48,300:INFO:Creating metrics dataframe
2024-11-22 08:51:48,318:INFO:Finalizing model
2024-11-22 08:51:48,600:INFO:Uploading results into container
2024-11-22 08:51:48,605:INFO:Uploading model into container now
2024-11-22 08:51:48,634:INFO:_master_model_container: 15
2024-11-22 08:51:48,634:INFO:_display_container: 3
2024-11-22 08:51:48,642:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-11-22 08:51:48,642:INFO:create_model() successfully completed......................................
2024-11-22 08:51:48,835:INFO:Initializing tune_model()
2024-11-22 08:51:48,835:INFO:tune_model(estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best'), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C3CA0>)
2024-11-22 08:51:48,835:INFO:Checking exceptions
2024-11-22 08:51:48,897:INFO:Copying training dataset
2024-11-22 08:51:48,917:INFO:Checking base model
2024-11-22 08:51:48,917:INFO:Base model : Decision Tree Classifier
2024-11-22 08:51:48,941:INFO:Declaring metric variables
2024-11-22 08:51:48,953:INFO:Defining Hyperparameters
2024-11-22 08:51:49,154:INFO:Tuning with n_jobs=-1
2024-11-22 08:51:49,154:INFO:Initializing RandomizedSearchCV
2024-11-22 08:52:05,269:INFO:best_params: {'actual_estimator__min_samples_split': 5, 'actual_estimator__min_samples_leaf': 5, 'actual_estimator__min_impurity_decrease': 0.0002, 'actual_estimator__max_features': 'log2', 'actual_estimator__max_depth': 4, 'actual_estimator__criterion': 'entropy'}
2024-11-22 08:52:05,269:INFO:Hyperparameter search completed
2024-11-22 08:52:05,269:INFO:SubProcess create_model() called ==================================
2024-11-22 08:52:05,273:INFO:Initializing create_model()
2024-11-22 08:52:05,273:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C3CA0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002165E0C5DE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'min_samples_split': 5, 'min_samples_leaf': 5, 'min_impurity_decrease': 0.0002, 'max_features': 'log2', 'max_depth': 4, 'criterion': 'entropy'})
2024-11-22 08:52:05,273:INFO:Checking exceptions
2024-11-22 08:52:05,273:INFO:Importing libraries
2024-11-22 08:52:05,273:INFO:Copying training dataset
2024-11-22 08:52:05,298:INFO:Defining folds
2024-11-22 08:52:05,298:INFO:Declaring metric variables
2024-11-22 08:52:05,309:INFO:Importing untrained model
2024-11-22 08:52:05,310:INFO:Declaring custom model
2024-11-22 08:52:05,323:INFO:Decision Tree Classifier Imported successfully
2024-11-22 08:52:05,338:INFO:Starting cross validation
2024-11-22 08:52:05,346:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 08:52:06,019:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:06,035:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:06,043:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:06,043:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:06,051:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:06,059:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:06,067:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:06,067:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:06,083:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:06,083:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:06,099:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:06,107:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:06,728:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:06,744:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:06,759:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:06,769:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:06,769:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:06,777:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:06,777:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:06,785:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:06,793:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:06,793:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:06,801:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:06,817:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:07,291:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:07,302:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:07,309:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:07,319:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:07,329:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:07,337:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:07,370:INFO:Calculating mean and std
2024-11-22 08:52:07,370:INFO:Creating metrics dataframe
2024-11-22 08:52:07,387:INFO:Finalizing model
2024-11-22 08:52:07,822:INFO:Uploading results into container
2024-11-22 08:52:07,827:INFO:Uploading model into container now
2024-11-22 08:52:07,831:INFO:_master_model_container: 16
2024-11-22 08:52:07,831:INFO:_display_container: 4
2024-11-22 08:52:07,833:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       min_impurity_decrease=0.0002, min_samples_leaf=5,
                       min_samples_split=5, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-11-22 08:52:07,833:INFO:create_model() successfully completed......................................
2024-11-22 08:52:08,028:INFO:SubProcess create_model() end ==================================
2024-11-22 08:52:08,028:INFO:choose_better activated
2024-11-22 08:52:08,036:INFO:SubProcess create_model() called ==================================
2024-11-22 08:52:08,045:INFO:Initializing create_model()
2024-11-22 08:52:08,045:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C3CA0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 08:52:08,045:INFO:Checking exceptions
2024-11-22 08:52:08,049:INFO:Importing libraries
2024-11-22 08:52:08,050:INFO:Copying training dataset
2024-11-22 08:52:08,067:INFO:Defining folds
2024-11-22 08:52:08,067:INFO:Declaring metric variables
2024-11-22 08:52:08,068:INFO:Importing untrained model
2024-11-22 08:52:08,069:INFO:Declaring custom model
2024-11-22 08:52:08,070:INFO:Decision Tree Classifier Imported successfully
2024-11-22 08:52:08,071:INFO:Starting cross validation
2024-11-22 08:52:08,071:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 08:52:08,739:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:08,755:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:08,771:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:08,779:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:08,779:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:08,795:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:08,795:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:08,811:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:08,811:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:08,826:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:08,826:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:08,841:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:09,404:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:09,412:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:09,435:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:09,462:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:09,477:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:09,477:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:09,493:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:09,493:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:09,493:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:09,510:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:09,511:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:09,526:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:09,971:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:09,979:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:09,997:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:10,022:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:10,031:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:10,039:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 08:52:10,063:INFO:Calculating mean and std
2024-11-22 08:52:10,063:INFO:Creating metrics dataframe
2024-11-22 08:52:10,063:INFO:Finalizing model
2024-11-22 08:52:10,320:INFO:Uploading results into container
2024-11-22 08:52:10,329:INFO:Uploading model into container now
2024-11-22 08:52:10,330:INFO:_master_model_container: 17
2024-11-22 08:52:10,330:INFO:_display_container: 5
2024-11-22 08:52:10,330:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-11-22 08:52:10,330:INFO:create_model() successfully completed......................................
2024-11-22 08:52:10,517:INFO:SubProcess create_model() end ==================================
2024-11-22 08:52:10,517:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best') result for Accuracy is 0.8871
2024-11-22 08:52:10,518:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       min_impurity_decrease=0.0002, min_samples_leaf=5,
                       min_samples_split=5, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best') result for Accuracy is 0.9143
2024-11-22 08:52:10,518:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       min_impurity_decrease=0.0002, min_samples_leaf=5,
                       min_samples_split=5, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best') is best model
2024-11-22 08:52:10,518:INFO:choose_better completed
2024-11-22 08:52:10,540:INFO:_master_model_container: 17
2024-11-22 08:52:10,540:INFO:_display_container: 4
2024-11-22 08:52:10,547:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       min_impurity_decrease=0.0002, min_samples_leaf=5,
                       min_samples_split=5, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-11-22 08:52:10,548:INFO:tune_model() successfully completed......................................
2024-11-22 08:52:10,758:INFO:Initializing evaluate_model()
2024-11-22 08:52:10,758:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C3CA0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       min_impurity_decrease=0.0002, min_samples_leaf=5,
                       min_samples_split=5, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best'), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-11-22 08:52:10,813:INFO:Initializing plot_model()
2024-11-22 08:52:10,815:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       min_impurity_decrease=0.0002, min_samples_leaf=5,
                       min_samples_split=5, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best'), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C3CA0>, system=True)
2024-11-22 08:52:10,816:INFO:Checking exceptions
2024-11-22 08:52:10,822:INFO:Preloading libraries
2024-11-22 08:52:10,823:INFO:Copying training dataset
2024-11-22 08:52:10,824:INFO:Plot type: pipeline
2024-11-22 08:52:11,246:INFO:Visual Rendered Successfully
2024-11-22 08:52:11,439:INFO:plot_model() successfully completed......................................
2024-11-22 08:52:11,446:INFO:Initializing finalize_model()
2024-11-22 08:52:11,446:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C3CA0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       min_impurity_decrease=0.0002, min_samples_leaf=5,
                       min_samples_split=5, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best'), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-11-22 08:52:11,446:INFO:Finalizing DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       min_impurity_decrease=0.0002, min_samples_leaf=5,
                       min_samples_split=5, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-11-22 08:52:11,460:INFO:Initializing create_model()
2024-11-22 08:52:11,462:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C3CA0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       min_impurity_decrease=0.0002, min_samples_leaf=5,
                       min_samples_split=5, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best'), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 08:52:11,462:INFO:Checking exceptions
2024-11-22 08:52:11,469:INFO:Importing libraries
2024-11-22 08:52:11,469:INFO:Copying training dataset
2024-11-22 08:52:11,470:INFO:Defining folds
2024-11-22 08:52:11,471:INFO:Declaring metric variables
2024-11-22 08:52:11,472:INFO:Importing untrained model
2024-11-22 08:52:11,472:INFO:Declaring custom model
2024-11-22 08:52:11,475:INFO:Decision Tree Classifier Imported successfully
2024-11-22 08:52:11,476:INFO:Cross validation set to False
2024-11-22 08:52:11,476:INFO:Fitting Model
2024-11-22 08:52:12,125:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['Age'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean')...
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        max_leaf_nodes=None,
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=5,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, random_state=123,
                                        splitter='best'))],
         verbose=False)
2024-11-22 08:52:12,125:INFO:create_model() successfully completed......................................
2024-11-22 08:52:12,320:INFO:_master_model_container: 17
2024-11-22 08:52:12,320:INFO:_display_container: 4
2024-11-22 08:52:12,685:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['Age'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean')...
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        max_leaf_nodes=None,
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=5,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, random_state=123,
                                        splitter='best'))],
         verbose=False)
2024-11-22 08:52:12,685:INFO:finalize_model() successfully completed......................................
2024-11-22 08:52:13,543:INFO:Initializing save_model()
2024-11-22 08:52:13,543:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['Age'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean')...
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        max_leaf_nodes=None,
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=5,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, random_state=123,
                                        splitter='best'))],
         verbose=False), model_name=dt_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\teklu\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['Age'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                                        {'col': 'Hemoptysis',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64},
                                                                        {'col': 'Breathing',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64},
                                                                        {'col': 'Arthritis',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64},
                                                                        {'col': 'Vomiting',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-11-22 08:52:13,543:INFO:Adding model into prep_pipe
2024-11-22 08:52:13,543:WARNING:Only Model saved as it was a pipeline.
2024-11-22 08:52:13,568:INFO:dt_model.pkl saved in current working directory
2024-11-22 08:52:13,900:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['Age'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean')...
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='entropy', max_depth=4,
                                        max_features='log2',
                                        max_leaf_nodes=None,
                                        min_impurity_decrease=0.0002,
                                        min_samples_leaf=5, min_samples_split=5,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, random_state=123,
                                        splitter='best'))],
         verbose=False)
2024-11-22 08:52:13,900:INFO:save_model() successfully completed......................................
2024-11-22 09:02:21,854:INFO:PyCaret ClassificationExperiment
2024-11-22 09:02:21,854:INFO:Logging name: clf-default-name
2024-11-22 09:02:21,854:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-11-22 09:02:21,854:INFO:version 3.3.2
2024-11-22 09:02:21,854:INFO:Initializing setup()
2024-11-22 09:02:21,854:INFO:self.USI: 2550
2024-11-22 09:02:21,854:INFO:self._variable_keys: {'exp_id', 'log_plots_param', 'gpu_param', 'y', 'X_test', 'target_param', 'data', 'y_train', 'idx', 'USI', 'memory', 'y_test', 'X_train', 'gpu_n_jobs_param', 'n_jobs_param', 'X', 'logging_param', 'html_param', 'fold_generator', 'fold_groups_param', 'is_multiclass', '_ml_usecase', '_available_plots', 'fix_imbalance', 'exp_name_log', 'fold_shuffle_param', 'pipeline', 'seed'}
2024-11-22 09:02:21,854:INFO:Checking environment
2024-11-22 09:02:21,854:INFO:python_version: 3.10.9
2024-11-22 09:02:21,854:INFO:python_build: ('main', 'Mar  1 2023 18:18:15')
2024-11-22 09:02:21,854:INFO:machine: AMD64
2024-11-22 09:02:21,854:INFO:platform: Windows-10-10.0.19045-SP0
2024-11-22 09:02:21,854:INFO:Memory: svmem(total=17044500480, available=8384630784, percent=50.8, used=8659869696, free=8384630784)
2024-11-22 09:02:21,854:INFO:Physical Core: 2
2024-11-22 09:02:21,854:INFO:Logical Core: 4
2024-11-22 09:02:21,854:INFO:Checking libraries
2024-11-22 09:02:21,860:INFO:System:
2024-11-22 09:02:21,862:INFO:    python: 3.10.9 | packaged by Anaconda, Inc. | (main, Mar  1 2023, 18:18:15) [MSC v.1916 64 bit (AMD64)]
2024-11-22 09:02:21,862:INFO:executable: C:\Users\teklu\anaconda3\python.exe
2024-11-22 09:02:21,862:INFO:   machine: Windows-10-10.0.19045-SP0
2024-11-22 09:02:21,863:INFO:PyCaret required dependencies:
2024-11-22 09:02:21,863:INFO:                 pip: 22.3.1
2024-11-22 09:02:21,864:INFO:          setuptools: 65.6.3
2024-11-22 09:02:21,864:INFO:             pycaret: 3.3.2
2024-11-22 09:02:21,864:INFO:             IPython: 8.10.0
2024-11-22 09:02:21,864:INFO:          ipywidgets: 7.6.5
2024-11-22 09:02:21,864:INFO:                tqdm: 4.64.1
2024-11-22 09:02:21,864:INFO:               numpy: 1.23.5
2024-11-22 09:02:21,864:INFO:              pandas: 1.5.3
2024-11-22 09:02:21,864:INFO:              jinja2: 3.1.2
2024-11-22 09:02:21,865:INFO:               scipy: 1.10.0
2024-11-22 09:02:21,865:INFO:              joblib: 1.3.2
2024-11-22 09:02:21,865:INFO:             sklearn: 1.4.2
2024-11-22 09:02:21,865:INFO:                pyod: 2.0.2
2024-11-22 09:02:21,866:INFO:            imblearn: 0.12.4
2024-11-22 09:02:21,866:INFO:   category_encoders: 2.6.4
2024-11-22 09:02:21,866:INFO:            lightgbm: 4.5.0
2024-11-22 09:02:21,866:INFO:               numba: 0.56.4
2024-11-22 09:02:21,867:INFO:            requests: 2.28.1
2024-11-22 09:02:21,867:INFO:          matplotlib: 3.7.0
2024-11-22 09:02:21,868:INFO:          scikitplot: 0.3.7
2024-11-22 09:02:21,868:INFO:         yellowbrick: 1.5
2024-11-22 09:02:21,868:INFO:              plotly: 5.24.1
2024-11-22 09:02:21,868:INFO:    plotly-resampler: Not installed
2024-11-22 09:02:21,868:INFO:             kaleido: 0.2.1
2024-11-22 09:02:21,868:INFO:           schemdraw: 0.15
2024-11-22 09:02:21,868:INFO:         statsmodels: 0.13.5
2024-11-22 09:02:21,869:INFO:              sktime: 0.26.0
2024-11-22 09:02:21,869:INFO:               tbats: 1.1.3
2024-11-22 09:02:21,869:INFO:            pmdarima: 2.0.4
2024-11-22 09:02:21,869:INFO:              psutil: 5.9.0
2024-11-22 09:02:21,869:INFO:          markupsafe: 2.1.1
2024-11-22 09:02:21,869:INFO:             pickle5: Not installed
2024-11-22 09:02:21,869:INFO:         cloudpickle: 2.0.0
2024-11-22 09:02:21,869:INFO:         deprecation: 2.1.0
2024-11-22 09:02:21,869:INFO:              xxhash: 3.5.0
2024-11-22 09:02:21,869:INFO:           wurlitzer: Not installed
2024-11-22 09:02:21,869:INFO:PyCaret optional dependencies:
2024-11-22 09:02:21,869:INFO:                shap: Not installed
2024-11-22 09:02:21,869:INFO:           interpret: Not installed
2024-11-22 09:02:21,870:INFO:                umap: Not installed
2024-11-22 09:02:21,870:INFO:     ydata_profiling: Not installed
2024-11-22 09:02:21,870:INFO:  explainerdashboard: Not installed
2024-11-22 09:02:21,870:INFO:             autoviz: Not installed
2024-11-22 09:02:21,870:INFO:           fairlearn: Not installed
2024-11-22 09:02:21,870:INFO:          deepchecks: Not installed
2024-11-22 09:02:21,870:INFO:             xgboost: Not installed
2024-11-22 09:02:21,870:INFO:            catboost: Not installed
2024-11-22 09:02:21,871:INFO:              kmodes: Not installed
2024-11-22 09:02:21,871:INFO:             mlxtend: Not installed
2024-11-22 09:02:21,871:INFO:       statsforecast: Not installed
2024-11-22 09:02:21,871:INFO:        tune_sklearn: Not installed
2024-11-22 09:02:21,871:INFO:                 ray: Not installed
2024-11-22 09:02:21,871:INFO:            hyperopt: Not installed
2024-11-22 09:02:21,871:INFO:              optuna: Not installed
2024-11-22 09:02:21,871:INFO:               skopt: Not installed
2024-11-22 09:02:21,872:INFO:              mlflow: Not installed
2024-11-22 09:02:21,872:INFO:              gradio: Not installed
2024-11-22 09:02:21,872:INFO:             fastapi: Not installed
2024-11-22 09:02:21,872:INFO:             uvicorn: Not installed
2024-11-22 09:02:21,872:INFO:              m2cgen: Not installed
2024-11-22 09:02:21,872:INFO:           evidently: Not installed
2024-11-22 09:02:21,872:INFO:               fugue: Not installed
2024-11-22 09:02:21,872:INFO:           streamlit: Not installed
2024-11-22 09:02:21,872:INFO:             prophet: Not installed
2024-11-22 09:02:21,872:INFO:None
2024-11-22 09:02:21,872:INFO:Set up data.
2024-11-22 09:02:21,899:INFO:Set up folding strategy.
2024-11-22 09:02:21,899:INFO:Set up train/test split.
2024-11-22 09:02:21,928:INFO:Set up index.
2024-11-22 09:02:21,929:INFO:Assigning column types.
2024-11-22 09:02:21,941:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-11-22 09:02:22,070:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-22 09:02:22,070:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-22 09:02:22,174:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 09:02:22,177:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 09:02:22,347:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-22 09:02:22,350:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-22 09:02:22,450:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 09:02:22,451:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 09:02:22,453:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-11-22 09:02:22,598:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-22 09:02:22,674:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 09:02:22,682:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 09:02:22,821:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-22 09:02:22,932:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 09:02:22,932:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 09:02:22,932:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-11-22 09:02:23,257:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 09:02:23,259:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 09:02:23,520:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 09:02:23,520:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 09:02:23,530:INFO:Preparing preprocessing pipeline...
2024-11-22 09:02:23,530:INFO:Set up label encoding.
2024-11-22 09:02:23,530:INFO:Set up simple imputation.
2024-11-22 09:02:23,546:INFO:Set up encoding of ordinal features.
2024-11-22 09:02:23,579:INFO:Set up encoding of categorical features.
2024-11-22 09:02:23,853:INFO:Finished creating preprocessing pipeline.
2024-11-22 09:02:24,254:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\teklu\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['Age'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                                        {'col': 'Hemoptysis',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64},
                                                                        {'col': 'Breathing',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64},
                                                                        {'col': 'Arthritis',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64},
                                                                        {'col': 'Vomiting',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False)
2024-11-22 09:02:24,254:INFO:Creating final display dataframe.
2024-11-22 09:02:24,540:INFO:Setup _display_container:                     Description                     Value
0                    Session id                       123
1                        Target           Covid_19_result
2                   Target type                    Binary
3                Target mapping  Negative: 0, Positive: 1
4           Original data shape                (2001, 13)
5        Transformed data shape                (2001, 13)
6   Transformed train set shape                (1400, 13)
7    Transformed test set shape                 (601, 13)
8              Numeric features                         1
9          Categorical features                        11
10                   Preprocess                      True
11              Imputation type                    simple
12           Numeric imputation                      mean
13       Categorical imputation                      mode
14     Maximum one-hot encoding                        25
15              Encoding method                      None
16               Fold Generator           StratifiedKFold
17                  Fold Number                        10
18                     CPU Jobs                        -1
19                      Use GPU                     False
20               Log Experiment                     False
21              Experiment Name          clf-default-name
22                          USI                      2550
2024-11-22 09:02:24,797:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 09:02:24,797:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 09:02:25,009:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 09:02:25,009:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 09:02:25,017:INFO:setup() successfully completed in 3.18s...............
2024-11-22 09:02:25,018:INFO:Initializing compare_models()
2024-11-22 09:02:25,018:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165E9EFF10>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002165E9EFF10>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-11-22 09:02:25,018:INFO:Checking exceptions
2024-11-22 09:02:25,026:INFO:Preparing display monitor
2024-11-22 09:02:25,143:INFO:Initializing Logistic Regression
2024-11-22 09:02:25,144:INFO:Total runtime is 1.659393310546875e-05 minutes
2024-11-22 09:02:25,154:INFO:SubProcess create_model() called ==================================
2024-11-22 09:02:25,154:INFO:Initializing create_model()
2024-11-22 09:02:25,154:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165E9EFF10>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000216FD530D60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 09:02:25,156:INFO:Checking exceptions
2024-11-22 09:02:25,157:INFO:Importing libraries
2024-11-22 09:02:25,157:INFO:Copying training dataset
2024-11-22 09:02:25,173:INFO:Defining folds
2024-11-22 09:02:25,173:INFO:Declaring metric variables
2024-11-22 09:02:25,185:INFO:Importing untrained model
2024-11-22 09:02:25,202:INFO:Logistic Regression Imported successfully
2024-11-22 09:02:25,245:INFO:Starting cross validation
2024-11-22 09:02:25,261:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 09:02:36,377:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:36,389:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:36,402:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:36,402:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:36,423:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:36,424:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:36,451:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:36,467:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:36,690:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:36,704:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:36,719:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:37,265:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:37,265:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:37,274:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:37,274:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:37,274:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:37,291:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:37,291:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:37,291:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:37,291:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:37,549:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:37,563:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:37,573:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:37,891:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:37,910:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:37,912:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:37,928:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:37,929:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:37,945:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:37,969:INFO:Calculating mean and std
2024-11-22 09:02:37,969:INFO:Creating metrics dataframe
2024-11-22 09:02:37,977:INFO:Uploading results into container
2024-11-22 09:02:37,977:INFO:Uploading model into container now
2024-11-22 09:02:37,977:INFO:_master_model_container: 1
2024-11-22 09:02:37,977:INFO:_display_container: 2
2024-11-22 09:02:37,977:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-22 09:02:37,977:INFO:create_model() successfully completed......................................
2024-11-22 09:02:38,195:INFO:SubProcess create_model() end ==================================
2024-11-22 09:02:38,195:INFO:Creating metrics dataframe
2024-11-22 09:02:38,221:INFO:Initializing K Neighbors Classifier
2024-11-22 09:02:38,221:INFO:Total runtime is 0.21796598434448242 minutes
2024-11-22 09:02:38,232:INFO:SubProcess create_model() called ==================================
2024-11-22 09:02:38,232:INFO:Initializing create_model()
2024-11-22 09:02:38,232:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165E9EFF10>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000216FD530D60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 09:02:38,232:INFO:Checking exceptions
2024-11-22 09:02:38,232:INFO:Importing libraries
2024-11-22 09:02:38,232:INFO:Copying training dataset
2024-11-22 09:02:38,257:INFO:Defining folds
2024-11-22 09:02:38,257:INFO:Declaring metric variables
2024-11-22 09:02:38,277:INFO:Importing untrained model
2024-11-22 09:02:38,304:INFO:K Neighbors Classifier Imported successfully
2024-11-22 09:02:38,383:INFO:Starting cross validation
2024-11-22 09:02:38,389:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 09:02:39,116:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:39,132:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:39,132:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:39,132:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:39,140:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:39,140:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:39,148:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:39,156:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:39,156:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:39,164:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:39,172:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:39,188:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:39,864:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:39,876:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:39,876:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:39,884:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:39,898:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:39,906:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:39,915:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:39,924:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:39,924:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:39,932:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:39,940:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:39,949:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:40,401:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:40,407:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:40,419:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:40,419:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:40,427:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:40,436:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:40,469:INFO:Calculating mean and std
2024-11-22 09:02:40,469:INFO:Creating metrics dataframe
2024-11-22 09:02:40,477:INFO:Uploading results into container
2024-11-22 09:02:40,477:INFO:Uploading model into container now
2024-11-22 09:02:40,477:INFO:_master_model_container: 2
2024-11-22 09:02:40,477:INFO:_display_container: 2
2024-11-22 09:02:40,477:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-11-22 09:02:40,477:INFO:create_model() successfully completed......................................
2024-11-22 09:02:40,673:INFO:SubProcess create_model() end ==================================
2024-11-22 09:02:40,673:INFO:Creating metrics dataframe
2024-11-22 09:02:40,698:INFO:Initializing Naive Bayes
2024-11-22 09:02:40,698:INFO:Total runtime is 0.25924099286397295 minutes
2024-11-22 09:02:40,716:INFO:SubProcess create_model() called ==================================
2024-11-22 09:02:40,716:INFO:Initializing create_model()
2024-11-22 09:02:40,716:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165E9EFF10>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000216FD530D60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 09:02:40,716:INFO:Checking exceptions
2024-11-22 09:02:40,716:INFO:Importing libraries
2024-11-22 09:02:40,716:INFO:Copying training dataset
2024-11-22 09:02:40,742:INFO:Defining folds
2024-11-22 09:02:40,744:INFO:Declaring metric variables
2024-11-22 09:02:40,747:INFO:Importing untrained model
2024-11-22 09:02:40,770:INFO:Naive Bayes Imported successfully
2024-11-22 09:02:40,801:INFO:Starting cross validation
2024-11-22 09:02:40,810:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 09:02:41,484:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:41,492:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:41,508:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:41,516:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:41,524:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:41,524:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:41,532:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:41,540:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:41,548:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:41,548:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:41,564:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:41,570:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:42,140:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:42,156:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:42,172:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:42,180:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:42,188:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:42,196:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:42,196:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:42,204:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:42,212:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:42,220:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:42,236:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:42,252:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:42,690:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:42,698:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:42,706:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:42,707:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:42,707:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:42,715:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:42,740:INFO:Calculating mean and std
2024-11-22 09:02:42,740:INFO:Creating metrics dataframe
2024-11-22 09:02:42,748:INFO:Uploading results into container
2024-11-22 09:02:42,748:INFO:Uploading model into container now
2024-11-22 09:02:42,748:INFO:_master_model_container: 3
2024-11-22 09:02:42,748:INFO:_display_container: 2
2024-11-22 09:02:42,748:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-11-22 09:02:42,757:INFO:create_model() successfully completed......................................
2024-11-22 09:02:42,949:INFO:SubProcess create_model() end ==================================
2024-11-22 09:02:42,949:INFO:Creating metrics dataframe
2024-11-22 09:02:42,979:INFO:Initializing Decision Tree Classifier
2024-11-22 09:02:42,979:INFO:Total runtime is 0.2972609281539917 minutes
2024-11-22 09:02:42,995:INFO:SubProcess create_model() called ==================================
2024-11-22 09:02:42,995:INFO:Initializing create_model()
2024-11-22 09:02:42,995:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165E9EFF10>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000216FD530D60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 09:02:42,999:INFO:Checking exceptions
2024-11-22 09:02:42,999:INFO:Importing libraries
2024-11-22 09:02:43,000:INFO:Copying training dataset
2024-11-22 09:02:43,023:INFO:Defining folds
2024-11-22 09:02:43,023:INFO:Declaring metric variables
2024-11-22 09:02:43,038:INFO:Importing untrained model
2024-11-22 09:02:43,053:INFO:Decision Tree Classifier Imported successfully
2024-11-22 09:02:43,071:INFO:Starting cross validation
2024-11-22 09:02:43,085:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 09:02:43,782:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:43,783:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:43,791:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:43,791:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:43,799:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:43,807:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:43,807:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:43,815:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:43,823:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:43,824:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:43,837:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:44,458:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:44,458:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:44,466:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:44,474:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:44,484:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:44,484:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:44,484:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:44,492:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:44,508:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:44,508:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:44,516:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:44,532:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:44,956:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:44,965:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:44,967:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:44,975:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:44,975:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:44,979:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:45,012:INFO:Calculating mean and std
2024-11-22 09:02:45,012:INFO:Creating metrics dataframe
2024-11-22 09:02:45,020:INFO:Uploading results into container
2024-11-22 09:02:45,020:INFO:Uploading model into container now
2024-11-22 09:02:45,020:INFO:_master_model_container: 4
2024-11-22 09:02:45,020:INFO:_display_container: 2
2024-11-22 09:02:45,020:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-11-22 09:02:45,028:INFO:create_model() successfully completed......................................
2024-11-22 09:02:45,227:INFO:SubProcess create_model() end ==================================
2024-11-22 09:02:45,227:INFO:Creating metrics dataframe
2024-11-22 09:02:45,260:INFO:Initializing SVM - Linear Kernel
2024-11-22 09:02:45,260:INFO:Total runtime is 0.3352840264638265 minutes
2024-11-22 09:02:45,275:INFO:SubProcess create_model() called ==================================
2024-11-22 09:02:45,275:INFO:Initializing create_model()
2024-11-22 09:02:45,275:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165E9EFF10>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000216FD530D60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 09:02:45,275:INFO:Checking exceptions
2024-11-22 09:02:45,275:INFO:Importing libraries
2024-11-22 09:02:45,275:INFO:Copying training dataset
2024-11-22 09:02:45,288:INFO:Defining folds
2024-11-22 09:02:45,290:INFO:Declaring metric variables
2024-11-22 09:02:45,299:INFO:Importing untrained model
2024-11-22 09:02:45,308:INFO:SVM - Linear Kernel Imported successfully
2024-11-22 09:02:45,327:INFO:Starting cross validation
2024-11-22 09:02:45,328:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 09:02:46,009:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:46,023:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:46,029:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:46,032:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:46,032:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:46,037:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:46,042:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:46,045:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:46,045:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:46,055:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:46,056:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:46,064:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:46,654:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:46,670:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:46,680:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:46,696:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:46,696:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:46,696:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:46,712:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:46,712:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:46,720:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:46,728:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:46,728:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:46,736:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:47,285:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:47,300:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:47,313:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:47,321:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:47,336:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:47,344:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:47,363:INFO:Calculating mean and std
2024-11-22 09:02:47,365:INFO:Creating metrics dataframe
2024-11-22 09:02:47,382:INFO:Uploading results into container
2024-11-22 09:02:47,383:INFO:Uploading model into container now
2024-11-22 09:02:47,384:INFO:_master_model_container: 5
2024-11-22 09:02:47,384:INFO:_display_container: 2
2024-11-22 09:02:47,388:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-11-22 09:02:47,388:INFO:create_model() successfully completed......................................
2024-11-22 09:02:47,587:INFO:SubProcess create_model() end ==================================
2024-11-22 09:02:47,587:INFO:Creating metrics dataframe
2024-11-22 09:02:47,612:INFO:Initializing Ridge Classifier
2024-11-22 09:02:47,612:INFO:Total runtime is 0.37447850306828817 minutes
2024-11-22 09:02:47,624:INFO:SubProcess create_model() called ==================================
2024-11-22 09:02:47,624:INFO:Initializing create_model()
2024-11-22 09:02:47,632:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165E9EFF10>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000216FD530D60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 09:02:47,632:INFO:Checking exceptions
2024-11-22 09:02:47,632:INFO:Importing libraries
2024-11-22 09:02:47,632:INFO:Copying training dataset
2024-11-22 09:02:47,661:INFO:Defining folds
2024-11-22 09:02:47,662:INFO:Declaring metric variables
2024-11-22 09:02:47,674:INFO:Importing untrained model
2024-11-22 09:02:47,688:INFO:Ridge Classifier Imported successfully
2024-11-22 09:02:47,713:INFO:Starting cross validation
2024-11-22 09:02:47,720:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 09:02:48,394:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:48,410:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:48,417:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:48,420:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:48,420:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:48,420:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:48,428:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:48,436:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:48,436:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:48,444:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:48,444:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:48,452:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:49,050:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:49,066:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:49,074:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:49,082:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:49,082:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:49,090:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:49,098:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:49,098:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:49,106:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:49,114:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:49,122:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:49,130:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:49,548:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:49,548:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:49,556:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:49,556:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:49,565:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:49,565:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:49,597:INFO:Calculating mean and std
2024-11-22 09:02:49,601:INFO:Creating metrics dataframe
2024-11-22 09:02:49,617:INFO:Uploading results into container
2024-11-22 09:02:49,617:INFO:Uploading model into container now
2024-11-22 09:02:49,617:INFO:_master_model_container: 6
2024-11-22 09:02:49,617:INFO:_display_container: 2
2024-11-22 09:02:49,617:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-11-22 09:02:49,617:INFO:create_model() successfully completed......................................
2024-11-22 09:02:49,804:INFO:SubProcess create_model() end ==================================
2024-11-22 09:02:49,804:INFO:Creating metrics dataframe
2024-11-22 09:02:49,840:INFO:Initializing Random Forest Classifier
2024-11-22 09:02:49,840:INFO:Total runtime is 0.4116071422894796 minutes
2024-11-22 09:02:49,855:INFO:SubProcess create_model() called ==================================
2024-11-22 09:02:49,855:INFO:Initializing create_model()
2024-11-22 09:02:49,855:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165E9EFF10>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000216FD530D60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 09:02:49,855:INFO:Checking exceptions
2024-11-22 09:02:49,855:INFO:Importing libraries
2024-11-22 09:02:49,855:INFO:Copying training dataset
2024-11-22 09:02:49,878:INFO:Defining folds
2024-11-22 09:02:49,878:INFO:Declaring metric variables
2024-11-22 09:02:49,890:INFO:Importing untrained model
2024-11-22 09:02:49,900:INFO:Random Forest Classifier Imported successfully
2024-11-22 09:02:49,924:INFO:Starting cross validation
2024-11-22 09:02:49,929:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 09:02:51,460:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:51,491:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:51,497:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:51,501:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:51,504:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:51,513:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:51,513:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:51,516:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:51,522:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:51,528:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:51,535:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:51,547:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:53,032:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:53,048:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:53,060:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:53,061:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:53,073:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:53,073:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:53,073:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:53,090:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:53,091:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:53,096:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:53,129:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:53,140:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:54,374:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:54,392:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:54,403:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:54,418:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:54,431:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:54,460:INFO:Calculating mean and std
2024-11-22 09:02:54,460:INFO:Creating metrics dataframe
2024-11-22 09:02:54,474:INFO:Uploading results into container
2024-11-22 09:02:54,478:INFO:Uploading model into container now
2024-11-22 09:02:54,479:INFO:_master_model_container: 7
2024-11-22 09:02:54,480:INFO:_display_container: 2
2024-11-22 09:02:54,480:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-11-22 09:02:54,481:INFO:create_model() successfully completed......................................
2024-11-22 09:02:54,675:INFO:SubProcess create_model() end ==================================
2024-11-22 09:02:54,675:INFO:Creating metrics dataframe
2024-11-22 09:02:54,713:INFO:Initializing Quadratic Discriminant Analysis
2024-11-22 09:02:54,713:INFO:Total runtime is 0.4928337693214417 minutes
2024-11-22 09:02:54,726:INFO:SubProcess create_model() called ==================================
2024-11-22 09:02:54,726:INFO:Initializing create_model()
2024-11-22 09:02:54,726:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165E9EFF10>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000216FD530D60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 09:02:54,726:INFO:Checking exceptions
2024-11-22 09:02:54,726:INFO:Importing libraries
2024-11-22 09:02:54,726:INFO:Copying training dataset
2024-11-22 09:02:54,753:INFO:Defining folds
2024-11-22 09:02:54,753:INFO:Declaring metric variables
2024-11-22 09:02:54,769:INFO:Importing untrained model
2024-11-22 09:02:54,798:INFO:Quadratic Discriminant Analysis Imported successfully
2024-11-22 09:02:54,836:INFO:Starting cross validation
2024-11-22 09:02:54,850:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 09:02:55,515:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:55,527:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:55,536:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:55,536:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:55,540:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:55,549:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:55,549:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:55,562:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:55,564:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:55,565:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:55,579:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:56,198:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:56,217:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:56,223:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:56,232:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:56,239:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:56,247:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:56,253:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:56,264:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:56,272:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:56,296:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:56,308:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:56,314:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:56,756:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:56,765:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:56,765:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:56,773:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:56,773:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:56,781:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:56,806:INFO:Calculating mean and std
2024-11-22 09:02:56,806:INFO:Creating metrics dataframe
2024-11-22 09:02:56,814:INFO:Uploading results into container
2024-11-22 09:02:56,814:INFO:Uploading model into container now
2024-11-22 09:02:56,814:INFO:_master_model_container: 8
2024-11-22 09:02:56,814:INFO:_display_container: 2
2024-11-22 09:02:56,814:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-11-22 09:02:56,814:INFO:create_model() successfully completed......................................
2024-11-22 09:02:57,007:INFO:SubProcess create_model() end ==================================
2024-11-22 09:02:57,007:INFO:Creating metrics dataframe
2024-11-22 09:02:57,040:INFO:Initializing Ada Boost Classifier
2024-11-22 09:02:57,040:INFO:Total runtime is 0.5316199580828349 minutes
2024-11-22 09:02:57,055:INFO:SubProcess create_model() called ==================================
2024-11-22 09:02:57,056:INFO:Initializing create_model()
2024-11-22 09:02:57,057:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165E9EFF10>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000216FD530D60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 09:02:57,057:INFO:Checking exceptions
2024-11-22 09:02:57,057:INFO:Importing libraries
2024-11-22 09:02:57,057:INFO:Copying training dataset
2024-11-22 09:02:57,091:INFO:Defining folds
2024-11-22 09:02:57,091:INFO:Declaring metric variables
2024-11-22 09:02:57,109:INFO:Importing untrained model
2024-11-22 09:02:57,128:INFO:Ada Boost Classifier Imported successfully
2024-11-22 09:02:57,174:INFO:Starting cross validation
2024-11-22 09:02:57,194:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 09:02:57,699:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-22 09:02:57,708:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-22 09:02:57,708:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-22 09:02:57,725:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-22 09:02:58,361:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:58,361:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:58,377:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:58,378:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:58,378:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:58,378:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:58,378:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:58,378:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:58,394:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:58,413:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:58,829:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-22 09:02:58,829:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-22 09:02:58,861:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-22 09:02:58,888:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-22 09:02:59,544:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:59,547:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:59,553:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:59,559:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:59,560:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:59,569:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:59,572:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:59,574:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:59,587:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:59,608:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:59,619:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:59,631:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:02:59,913:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-22 09:03:00,498:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:00,503:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:00,514:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:00,514:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:00,519:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:00,519:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:00,556:INFO:Calculating mean and std
2024-11-22 09:03:00,556:INFO:Creating metrics dataframe
2024-11-22 09:03:00,564:INFO:Uploading results into container
2024-11-22 09:03:00,564:INFO:Uploading model into container now
2024-11-22 09:03:00,564:INFO:_master_model_container: 9
2024-11-22 09:03:00,564:INFO:_display_container: 2
2024-11-22 09:03:00,572:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-11-22 09:03:00,572:INFO:create_model() successfully completed......................................
2024-11-22 09:03:00,773:INFO:SubProcess create_model() end ==================================
2024-11-22 09:03:00,773:INFO:Creating metrics dataframe
2024-11-22 09:03:00,814:INFO:Initializing Gradient Boosting Classifier
2024-11-22 09:03:00,814:INFO:Total runtime is 0.5945160309473674 minutes
2024-11-22 09:03:00,822:INFO:SubProcess create_model() called ==================================
2024-11-22 09:03:00,822:INFO:Initializing create_model()
2024-11-22 09:03:00,822:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165E9EFF10>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000216FD530D60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 09:03:00,822:INFO:Checking exceptions
2024-11-22 09:03:00,822:INFO:Importing libraries
2024-11-22 09:03:00,822:INFO:Copying training dataset
2024-11-22 09:03:00,846:INFO:Defining folds
2024-11-22 09:03:00,846:INFO:Declaring metric variables
2024-11-22 09:03:00,853:INFO:Importing untrained model
2024-11-22 09:03:00,881:INFO:Gradient Boosting Classifier Imported successfully
2024-11-22 09:03:00,899:INFO:Starting cross validation
2024-11-22 09:03:00,903:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 09:03:02,148:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:02,164:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:02,172:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:02,180:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:02,180:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:02,180:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:02,190:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:02,198:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:02,198:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:02,206:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:02,214:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:02,238:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:03,398:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:03,414:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:03,414:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:03,430:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:03,430:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:03,446:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:03,446:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:03,473:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:03,473:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:03,482:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:03,482:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:03,498:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:04,427:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:04,427:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:04,442:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:04,442:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:04,458:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:04,485:INFO:Calculating mean and std
2024-11-22 09:03:04,487:INFO:Creating metrics dataframe
2024-11-22 09:03:04,491:INFO:Uploading results into container
2024-11-22 09:03:04,499:INFO:Uploading model into container now
2024-11-22 09:03:04,499:INFO:_master_model_container: 10
2024-11-22 09:03:04,499:INFO:_display_container: 2
2024-11-22 09:03:04,504:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-11-22 09:03:04,504:INFO:create_model() successfully completed......................................
2024-11-22 09:03:04,722:INFO:SubProcess create_model() end ==================================
2024-11-22 09:03:04,723:INFO:Creating metrics dataframe
2024-11-22 09:03:04,761:INFO:Initializing Linear Discriminant Analysis
2024-11-22 09:03:04,761:INFO:Total runtime is 0.6603031794230143 minutes
2024-11-22 09:03:04,779:INFO:SubProcess create_model() called ==================================
2024-11-22 09:03:04,779:INFO:Initializing create_model()
2024-11-22 09:03:04,779:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165E9EFF10>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000216FD530D60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 09:03:04,779:INFO:Checking exceptions
2024-11-22 09:03:04,787:INFO:Importing libraries
2024-11-22 09:03:04,787:INFO:Copying training dataset
2024-11-22 09:03:04,804:INFO:Defining folds
2024-11-22 09:03:04,805:INFO:Declaring metric variables
2024-11-22 09:03:04,813:INFO:Importing untrained model
2024-11-22 09:03:04,835:INFO:Linear Discriminant Analysis Imported successfully
2024-11-22 09:03:04,862:INFO:Starting cross validation
2024-11-22 09:03:04,869:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 09:03:05,709:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:05,726:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:05,726:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:05,734:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:05,742:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:05,742:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:05,750:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:05,758:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:05,758:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:05,766:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:05,774:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:05,807:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:06,420:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:06,429:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:06,446:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:06,446:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:06,462:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:06,478:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:06,486:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:06,486:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:06,502:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:06,511:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:06,969:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:06,983:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:06,986:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:06,994:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:06,997:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:07,006:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:07,041:INFO:Calculating mean and std
2024-11-22 09:03:07,045:INFO:Creating metrics dataframe
2024-11-22 09:03:07,057:INFO:Uploading results into container
2024-11-22 09:03:07,059:INFO:Uploading model into container now
2024-11-22 09:03:07,060:INFO:_master_model_container: 11
2024-11-22 09:03:07,060:INFO:_display_container: 2
2024-11-22 09:03:07,060:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-11-22 09:03:07,060:INFO:create_model() successfully completed......................................
2024-11-22 09:03:07,265:INFO:SubProcess create_model() end ==================================
2024-11-22 09:03:07,265:INFO:Creating metrics dataframe
2024-11-22 09:03:07,311:INFO:Initializing Extra Trees Classifier
2024-11-22 09:03:07,316:INFO:Total runtime is 0.7028728048006694 minutes
2024-11-22 09:03:07,323:INFO:SubProcess create_model() called ==================================
2024-11-22 09:03:07,324:INFO:Initializing create_model()
2024-11-22 09:03:07,324:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165E9EFF10>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000216FD530D60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 09:03:07,325:INFO:Checking exceptions
2024-11-22 09:03:07,325:INFO:Importing libraries
2024-11-22 09:03:07,325:INFO:Copying training dataset
2024-11-22 09:03:07,339:INFO:Defining folds
2024-11-22 09:03:07,339:INFO:Declaring metric variables
2024-11-22 09:03:07,355:INFO:Importing untrained model
2024-11-22 09:03:07,372:INFO:Extra Trees Classifier Imported successfully
2024-11-22 09:03:07,387:INFO:Starting cross validation
2024-11-22 09:03:07,399:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 09:03:08,809:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:08,818:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:08,818:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:08,839:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:08,839:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:08,855:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:08,855:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:08,871:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:08,886:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:08,908:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:08,939:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:08,956:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:10,213:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:10,219:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:10,250:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:10,273:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:10,290:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:10,309:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:10,309:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:10,337:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:10,351:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:10,493:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:10,502:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:10,522:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:11,515:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:11,522:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:11,544:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:11,572:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:11,581:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:11,592:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:11,627:INFO:Calculating mean and std
2024-11-22 09:03:11,631:INFO:Creating metrics dataframe
2024-11-22 09:03:11,642:INFO:Uploading results into container
2024-11-22 09:03:11,642:INFO:Uploading model into container now
2024-11-22 09:03:11,642:INFO:_master_model_container: 12
2024-11-22 09:03:11,642:INFO:_display_container: 2
2024-11-22 09:03:11,649:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-11-22 09:03:11,649:INFO:create_model() successfully completed......................................
2024-11-22 09:03:11,856:INFO:SubProcess create_model() end ==================================
2024-11-22 09:03:11,856:INFO:Creating metrics dataframe
2024-11-22 09:03:11,900:INFO:Initializing Light Gradient Boosting Machine
2024-11-22 09:03:11,901:INFO:Total runtime is 0.7792979756991069 minutes
2024-11-22 09:03:11,915:INFO:SubProcess create_model() called ==================================
2024-11-22 09:03:11,916:INFO:Initializing create_model()
2024-11-22 09:03:11,916:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165E9EFF10>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000216FD530D60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 09:03:11,916:INFO:Checking exceptions
2024-11-22 09:03:11,916:INFO:Importing libraries
2024-11-22 09:03:11,916:INFO:Copying training dataset
2024-11-22 09:03:11,939:INFO:Defining folds
2024-11-22 09:03:11,941:INFO:Declaring metric variables
2024-11-22 09:03:11,949:INFO:Importing untrained model
2024-11-22 09:03:11,972:INFO:Light Gradient Boosting Machine Imported successfully
2024-11-22 09:03:11,996:INFO:Starting cross validation
2024-11-22 09:03:12,004:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 09:03:13,290:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:13,307:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:13,323:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:13,341:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:13,341:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:13,357:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:13,357:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:13,373:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:13,388:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:13,451:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:13,451:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:13,466:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:14,583:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:14,599:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:14,631:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:14,647:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:14,663:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:14,663:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:14,678:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:14,694:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:14,709:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:14,822:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:14,838:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:14,850:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:15,624:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:15,644:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:15,654:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:15,694:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:15,709:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:15,726:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:15,774:INFO:Calculating mean and std
2024-11-22 09:03:15,774:INFO:Creating metrics dataframe
2024-11-22 09:03:15,783:INFO:Uploading results into container
2024-11-22 09:03:15,783:INFO:Uploading model into container now
2024-11-22 09:03:15,791:INFO:_master_model_container: 13
2024-11-22 09:03:15,791:INFO:_display_container: 2
2024-11-22 09:03:15,793:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-11-22 09:03:15,793:INFO:create_model() successfully completed......................................
2024-11-22 09:03:16,013:INFO:SubProcess create_model() end ==================================
2024-11-22 09:03:16,013:INFO:Creating metrics dataframe
2024-11-22 09:03:16,058:INFO:Initializing Dummy Classifier
2024-11-22 09:03:16,058:INFO:Total runtime is 0.8485845843950908 minutes
2024-11-22 09:03:16,071:INFO:SubProcess create_model() called ==================================
2024-11-22 09:03:16,071:INFO:Initializing create_model()
2024-11-22 09:03:16,071:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165E9EFF10>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000216FD530D60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 09:03:16,071:INFO:Checking exceptions
2024-11-22 09:03:16,071:INFO:Importing libraries
2024-11-22 09:03:16,071:INFO:Copying training dataset
2024-11-22 09:03:16,085:INFO:Defining folds
2024-11-22 09:03:16,085:INFO:Declaring metric variables
2024-11-22 09:03:16,093:INFO:Importing untrained model
2024-11-22 09:03:16,105:INFO:Dummy Classifier Imported successfully
2024-11-22 09:03:16,129:INFO:Starting cross validation
2024-11-22 09:03:16,135:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 09:03:16,798:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:16,806:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:16,814:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-22 09:03:16,822:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:16,822:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:16,822:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:16,830:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:16,838:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:16,838:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-22 09:03:16,838:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:16,846:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-22 09:03:16,846:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:16,854:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:16,854:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:16,870:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-22 09:03:16,878:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:17,425:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:17,441:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:17,449:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:17,449:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-22 09:03:17,457:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:17,465:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:17,465:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-22 09:03:17,473:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:17,481:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:17,493:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:17,501:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-22 09:03:17,509:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:17,509:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:17,518:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:17,526:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-22 09:03:17,534:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:17,975:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:17,983:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:17,983:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:17,983:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-22 09:03:17,992:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:17,992:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:17,992:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-22 09:03:18,000:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:18,022:INFO:Calculating mean and std
2024-11-22 09:03:18,023:INFO:Creating metrics dataframe
2024-11-22 09:03:18,028:INFO:Uploading results into container
2024-11-22 09:03:18,028:INFO:Uploading model into container now
2024-11-22 09:03:18,028:INFO:_master_model_container: 14
2024-11-22 09:03:18,028:INFO:_display_container: 2
2024-11-22 09:03:18,028:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-11-22 09:03:18,037:INFO:create_model() successfully completed......................................
2024-11-22 09:03:18,216:INFO:SubProcess create_model() end ==================================
2024-11-22 09:03:18,216:INFO:Creating metrics dataframe
2024-11-22 09:03:18,287:INFO:Initializing create_model()
2024-11-22 09:03:18,287:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165E9EFF10>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 09:03:18,290:INFO:Checking exceptions
2024-11-22 09:03:18,300:INFO:Importing libraries
2024-11-22 09:03:18,301:INFO:Copying training dataset
2024-11-22 09:03:18,323:INFO:Defining folds
2024-11-22 09:03:18,323:INFO:Declaring metric variables
2024-11-22 09:03:18,324:INFO:Importing untrained model
2024-11-22 09:03:18,324:INFO:Declaring custom model
2024-11-22 09:03:18,325:INFO:Logistic Regression Imported successfully
2024-11-22 09:03:18,325:INFO:Cross validation set to False
2024-11-22 09:03:18,325:INFO:Fitting Model
2024-11-22 09:03:18,634:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-22 09:03:18,634:INFO:create_model() successfully completed......................................
2024-11-22 09:03:18,934:INFO:_master_model_container: 14
2024-11-22 09:03:18,934:INFO:_display_container: 2
2024-11-22 09:03:18,944:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-22 09:03:18,944:INFO:compare_models() successfully completed......................................
2024-11-22 09:03:18,944:INFO:Initializing create_model()
2024-11-22 09:03:18,944:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165E9EFF10>, estimator=svm, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 09:03:18,944:INFO:Checking exceptions
2024-11-22 09:03:19,027:INFO:Importing libraries
2024-11-22 09:03:19,027:INFO:Copying training dataset
2024-11-22 09:03:19,045:INFO:Defining folds
2024-11-22 09:03:19,045:INFO:Declaring metric variables
2024-11-22 09:03:19,057:INFO:Importing untrained model
2024-11-22 09:03:19,069:INFO:SVM - Linear Kernel Imported successfully
2024-11-22 09:03:19,099:INFO:Starting cross validation
2024-11-22 09:03:19,107:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 09:03:19,806:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:19,822:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:19,822:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:19,822:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:19,838:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:19,838:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:19,838:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:19,838:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:19,848:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:19,848:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:19,875:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:20,471:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:20,488:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:20,490:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:20,498:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:20,506:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:20,506:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:20,514:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:20,522:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:20,545:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:20,561:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:20,579:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:20,588:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:20,981:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:20,989:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:20,989:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:20,997:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:20,997:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:21,014:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:21,033:INFO:Calculating mean and std
2024-11-22 09:03:21,033:INFO:Creating metrics dataframe
2024-11-22 09:03:21,049:INFO:Finalizing model
2024-11-22 09:03:21,344:INFO:Uploading results into container
2024-11-22 09:03:21,346:INFO:Uploading model into container now
2024-11-22 09:03:21,393:INFO:_master_model_container: 15
2024-11-22 09:03:21,393:INFO:_display_container: 3
2024-11-22 09:03:21,393:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-11-22 09:03:21,393:INFO:create_model() successfully completed......................................
2024-11-22 09:03:21,582:INFO:Initializing tune_model()
2024-11-22 09:03:21,582:INFO:tune_model(estimator=SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165E9EFF10>)
2024-11-22 09:03:21,582:INFO:Checking exceptions
2024-11-22 09:03:21,711:INFO:Copying training dataset
2024-11-22 09:03:21,722:INFO:Checking base model
2024-11-22 09:03:21,722:INFO:Base model : SVM - Linear Kernel
2024-11-22 09:03:21,764:INFO:Declaring metric variables
2024-11-22 09:03:21,779:INFO:Defining Hyperparameters
2024-11-22 09:03:21,959:INFO:Tuning with n_jobs=-1
2024-11-22 09:03:21,959:INFO:Initializing RandomizedSearchCV
2024-11-22 09:03:37,632:INFO:best_params: {'actual_estimator__penalty': 'l1', 'actual_estimator__learning_rate': 'adaptive', 'actual_estimator__l1_ratio': 0.3900000001, 'actual_estimator__fit_intercept': True, 'actual_estimator__eta0': 0.001, 'actual_estimator__alpha': 0.05}
2024-11-22 09:03:37,635:INFO:Hyperparameter search completed
2024-11-22 09:03:37,636:INFO:SubProcess create_model() called ==================================
2024-11-22 09:03:37,637:INFO:Initializing create_model()
2024-11-22 09:03:37,637:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165E9EFF10>, estimator=SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000216FF0AA620>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'penalty': 'l1', 'learning_rate': 'adaptive', 'l1_ratio': 0.3900000001, 'fit_intercept': True, 'eta0': 0.001, 'alpha': 0.05})
2024-11-22 09:03:37,637:INFO:Checking exceptions
2024-11-22 09:03:37,637:INFO:Importing libraries
2024-11-22 09:03:37,637:INFO:Copying training dataset
2024-11-22 09:03:37,659:INFO:Defining folds
2024-11-22 09:03:37,659:INFO:Declaring metric variables
2024-11-22 09:03:37,670:INFO:Importing untrained model
2024-11-22 09:03:37,670:INFO:Declaring custom model
2024-11-22 09:03:37,689:INFO:SVM - Linear Kernel Imported successfully
2024-11-22 09:03:37,702:INFO:Starting cross validation
2024-11-22 09:03:37,712:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 09:03:38,460:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:38,470:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:38,477:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:38,486:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:38,492:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:38,500:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:38,501:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:38,501:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:38,509:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:38,517:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:38,534:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:38,534:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:39,141:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:39,149:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:39,165:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:39,173:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:39,181:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:39,181:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:39,198:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:39,198:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:39,198:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:39,206:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:39,214:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:39,230:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:39,834:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:39,855:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:39,857:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:39,869:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:39,878:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:39,886:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:39,928:INFO:Calculating mean and std
2024-11-22 09:03:39,928:INFO:Creating metrics dataframe
2024-11-22 09:03:39,953:INFO:Finalizing model
2024-11-22 09:03:40,405:INFO:Uploading results into container
2024-11-22 09:03:40,408:INFO:Uploading model into container now
2024-11-22 09:03:40,409:INFO:_master_model_container: 16
2024-11-22 09:03:40,409:INFO:_display_container: 4
2024-11-22 09:03:40,411:INFO:SGDClassifier(alpha=0.05, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.3900000001, learning_rate='adaptive', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l1',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-11-22 09:03:40,412:INFO:create_model() successfully completed......................................
2024-11-22 09:03:40,620:INFO:SubProcess create_model() end ==================================
2024-11-22 09:03:40,620:INFO:choose_better activated
2024-11-22 09:03:40,642:INFO:SubProcess create_model() called ==================================
2024-11-22 09:03:40,643:INFO:Initializing create_model()
2024-11-22 09:03:40,643:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165E9EFF10>, estimator=SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 09:03:40,643:INFO:Checking exceptions
2024-11-22 09:03:40,652:INFO:Importing libraries
2024-11-22 09:03:40,652:INFO:Copying training dataset
2024-11-22 09:03:40,671:INFO:Defining folds
2024-11-22 09:03:40,671:INFO:Declaring metric variables
2024-11-22 09:03:40,672:INFO:Importing untrained model
2024-11-22 09:03:40,672:INFO:Declaring custom model
2024-11-22 09:03:40,675:INFO:SVM - Linear Kernel Imported successfully
2024-11-22 09:03:40,676:INFO:Starting cross validation
2024-11-22 09:03:40,681:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 09:03:41,379:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:41,387:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:41,405:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:41,405:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:41,413:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:41,421:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:41,421:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:41,430:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:41,430:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:41,446:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:41,454:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:41,462:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:42,045:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:42,061:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:42,077:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:42,093:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:42,093:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:42,093:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:42,101:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:42,101:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:42,117:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:42,117:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:42,125:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:42,141:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:42,575:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:42,591:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:42,599:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:42,624:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:42,633:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:42,641:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:03:42,666:INFO:Calculating mean and std
2024-11-22 09:03:42,667:INFO:Creating metrics dataframe
2024-11-22 09:03:42,673:INFO:Finalizing model
2024-11-22 09:03:42,932:INFO:Uploading results into container
2024-11-22 09:03:42,932:INFO:Uploading model into container now
2024-11-22 09:03:42,932:INFO:_master_model_container: 17
2024-11-22 09:03:42,932:INFO:_display_container: 5
2024-11-22 09:03:42,932:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-11-22 09:03:42,932:INFO:create_model() successfully completed......................................
2024-11-22 09:03:43,118:INFO:SubProcess create_model() end ==================================
2024-11-22 09:03:43,118:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False) result for Accuracy is 0.8743
2024-11-22 09:03:43,118:INFO:SGDClassifier(alpha=0.05, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.3900000001, learning_rate='adaptive', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l1',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False) result for Accuracy is 0.9114
2024-11-22 09:03:43,118:INFO:SGDClassifier(alpha=0.05, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.3900000001, learning_rate='adaptive', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l1',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False) is best model
2024-11-22 09:03:43,118:INFO:choose_better completed
2024-11-22 09:03:43,148:INFO:_master_model_container: 17
2024-11-22 09:03:43,150:INFO:_display_container: 4
2024-11-22 09:03:43,151:INFO:SGDClassifier(alpha=0.05, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.3900000001, learning_rate='adaptive', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l1',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-11-22 09:03:43,151:INFO:tune_model() successfully completed......................................
2024-11-22 09:03:43,340:INFO:Initializing evaluate_model()
2024-11-22 09:03:43,340:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165E9EFF10>, estimator=SGDClassifier(alpha=0.05, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.3900000001, learning_rate='adaptive', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l1',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-11-22 09:03:43,394:INFO:Initializing plot_model()
2024-11-22 09:03:43,395:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=SGDClassifier(alpha=0.05, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.3900000001, learning_rate='adaptive', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l1',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165E9EFF10>, system=True)
2024-11-22 09:03:43,396:INFO:Checking exceptions
2024-11-22 09:03:43,403:INFO:Preloading libraries
2024-11-22 09:03:43,403:INFO:Copying training dataset
2024-11-22 09:03:43,404:INFO:Plot type: pipeline
2024-11-22 09:03:43,761:INFO:Visual Rendered Successfully
2024-11-22 09:03:43,952:INFO:plot_model() successfully completed......................................
2024-11-22 09:03:43,960:INFO:Initializing finalize_model()
2024-11-22 09:03:43,960:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165E9EFF10>, estimator=SGDClassifier(alpha=0.05, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.3900000001, learning_rate='adaptive', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l1',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-11-22 09:03:43,963:INFO:Finalizing SGDClassifier(alpha=0.05, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.3900000001, learning_rate='adaptive', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l1',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-11-22 09:03:43,979:INFO:Initializing create_model()
2024-11-22 09:03:43,980:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002165E9EFF10>, estimator=SGDClassifier(alpha=0.05, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.3900000001, learning_rate='adaptive', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l1',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 09:03:43,980:INFO:Checking exceptions
2024-11-22 09:03:43,985:INFO:Importing libraries
2024-11-22 09:03:43,985:INFO:Copying training dataset
2024-11-22 09:03:43,986:INFO:Defining folds
2024-11-22 09:03:43,986:INFO:Declaring metric variables
2024-11-22 09:03:43,986:INFO:Importing untrained model
2024-11-22 09:03:43,986:INFO:Declaring custom model
2024-11-22 09:03:43,987:INFO:SVM - Linear Kernel Imported successfully
2024-11-22 09:03:43,992:INFO:Cross validation set to False
2024-11-22 09:03:43,992:INFO:Fitting Model
2024-11-22 09:03:44,596:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['Age'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean')...
                 SGDClassifier(alpha=0.05, average=False, class_weight=None,
                               early_stopping=False, epsilon=0.1, eta0=0.001,
                               fit_intercept=True, l1_ratio=0.3900000001,
                               learning_rate='adaptive', loss='hinge',
                               max_iter=1000, n_iter_no_change=5, n_jobs=-1,
                               penalty='l1', power_t=0.5, random_state=123,
                               shuffle=True, tol=0.001, validation_fraction=0.1,
                               verbose=0, warm_start=False))],
         verbose=False)
2024-11-22 09:03:44,596:INFO:create_model() successfully completed......................................
2024-11-22 09:03:44,789:INFO:_master_model_container: 17
2024-11-22 09:03:44,789:INFO:_display_container: 4
2024-11-22 09:03:45,128:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['Age'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean')...
                 SGDClassifier(alpha=0.05, average=False, class_weight=None,
                               early_stopping=False, epsilon=0.1, eta0=0.001,
                               fit_intercept=True, l1_ratio=0.3900000001,
                               learning_rate='adaptive', loss='hinge',
                               max_iter=1000, n_iter_no_change=5, n_jobs=-1,
                               penalty='l1', power_t=0.5, random_state=123,
                               shuffle=True, tol=0.001, validation_fraction=0.1,
                               verbose=0, warm_start=False))],
         verbose=False)
2024-11-22 09:03:45,129:INFO:finalize_model() successfully completed......................................
2024-11-22 09:03:45,953:INFO:Initializing save_model()
2024-11-22 09:03:45,953:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['Age'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean')...
                 SGDClassifier(alpha=0.05, average=False, class_weight=None,
                               early_stopping=False, epsilon=0.1, eta0=0.001,
                               fit_intercept=True, l1_ratio=0.3900000001,
                               learning_rate='adaptive', loss='hinge',
                               max_iter=1000, n_iter_no_change=5, n_jobs=-1,
                               penalty='l1', power_t=0.5, random_state=123,
                               shuffle=True, tol=0.001, validation_fraction=0.1,
                               verbose=0, warm_start=False))],
         verbose=False), model_name=svm_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\teklu\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['Age'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                                        {'col': 'Hemoptysis',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64},
                                                                        {'col': 'Breathing',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64},
                                                                        {'col': 'Arthritis',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64},
                                                                        {'col': 'Vomiting',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-11-22 09:03:45,953:INFO:Adding model into prep_pipe
2024-11-22 09:03:45,953:WARNING:Only Model saved as it was a pipeline.
2024-11-22 09:03:45,980:INFO:svm_model.pkl saved in current working directory
2024-11-22 09:03:46,311:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['Age'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean')...
                 SGDClassifier(alpha=0.05, average=False, class_weight=None,
                               early_stopping=False, epsilon=0.1, eta0=0.001,
                               fit_intercept=True, l1_ratio=0.3900000001,
                               learning_rate='adaptive', loss='hinge',
                               max_iter=1000, n_iter_no_change=5, n_jobs=-1,
                               penalty='l1', power_t=0.5, random_state=123,
                               shuffle=True, tol=0.001, validation_fraction=0.1,
                               verbose=0, warm_start=False))],
         verbose=False)
2024-11-22 09:03:46,311:INFO:save_model() successfully completed......................................
2024-11-22 09:03:58,653:INFO:PyCaret ClassificationExperiment
2024-11-22 09:03:58,653:INFO:Logging name: clf-default-name
2024-11-22 09:03:58,653:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-11-22 09:03:58,653:INFO:version 3.3.2
2024-11-22 09:03:58,653:INFO:Initializing setup()
2024-11-22 09:03:58,653:INFO:self.USI: 39ad
2024-11-22 09:03:58,653:INFO:self._variable_keys: {'exp_id', 'log_plots_param', 'gpu_param', 'y', 'X_test', 'target_param', 'data', 'y_train', 'idx', 'USI', 'memory', 'y_test', 'X_train', 'gpu_n_jobs_param', 'n_jobs_param', 'X', 'logging_param', 'html_param', 'fold_generator', 'fold_groups_param', 'is_multiclass', '_ml_usecase', '_available_plots', 'fix_imbalance', 'exp_name_log', 'fold_shuffle_param', 'pipeline', 'seed'}
2024-11-22 09:03:58,653:INFO:Checking environment
2024-11-22 09:03:58,653:INFO:python_version: 3.10.9
2024-11-22 09:03:58,653:INFO:python_build: ('main', 'Mar  1 2023 18:18:15')
2024-11-22 09:03:58,653:INFO:machine: AMD64
2024-11-22 09:03:58,653:INFO:platform: Windows-10-10.0.19045-SP0
2024-11-22 09:03:58,653:INFO:Memory: svmem(total=17044500480, available=7827857408, percent=54.1, used=9216643072, free=7827857408)
2024-11-22 09:03:58,653:INFO:Physical Core: 2
2024-11-22 09:03:58,653:INFO:Logical Core: 4
2024-11-22 09:03:58,653:INFO:Checking libraries
2024-11-22 09:03:58,653:INFO:System:
2024-11-22 09:03:58,653:INFO:    python: 3.10.9 | packaged by Anaconda, Inc. | (main, Mar  1 2023, 18:18:15) [MSC v.1916 64 bit (AMD64)]
2024-11-22 09:03:58,653:INFO:executable: C:\Users\teklu\anaconda3\python.exe
2024-11-22 09:03:58,653:INFO:   machine: Windows-10-10.0.19045-SP0
2024-11-22 09:03:58,653:INFO:PyCaret required dependencies:
2024-11-22 09:03:58,653:INFO:                 pip: 22.3.1
2024-11-22 09:03:58,653:INFO:          setuptools: 65.6.3
2024-11-22 09:03:58,653:INFO:             pycaret: 3.3.2
2024-11-22 09:03:58,653:INFO:             IPython: 8.10.0
2024-11-22 09:03:58,653:INFO:          ipywidgets: 7.6.5
2024-11-22 09:03:58,653:INFO:                tqdm: 4.64.1
2024-11-22 09:03:58,653:INFO:               numpy: 1.23.5
2024-11-22 09:03:58,653:INFO:              pandas: 1.5.3
2024-11-22 09:03:58,653:INFO:              jinja2: 3.1.2
2024-11-22 09:03:58,653:INFO:               scipy: 1.10.0
2024-11-22 09:03:58,660:INFO:              joblib: 1.3.2
2024-11-22 09:03:58,660:INFO:             sklearn: 1.4.2
2024-11-22 09:03:58,660:INFO:                pyod: 2.0.2
2024-11-22 09:03:58,661:INFO:            imblearn: 0.12.4
2024-11-22 09:03:58,661:INFO:   category_encoders: 2.6.4
2024-11-22 09:03:58,662:INFO:            lightgbm: 4.5.0
2024-11-22 09:03:58,662:INFO:               numba: 0.56.4
2024-11-22 09:03:58,662:INFO:            requests: 2.28.1
2024-11-22 09:03:58,662:INFO:          matplotlib: 3.7.0
2024-11-22 09:03:58,662:INFO:          scikitplot: 0.3.7
2024-11-22 09:03:58,662:INFO:         yellowbrick: 1.5
2024-11-22 09:03:58,662:INFO:              plotly: 5.24.1
2024-11-22 09:03:58,663:INFO:    plotly-resampler: Not installed
2024-11-22 09:03:58,663:INFO:             kaleido: 0.2.1
2024-11-22 09:03:58,663:INFO:           schemdraw: 0.15
2024-11-22 09:03:58,663:INFO:         statsmodels: 0.13.5
2024-11-22 09:03:58,663:INFO:              sktime: 0.26.0
2024-11-22 09:03:58,663:INFO:               tbats: 1.1.3
2024-11-22 09:03:58,663:INFO:            pmdarima: 2.0.4
2024-11-22 09:03:58,663:INFO:              psutil: 5.9.0
2024-11-22 09:03:58,663:INFO:          markupsafe: 2.1.1
2024-11-22 09:03:58,663:INFO:             pickle5: Not installed
2024-11-22 09:03:58,663:INFO:         cloudpickle: 2.0.0
2024-11-22 09:03:58,663:INFO:         deprecation: 2.1.0
2024-11-22 09:03:58,663:INFO:              xxhash: 3.5.0
2024-11-22 09:03:58,663:INFO:           wurlitzer: Not installed
2024-11-22 09:03:58,663:INFO:PyCaret optional dependencies:
2024-11-22 09:03:58,663:INFO:                shap: Not installed
2024-11-22 09:03:58,663:INFO:           interpret: Not installed
2024-11-22 09:03:58,663:INFO:                umap: Not installed
2024-11-22 09:03:58,663:INFO:     ydata_profiling: Not installed
2024-11-22 09:03:58,663:INFO:  explainerdashboard: Not installed
2024-11-22 09:03:58,663:INFO:             autoviz: Not installed
2024-11-22 09:03:58,663:INFO:           fairlearn: Not installed
2024-11-22 09:03:58,663:INFO:          deepchecks: Not installed
2024-11-22 09:03:58,663:INFO:             xgboost: Not installed
2024-11-22 09:03:58,663:INFO:            catboost: Not installed
2024-11-22 09:03:58,663:INFO:              kmodes: Not installed
2024-11-22 09:03:58,663:INFO:             mlxtend: Not installed
2024-11-22 09:03:58,663:INFO:       statsforecast: Not installed
2024-11-22 09:03:58,663:INFO:        tune_sklearn: Not installed
2024-11-22 09:03:58,663:INFO:                 ray: Not installed
2024-11-22 09:03:58,663:INFO:            hyperopt: Not installed
2024-11-22 09:03:58,663:INFO:              optuna: Not installed
2024-11-22 09:03:58,663:INFO:               skopt: Not installed
2024-11-22 09:03:58,663:INFO:              mlflow: Not installed
2024-11-22 09:03:58,663:INFO:              gradio: Not installed
2024-11-22 09:03:58,663:INFO:             fastapi: Not installed
2024-11-22 09:03:58,663:INFO:             uvicorn: Not installed
2024-11-22 09:03:58,663:INFO:              m2cgen: Not installed
2024-11-22 09:03:58,663:INFO:           evidently: Not installed
2024-11-22 09:03:58,663:INFO:               fugue: Not installed
2024-11-22 09:03:58,663:INFO:           streamlit: Not installed
2024-11-22 09:03:58,663:INFO:             prophet: Not installed
2024-11-22 09:03:58,663:INFO:None
2024-11-22 09:03:58,663:INFO:Set up data.
2024-11-22 09:03:58,690:INFO:Set up folding strategy.
2024-11-22 09:03:58,690:INFO:Set up train/test split.
2024-11-22 09:03:58,706:INFO:Set up index.
2024-11-22 09:03:58,706:INFO:Assigning column types.
2024-11-22 09:03:58,715:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-11-22 09:03:58,868:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-22 09:03:58,872:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-22 09:03:58,970:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 09:03:58,970:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 09:03:59,111:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-22 09:03:59,112:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-22 09:03:59,199:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 09:03:59,200:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 09:03:59,200:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-11-22 09:03:59,347:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-22 09:03:59,429:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 09:03:59,429:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 09:03:59,556:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-22 09:03:59,649:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 09:03:59,649:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 09:03:59,649:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-11-22 09:03:59,919:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 09:03:59,923:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 09:04:00,147:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 09:04:00,147:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 09:04:00,149:INFO:Preparing preprocessing pipeline...
2024-11-22 09:04:00,149:INFO:Set up label encoding.
2024-11-22 09:04:00,149:INFO:Set up simple imputation.
2024-11-22 09:04:00,165:INFO:Set up encoding of ordinal features.
2024-11-22 09:04:00,198:INFO:Set up encoding of categorical features.
2024-11-22 09:04:00,452:INFO:Finished creating preprocessing pipeline.
2024-11-22 09:04:00,893:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\teklu\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['Age'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                                        {'col': 'Hemoptysis',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64},
                                                                        {'col': 'Breathing',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64},
                                                                        {'col': 'Arthritis',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64},
                                                                        {'col': 'Vomiting',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False)
2024-11-22 09:04:00,893:INFO:Creating final display dataframe.
2024-11-22 09:04:01,184:INFO:Setup _display_container:                     Description                     Value
0                    Session id                       123
1                        Target           Covid_19_result
2                   Target type                    Binary
3                Target mapping  Negative: 0, Positive: 1
4           Original data shape                (2001, 13)
5        Transformed data shape                (2001, 13)
6   Transformed train set shape                (1400, 13)
7    Transformed test set shape                 (601, 13)
8              Numeric features                         1
9          Categorical features                        11
10                   Preprocess                      True
11              Imputation type                    simple
12           Numeric imputation                      mean
13       Categorical imputation                      mode
14     Maximum one-hot encoding                        25
15              Encoding method                      None
16               Fold Generator           StratifiedKFold
17                  Fold Number                        10
18                     CPU Jobs                        -1
19                      Use GPU                     False
20               Log Experiment                     False
21              Experiment Name          clf-default-name
22                          USI                      39ad
2024-11-22 09:04:01,424:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 09:04:01,424:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 09:04:01,624:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 09:04:01,624:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 09:04:01,632:INFO:setup() successfully completed in 3.0s...............
2024-11-22 09:04:01,632:INFO:Initializing compare_models()
2024-11-22 09:04:01,632:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C1CC0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C1CC0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-11-22 09:04:01,632:INFO:Checking exceptions
2024-11-22 09:04:01,640:INFO:Preparing display monitor
2024-11-22 09:04:01,733:INFO:Initializing Logistic Regression
2024-11-22 09:04:01,733:INFO:Total runtime is 0.0 minutes
2024-11-22 09:04:01,743:INFO:SubProcess create_model() called ==================================
2024-11-22 09:04:01,744:INFO:Initializing create_model()
2024-11-22 09:04:01,745:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C1CC0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021662C6A050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 09:04:01,745:INFO:Checking exceptions
2024-11-22 09:04:01,746:INFO:Importing libraries
2024-11-22 09:04:01,746:INFO:Copying training dataset
2024-11-22 09:04:01,759:INFO:Defining folds
2024-11-22 09:04:01,760:INFO:Declaring metric variables
2024-11-22 09:04:01,767:INFO:Importing untrained model
2024-11-22 09:04:01,775:INFO:Logistic Regression Imported successfully
2024-11-22 09:04:01,795:INFO:Starting cross validation
2024-11-22 09:04:01,800:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 09:04:02,611:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:02,627:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:02,631:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:02,634:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:02,634:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:02,642:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:02,650:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:02,658:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:02,658:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:02,666:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:02,674:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:02,691:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:03,360:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:03,376:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:03,385:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:03,385:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:03,405:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:03,406:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:03,406:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:03,422:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:03,422:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:03,431:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:03,431:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:03,431:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:03,890:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:03,898:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:03,907:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:03,907:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:03,923:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:03,931:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:03,956:INFO:Calculating mean and std
2024-11-22 09:04:03,956:INFO:Creating metrics dataframe
2024-11-22 09:04:03,964:INFO:Uploading results into container
2024-11-22 09:04:03,964:INFO:Uploading model into container now
2024-11-22 09:04:03,964:INFO:_master_model_container: 1
2024-11-22 09:04:03,964:INFO:_display_container: 2
2024-11-22 09:04:03,972:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-22 09:04:03,972:INFO:create_model() successfully completed......................................
2024-11-22 09:04:04,179:INFO:SubProcess create_model() end ==================================
2024-11-22 09:04:04,179:INFO:Creating metrics dataframe
2024-11-22 09:04:04,207:INFO:Initializing K Neighbors Classifier
2024-11-22 09:04:04,207:INFO:Total runtime is 0.04124138355255127 minutes
2024-11-22 09:04:04,222:INFO:SubProcess create_model() called ==================================
2024-11-22 09:04:04,223:INFO:Initializing create_model()
2024-11-22 09:04:04,223:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C1CC0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021662C6A050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 09:04:04,223:INFO:Checking exceptions
2024-11-22 09:04:04,223:INFO:Importing libraries
2024-11-22 09:04:04,223:INFO:Copying training dataset
2024-11-22 09:04:04,251:INFO:Defining folds
2024-11-22 09:04:04,251:INFO:Declaring metric variables
2024-11-22 09:04:04,266:INFO:Importing untrained model
2024-11-22 09:04:04,282:INFO:K Neighbors Classifier Imported successfully
2024-11-22 09:04:04,309:INFO:Starting cross validation
2024-11-22 09:04:04,315:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 09:04:05,047:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:05,064:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:05,064:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:05,076:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:05,076:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:05,093:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:05,100:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:05,108:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:05,116:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:05,132:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:05,132:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:05,148:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:05,791:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:05,805:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:05,819:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:05,871:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:05,880:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:05,880:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:05,888:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:05,896:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:05,896:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:05,904:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:05,912:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:05,920:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:06,453:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:06,470:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:06,478:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:06,501:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:06,501:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:06,509:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:06,542:INFO:Calculating mean and std
2024-11-22 09:04:06,542:INFO:Creating metrics dataframe
2024-11-22 09:04:06,551:INFO:Uploading results into container
2024-11-22 09:04:06,551:INFO:Uploading model into container now
2024-11-22 09:04:06,551:INFO:_master_model_container: 2
2024-11-22 09:04:06,551:INFO:_display_container: 2
2024-11-22 09:04:06,551:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-11-22 09:04:06,551:INFO:create_model() successfully completed......................................
2024-11-22 09:04:06,747:INFO:SubProcess create_model() end ==================================
2024-11-22 09:04:06,747:INFO:Creating metrics dataframe
2024-11-22 09:04:06,775:INFO:Initializing Naive Bayes
2024-11-22 09:04:06,783:INFO:Total runtime is 0.08403082688649495 minutes
2024-11-22 09:04:06,791:INFO:SubProcess create_model() called ==================================
2024-11-22 09:04:06,791:INFO:Initializing create_model()
2024-11-22 09:04:06,791:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C1CC0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021662C6A050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 09:04:06,791:INFO:Checking exceptions
2024-11-22 09:04:06,791:INFO:Importing libraries
2024-11-22 09:04:06,791:INFO:Copying training dataset
2024-11-22 09:04:06,813:INFO:Defining folds
2024-11-22 09:04:06,814:INFO:Declaring metric variables
2024-11-22 09:04:06,823:INFO:Importing untrained model
2024-11-22 09:04:06,834:INFO:Naive Bayes Imported successfully
2024-11-22 09:04:06,856:INFO:Starting cross validation
2024-11-22 09:04:06,862:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 09:04:07,519:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:07,527:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:07,535:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:07,543:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:07,543:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:07,543:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:07,543:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:07,551:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:07,559:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:07,559:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:07,570:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:07,586:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:08,169:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:08,185:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:08,185:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:08,201:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:08,201:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:08,201:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:08,201:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:08,216:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:08,216:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:08,232:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:08,248:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:08,684:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:08,701:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:08,709:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:08,709:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:08,725:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:08,734:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:08,758:INFO:Calculating mean and std
2024-11-22 09:04:08,758:INFO:Creating metrics dataframe
2024-11-22 09:04:08,767:INFO:Uploading results into container
2024-11-22 09:04:08,767:INFO:Uploading model into container now
2024-11-22 09:04:08,767:INFO:_master_model_container: 3
2024-11-22 09:04:08,767:INFO:_display_container: 2
2024-11-22 09:04:08,767:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-11-22 09:04:08,767:INFO:create_model() successfully completed......................................
2024-11-22 09:04:08,965:INFO:SubProcess create_model() end ==================================
2024-11-22 09:04:08,965:INFO:Creating metrics dataframe
2024-11-22 09:04:08,992:INFO:Initializing Decision Tree Classifier
2024-11-22 09:04:08,992:INFO:Total runtime is 0.12098159392674764 minutes
2024-11-22 09:04:09,009:INFO:SubProcess create_model() called ==================================
2024-11-22 09:04:09,009:INFO:Initializing create_model()
2024-11-22 09:04:09,009:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C1CC0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021662C6A050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 09:04:09,009:INFO:Checking exceptions
2024-11-22 09:04:09,009:INFO:Importing libraries
2024-11-22 09:04:09,009:INFO:Copying training dataset
2024-11-22 09:04:09,035:INFO:Defining folds
2024-11-22 09:04:09,035:INFO:Declaring metric variables
2024-11-22 09:04:09,042:INFO:Importing untrained model
2024-11-22 09:04:09,063:INFO:Decision Tree Classifier Imported successfully
2024-11-22 09:04:09,084:INFO:Starting cross validation
2024-11-22 09:04:09,098:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 09:04:09,757:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:09,775:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:09,775:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:09,791:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:09,791:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:09,791:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:09,791:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:09,799:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:09,807:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:09,807:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:09,815:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:09,823:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:10,427:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:10,438:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:10,446:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:10,454:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:10,454:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:10,462:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:10,470:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:10,470:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:10,478:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:10,478:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:10,494:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:10,502:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:11,031:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:11,047:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:11,047:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:11,056:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:11,056:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:11,064:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:11,097:INFO:Calculating mean and std
2024-11-22 09:04:11,097:INFO:Creating metrics dataframe
2024-11-22 09:04:11,105:INFO:Uploading results into container
2024-11-22 09:04:11,105:INFO:Uploading model into container now
2024-11-22 09:04:11,105:INFO:_master_model_container: 4
2024-11-22 09:04:11,105:INFO:_display_container: 2
2024-11-22 09:04:11,113:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-11-22 09:04:11,114:INFO:create_model() successfully completed......................................
2024-11-22 09:04:11,301:INFO:SubProcess create_model() end ==================================
2024-11-22 09:04:11,301:INFO:Creating metrics dataframe
2024-11-22 09:04:11,352:INFO:Initializing SVM - Linear Kernel
2024-11-22 09:04:11,352:INFO:Total runtime is 0.16032355626424152 minutes
2024-11-22 09:04:11,364:INFO:SubProcess create_model() called ==================================
2024-11-22 09:04:11,364:INFO:Initializing create_model()
2024-11-22 09:04:11,364:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C1CC0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021662C6A050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 09:04:11,364:INFO:Checking exceptions
2024-11-22 09:04:11,364:INFO:Importing libraries
2024-11-22 09:04:11,364:INFO:Copying training dataset
2024-11-22 09:04:11,390:INFO:Defining folds
2024-11-22 09:04:11,390:INFO:Declaring metric variables
2024-11-22 09:04:11,402:INFO:Importing untrained model
2024-11-22 09:04:11,416:INFO:SVM - Linear Kernel Imported successfully
2024-11-22 09:04:11,435:INFO:Starting cross validation
2024-11-22 09:04:11,447:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 09:04:12,113:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:12,137:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:12,145:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:12,145:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:12,157:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:12,165:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:12,165:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:12,173:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:12,173:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:12,173:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:12,187:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:12,187:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:12,814:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:12,822:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:12,830:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:12,830:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:12,838:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:12,838:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:12,838:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:12,846:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:12,854:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:12,862:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:12,862:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:13,363:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:13,371:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:13,379:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:13,379:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:13,387:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:13,397:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:13,429:INFO:Calculating mean and std
2024-11-22 09:04:13,429:INFO:Creating metrics dataframe
2024-11-22 09:04:13,437:INFO:Uploading results into container
2024-11-22 09:04:13,437:INFO:Uploading model into container now
2024-11-22 09:04:13,437:INFO:_master_model_container: 5
2024-11-22 09:04:13,437:INFO:_display_container: 2
2024-11-22 09:04:13,437:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-11-22 09:04:13,446:INFO:create_model() successfully completed......................................
2024-11-22 09:04:13,641:INFO:SubProcess create_model() end ==================================
2024-11-22 09:04:13,641:INFO:Creating metrics dataframe
2024-11-22 09:04:13,674:INFO:Initializing Ridge Classifier
2024-11-22 09:04:13,674:INFO:Total runtime is 0.19902493556340534 minutes
2024-11-22 09:04:13,684:INFO:SubProcess create_model() called ==================================
2024-11-22 09:04:13,685:INFO:Initializing create_model()
2024-11-22 09:04:13,686:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C1CC0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021662C6A050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 09:04:13,686:INFO:Checking exceptions
2024-11-22 09:04:13,686:INFO:Importing libraries
2024-11-22 09:04:13,687:INFO:Copying training dataset
2024-11-22 09:04:13,706:INFO:Defining folds
2024-11-22 09:04:13,706:INFO:Declaring metric variables
2024-11-22 09:04:13,725:INFO:Importing untrained model
2024-11-22 09:04:13,743:INFO:Ridge Classifier Imported successfully
2024-11-22 09:04:13,768:INFO:Starting cross validation
2024-11-22 09:04:13,780:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 09:04:14,454:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:14,464:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:14,464:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:14,480:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:14,480:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:14,480:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:14,489:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:14,489:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:14,497:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:14,497:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:14,505:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:14,513:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:15,127:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:15,143:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:15,143:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:15,143:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:15,153:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:15,154:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:15,154:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:15,154:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:15,162:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:15,162:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:15,170:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:15,178:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:15,597:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:15,605:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:15,613:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:15,613:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:15,622:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:15,630:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:15,655:INFO:Calculating mean and std
2024-11-22 09:04:15,655:INFO:Creating metrics dataframe
2024-11-22 09:04:15,663:INFO:Uploading results into container
2024-11-22 09:04:15,663:INFO:Uploading model into container now
2024-11-22 09:04:15,663:INFO:_master_model_container: 6
2024-11-22 09:04:15,663:INFO:_display_container: 2
2024-11-22 09:04:15,663:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-11-22 09:04:15,663:INFO:create_model() successfully completed......................................
2024-11-22 09:04:15,864:INFO:SubProcess create_model() end ==================================
2024-11-22 09:04:15,864:INFO:Creating metrics dataframe
2024-11-22 09:04:15,897:INFO:Initializing Random Forest Classifier
2024-11-22 09:04:15,897:INFO:Total runtime is 0.23607288996378578 minutes
2024-11-22 09:04:15,907:INFO:SubProcess create_model() called ==================================
2024-11-22 09:04:15,907:INFO:Initializing create_model()
2024-11-22 09:04:15,907:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C1CC0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021662C6A050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 09:04:15,907:INFO:Checking exceptions
2024-11-22 09:04:15,907:INFO:Importing libraries
2024-11-22 09:04:15,907:INFO:Copying training dataset
2024-11-22 09:04:15,926:INFO:Defining folds
2024-11-22 09:04:15,926:INFO:Declaring metric variables
2024-11-22 09:04:15,947:INFO:Importing untrained model
2024-11-22 09:04:15,998:INFO:Random Forest Classifier Imported successfully
2024-11-22 09:04:16,016:INFO:Starting cross validation
2024-11-22 09:04:16,020:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 09:04:17,580:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:17,588:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:17,596:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:17,605:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:17,612:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:17,620:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:17,636:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:17,652:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:17,676:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:17,712:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:17,728:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:17,744:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:19,097:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:19,105:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:19,123:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:19,139:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:19,155:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:19,168:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:19,273:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:19,289:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:19,308:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:19,404:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:19,413:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:19,431:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:20,394:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:20,403:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:20,420:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:20,442:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:20,451:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:20,460:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:20,493:INFO:Calculating mean and std
2024-11-22 09:04:20,494:INFO:Creating metrics dataframe
2024-11-22 09:04:20,503:INFO:Uploading results into container
2024-11-22 09:04:20,503:INFO:Uploading model into container now
2024-11-22 09:04:20,503:INFO:_master_model_container: 7
2024-11-22 09:04:20,503:INFO:_display_container: 2
2024-11-22 09:04:20,503:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-11-22 09:04:20,503:INFO:create_model() successfully completed......................................
2024-11-22 09:04:20,736:INFO:SubProcess create_model() end ==================================
2024-11-22 09:04:20,736:INFO:Creating metrics dataframe
2024-11-22 09:04:20,780:INFO:Initializing Quadratic Discriminant Analysis
2024-11-22 09:04:20,781:INFO:Total runtime is 0.3174730141957601 minutes
2024-11-22 09:04:20,785:INFO:SubProcess create_model() called ==================================
2024-11-22 09:04:20,785:INFO:Initializing create_model()
2024-11-22 09:04:20,785:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C1CC0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021662C6A050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 09:04:20,785:INFO:Checking exceptions
2024-11-22 09:04:20,793:INFO:Importing libraries
2024-11-22 09:04:20,794:INFO:Copying training dataset
2024-11-22 09:04:20,808:INFO:Defining folds
2024-11-22 09:04:20,808:INFO:Declaring metric variables
2024-11-22 09:04:20,821:INFO:Importing untrained model
2024-11-22 09:04:20,831:INFO:Quadratic Discriminant Analysis Imported successfully
2024-11-22 09:04:20,864:INFO:Starting cross validation
2024-11-22 09:04:20,871:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 09:04:21,559:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:21,571:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:21,575:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:21,585:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:21,590:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:21,592:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:21,600:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:21,600:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:21,609:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:21,617:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:21,626:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:21,634:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:22,226:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:22,242:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:22,242:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:22,250:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:22,250:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:22,258:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:22,258:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:22,266:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:22,274:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:22,290:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:22,308:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:22,317:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:22,679:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:22,687:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:22,696:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:22,704:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:22,712:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:22,720:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:22,753:INFO:Calculating mean and std
2024-11-22 09:04:22,753:INFO:Creating metrics dataframe
2024-11-22 09:04:22,768:INFO:Uploading results into container
2024-11-22 09:04:22,771:INFO:Uploading model into container now
2024-11-22 09:04:22,773:INFO:_master_model_container: 8
2024-11-22 09:04:22,774:INFO:_display_container: 2
2024-11-22 09:04:22,775:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-11-22 09:04:22,775:INFO:create_model() successfully completed......................................
2024-11-22 09:04:22,985:INFO:SubProcess create_model() end ==================================
2024-11-22 09:04:22,985:INFO:Creating metrics dataframe
2024-11-22 09:04:23,018:INFO:Initializing Ada Boost Classifier
2024-11-22 09:04:23,018:INFO:Total runtime is 0.354762323697408 minutes
2024-11-22 09:04:23,019:INFO:SubProcess create_model() called ==================================
2024-11-22 09:04:23,028:INFO:Initializing create_model()
2024-11-22 09:04:23,028:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C1CC0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021662C6A050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 09:04:23,028:INFO:Checking exceptions
2024-11-22 09:04:23,028:INFO:Importing libraries
2024-11-22 09:04:23,028:INFO:Copying training dataset
2024-11-22 09:04:23,046:INFO:Defining folds
2024-11-22 09:04:23,046:INFO:Declaring metric variables
2024-11-22 09:04:23,063:INFO:Importing untrained model
2024-11-22 09:04:23,082:INFO:Ada Boost Classifier Imported successfully
2024-11-22 09:04:23,110:INFO:Starting cross validation
2024-11-22 09:04:23,117:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 09:04:23,615:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-22 09:04:23,631:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-22 09:04:23,631:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-22 09:04:23,639:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-22 09:04:24,241:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:24,257:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:24,265:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:24,265:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:24,273:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:24,273:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:24,289:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:24,289:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:24,289:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:24,305:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:24,321:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:24,694:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-22 09:04:24,735:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-22 09:04:24,751:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-22 09:04:24,759:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-22 09:04:25,325:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:25,333:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:25,349:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:25,357:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:25,375:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:25,383:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:25,383:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:25,391:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:25,391:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:25,407:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:25,415:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:25,415:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:25,699:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-22 09:04:25,716:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-22 09:04:26,134:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:26,150:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:26,167:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:26,175:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:26,183:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:26,192:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:26,227:INFO:Calculating mean and std
2024-11-22 09:04:26,227:INFO:Creating metrics dataframe
2024-11-22 09:04:26,235:INFO:Uploading results into container
2024-11-22 09:04:26,235:INFO:Uploading model into container now
2024-11-22 09:04:26,235:INFO:_master_model_container: 9
2024-11-22 09:04:26,235:INFO:_display_container: 2
2024-11-22 09:04:26,244:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-11-22 09:04:26,244:INFO:create_model() successfully completed......................................
2024-11-22 09:04:26,430:INFO:SubProcess create_model() end ==================================
2024-11-22 09:04:26,430:INFO:Creating metrics dataframe
2024-11-22 09:04:26,464:INFO:Initializing Gradient Boosting Classifier
2024-11-22 09:04:26,464:INFO:Total runtime is 0.41218722263971963 minutes
2024-11-22 09:04:26,481:INFO:SubProcess create_model() called ==================================
2024-11-22 09:04:26,482:INFO:Initializing create_model()
2024-11-22 09:04:26,482:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C1CC0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021662C6A050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 09:04:26,482:INFO:Checking exceptions
2024-11-22 09:04:26,482:INFO:Importing libraries
2024-11-22 09:04:26,482:INFO:Copying training dataset
2024-11-22 09:04:26,489:INFO:Defining folds
2024-11-22 09:04:26,489:INFO:Declaring metric variables
2024-11-22 09:04:26,501:INFO:Importing untrained model
2024-11-22 09:04:26,510:INFO:Gradient Boosting Classifier Imported successfully
2024-11-22 09:04:26,534:INFO:Starting cross validation
2024-11-22 09:04:26,536:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 09:04:27,780:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:27,796:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:27,804:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:27,804:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:27,812:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:27,820:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:27,820:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:27,820:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:27,832:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:27,832:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:27,848:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:27,832:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:29,025:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:29,035:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:29,037:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:29,038:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:29,046:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:29,050:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:29,051:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:29,058:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:29,065:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:29,065:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:29,070:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:29,083:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:30,163:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:30,177:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:30,178:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:30,190:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:30,191:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:30,202:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:30,237:INFO:Calculating mean and std
2024-11-22 09:04:30,241:INFO:Creating metrics dataframe
2024-11-22 09:04:30,251:INFO:Uploading results into container
2024-11-22 09:04:30,253:INFO:Uploading model into container now
2024-11-22 09:04:30,254:INFO:_master_model_container: 10
2024-11-22 09:04:30,254:INFO:_display_container: 2
2024-11-22 09:04:30,257:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-11-22 09:04:30,258:INFO:create_model() successfully completed......................................
2024-11-22 09:04:30,449:INFO:SubProcess create_model() end ==================================
2024-11-22 09:04:30,458:INFO:Creating metrics dataframe
2024-11-22 09:04:30,491:INFO:Initializing Linear Discriminant Analysis
2024-11-22 09:04:30,491:INFO:Total runtime is 0.4793039202690124 minutes
2024-11-22 09:04:30,506:INFO:SubProcess create_model() called ==================================
2024-11-22 09:04:30,506:INFO:Initializing create_model()
2024-11-22 09:04:30,506:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C1CC0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021662C6A050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 09:04:30,506:INFO:Checking exceptions
2024-11-22 09:04:30,506:INFO:Importing libraries
2024-11-22 09:04:30,506:INFO:Copying training dataset
2024-11-22 09:04:30,523:INFO:Defining folds
2024-11-22 09:04:30,523:INFO:Declaring metric variables
2024-11-22 09:04:30,528:INFO:Importing untrained model
2024-11-22 09:04:30,544:INFO:Linear Discriminant Analysis Imported successfully
2024-11-22 09:04:30,563:INFO:Starting cross validation
2024-11-22 09:04:30,571:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 09:04:31,240:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:31,250:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:31,258:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:31,258:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:31,266:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:31,266:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:31,258:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:31,266:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:31,282:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:31,282:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:31,282:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:31,317:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:31,868:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:31,885:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:31,900:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:31,900:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:31,916:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:31,926:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:31,942:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:31,950:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:31,966:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:31,982:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:31,998:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:32,010:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:32,357:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:32,373:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:32,390:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:32,390:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:32,398:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:32,415:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:32,431:INFO:Calculating mean and std
2024-11-22 09:04:32,431:INFO:Creating metrics dataframe
2024-11-22 09:04:32,439:INFO:Uploading results into container
2024-11-22 09:04:32,439:INFO:Uploading model into container now
2024-11-22 09:04:32,439:INFO:_master_model_container: 11
2024-11-22 09:04:32,439:INFO:_display_container: 2
2024-11-22 09:04:32,448:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-11-22 09:04:32,449:INFO:create_model() successfully completed......................................
2024-11-22 09:04:32,648:INFO:SubProcess create_model() end ==================================
2024-11-22 09:04:32,648:INFO:Creating metrics dataframe
2024-11-22 09:04:32,681:INFO:Initializing Extra Trees Classifier
2024-11-22 09:04:32,681:INFO:Total runtime is 0.5158013542493184 minutes
2024-11-22 09:04:32,693:INFO:SubProcess create_model() called ==================================
2024-11-22 09:04:32,693:INFO:Initializing create_model()
2024-11-22 09:04:32,693:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C1CC0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021662C6A050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 09:04:32,693:INFO:Checking exceptions
2024-11-22 09:04:32,693:INFO:Importing libraries
2024-11-22 09:04:32,693:INFO:Copying training dataset
2024-11-22 09:04:32,721:INFO:Defining folds
2024-11-22 09:04:32,724:INFO:Declaring metric variables
2024-11-22 09:04:32,738:INFO:Importing untrained model
2024-11-22 09:04:32,752:INFO:Extra Trees Classifier Imported successfully
2024-11-22 09:04:32,777:INFO:Starting cross validation
2024-11-22 09:04:32,784:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 09:04:34,194:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:34,194:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:34,210:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:34,218:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:34,234:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:34,234:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:34,280:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:34,296:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:34,304:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:34,381:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:34,405:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:34,413:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:35,644:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:35,668:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:35,684:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:35,708:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:35,728:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:35,739:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:35,762:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:35,773:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:35,791:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:35,919:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:35,932:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:35,948:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:36,837:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:36,846:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:36,864:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:36,874:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:36,882:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:36,890:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:36,923:INFO:Calculating mean and std
2024-11-22 09:04:36,923:INFO:Creating metrics dataframe
2024-11-22 09:04:36,931:INFO:Uploading results into container
2024-11-22 09:04:36,931:INFO:Uploading model into container now
2024-11-22 09:04:36,931:INFO:_master_model_container: 12
2024-11-22 09:04:36,931:INFO:_display_container: 2
2024-11-22 09:04:36,942:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-11-22 09:04:36,943:INFO:create_model() successfully completed......................................
2024-11-22 09:04:37,154:INFO:SubProcess create_model() end ==================================
2024-11-22 09:04:37,154:INFO:Creating metrics dataframe
2024-11-22 09:04:37,209:INFO:Initializing Light Gradient Boosting Machine
2024-11-22 09:04:37,209:INFO:Total runtime is 0.5912681778271992 minutes
2024-11-22 09:04:37,225:INFO:SubProcess create_model() called ==================================
2024-11-22 09:04:37,225:INFO:Initializing create_model()
2024-11-22 09:04:37,228:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C1CC0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021662C6A050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 09:04:37,228:INFO:Checking exceptions
2024-11-22 09:04:37,229:INFO:Importing libraries
2024-11-22 09:04:37,229:INFO:Copying training dataset
2024-11-22 09:04:37,243:INFO:Defining folds
2024-11-22 09:04:37,243:INFO:Declaring metric variables
2024-11-22 09:04:37,252:INFO:Importing untrained model
2024-11-22 09:04:37,272:INFO:Light Gradient Boosting Machine Imported successfully
2024-11-22 09:04:37,306:INFO:Starting cross validation
2024-11-22 09:04:37,319:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 09:04:38,616:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:38,625:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:38,641:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:38,681:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:38,681:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:38,689:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:38,697:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:38,706:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:38,706:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:38,754:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:38,770:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:38,780:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:39,874:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:39,891:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:39,907:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:39,964:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:39,980:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:39,988:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:39,996:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:40,004:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:40,026:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:40,110:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:40,125:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:40,141:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:40,832:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:40,848:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:40,864:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:40,962:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:40,978:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:41,000:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:41,048:INFO:Calculating mean and std
2024-11-22 09:04:41,052:INFO:Creating metrics dataframe
2024-11-22 09:04:41,060:INFO:Uploading results into container
2024-11-22 09:04:41,060:INFO:Uploading model into container now
2024-11-22 09:04:41,060:INFO:_master_model_container: 13
2024-11-22 09:04:41,060:INFO:_display_container: 2
2024-11-22 09:04:41,060:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-11-22 09:04:41,060:INFO:create_model() successfully completed......................................
2024-11-22 09:04:41,256:INFO:SubProcess create_model() end ==================================
2024-11-22 09:04:41,256:INFO:Creating metrics dataframe
2024-11-22 09:04:41,298:INFO:Initializing Dummy Classifier
2024-11-22 09:04:41,298:INFO:Total runtime is 0.6594202955563863 minutes
2024-11-22 09:04:41,311:INFO:SubProcess create_model() called ==================================
2024-11-22 09:04:41,312:INFO:Initializing create_model()
2024-11-22 09:04:41,312:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C1CC0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021662C6A050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 09:04:41,312:INFO:Checking exceptions
2024-11-22 09:04:41,313:INFO:Importing libraries
2024-11-22 09:04:41,313:INFO:Copying training dataset
2024-11-22 09:04:41,333:INFO:Defining folds
2024-11-22 09:04:41,334:INFO:Declaring metric variables
2024-11-22 09:04:41,347:INFO:Importing untrained model
2024-11-22 09:04:41,365:INFO:Dummy Classifier Imported successfully
2024-11-22 09:04:41,399:INFO:Starting cross validation
2024-11-22 09:04:41,407:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 09:04:42,055:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:42,055:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:42,070:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:42,070:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:42,070:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-22 09:04:42,078:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-22 09:04:42,078:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:42,086:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:42,086:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:42,094:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:42,094:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:42,110:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-22 09:04:42,110:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:42,118:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:42,118:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-22 09:04:42,118:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:42,705:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:42,705:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:42,714:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:42,722:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:42,722:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-22 09:04:42,722:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-22 09:04:42,730:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:42,730:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:42,746:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:42,746:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:42,754:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:42,762:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:42,762:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-22 09:04:42,770:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-22 09:04:42,770:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:42,778:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:43,228:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:43,228:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:43,237:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:43,237:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-22 09:04:43,237:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:43,245:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:43,245:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-22 09:04:43,255:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:43,283:INFO:Calculating mean and std
2024-11-22 09:04:43,286:INFO:Creating metrics dataframe
2024-11-22 09:04:43,295:INFO:Uploading results into container
2024-11-22 09:04:43,295:INFO:Uploading model into container now
2024-11-22 09:04:43,295:INFO:_master_model_container: 14
2024-11-22 09:04:43,295:INFO:_display_container: 2
2024-11-22 09:04:43,295:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-11-22 09:04:43,295:INFO:create_model() successfully completed......................................
2024-11-22 09:04:43,484:INFO:SubProcess create_model() end ==================================
2024-11-22 09:04:43,492:INFO:Creating metrics dataframe
2024-11-22 09:04:43,567:INFO:Initializing create_model()
2024-11-22 09:04:43,567:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C1CC0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 09:04:43,567:INFO:Checking exceptions
2024-11-22 09:04:43,574:INFO:Importing libraries
2024-11-22 09:04:43,574:INFO:Copying training dataset
2024-11-22 09:04:43,595:INFO:Defining folds
2024-11-22 09:04:43,595:INFO:Declaring metric variables
2024-11-22 09:04:43,595:INFO:Importing untrained model
2024-11-22 09:04:43,595:INFO:Declaring custom model
2024-11-22 09:04:43,601:INFO:Logistic Regression Imported successfully
2024-11-22 09:04:43,626:INFO:Cross validation set to False
2024-11-22 09:04:43,626:INFO:Fitting Model
2024-11-22 09:04:43,925:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-22 09:04:43,925:INFO:create_model() successfully completed......................................
2024-11-22 09:04:44,216:INFO:_master_model_container: 14
2024-11-22 09:04:44,217:INFO:_display_container: 2
2024-11-22 09:04:44,220:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-22 09:04:44,220:INFO:compare_models() successfully completed......................................
2024-11-22 09:04:44,221:INFO:Initializing create_model()
2024-11-22 09:04:44,221:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C1CC0>, estimator=svm, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 09:04:44,222:INFO:Checking exceptions
2024-11-22 09:04:44,308:INFO:Importing libraries
2024-11-22 09:04:44,308:INFO:Copying training dataset
2024-11-22 09:04:44,336:INFO:Defining folds
2024-11-22 09:04:44,337:INFO:Declaring metric variables
2024-11-22 09:04:44,352:INFO:Importing untrained model
2024-11-22 09:04:44,366:INFO:SVM - Linear Kernel Imported successfully
2024-11-22 09:04:44,390:INFO:Starting cross validation
2024-11-22 09:04:44,404:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 09:04:45,086:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:45,102:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:45,118:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:45,118:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:45,118:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:45,126:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:45,129:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:45,137:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:45,137:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:45,145:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:45,153:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:45,153:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:45,756:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:45,772:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:45,780:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:45,784:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:45,792:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:45,792:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:45,800:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:45,800:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:45,808:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:45,816:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:45,816:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:45,832:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:46,219:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:46,227:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:46,227:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:46,227:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:46,235:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:46,235:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:04:46,260:INFO:Calculating mean and std
2024-11-22 09:04:46,260:INFO:Creating metrics dataframe
2024-11-22 09:04:46,276:INFO:Finalizing model
2024-11-22 09:04:46,563:INFO:Uploading results into container
2024-11-22 09:04:46,566:INFO:Uploading model into container now
2024-11-22 09:04:46,608:INFO:_master_model_container: 15
2024-11-22 09:04:46,608:INFO:_display_container: 3
2024-11-22 09:04:46,609:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-11-22 09:04:46,609:INFO:create_model() successfully completed......................................
2024-11-22 09:04:46,801:INFO:Initializing tune_model()
2024-11-22 09:04:46,801:INFO:tune_model(estimator=SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C1CC0>)
2024-11-22 09:04:46,801:INFO:Checking exceptions
2024-11-22 09:04:46,874:INFO:Copying training dataset
2024-11-22 09:04:46,886:INFO:Checking base model
2024-11-22 09:04:46,887:INFO:Base model : SVM - Linear Kernel
2024-11-22 09:04:46,897:INFO:Declaring metric variables
2024-11-22 09:04:46,908:INFO:Defining Hyperparameters
2024-11-22 09:04:47,097:INFO:Tuning with n_jobs=-1
2024-11-22 09:04:47,097:INFO:Initializing RandomizedSearchCV
2024-11-22 09:05:03,089:INFO:best_params: {'actual_estimator__penalty': 'l1', 'actual_estimator__learning_rate': 'adaptive', 'actual_estimator__l1_ratio': 0.3900000001, 'actual_estimator__fit_intercept': True, 'actual_estimator__eta0': 0.001, 'actual_estimator__alpha': 0.05}
2024-11-22 09:05:03,091:INFO:Hyperparameter search completed
2024-11-22 09:05:03,091:INFO:SubProcess create_model() called ==================================
2024-11-22 09:05:03,094:INFO:Initializing create_model()
2024-11-22 09:05:03,094:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C1CC0>, estimator=SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002166128A680>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'penalty': 'l1', 'learning_rate': 'adaptive', 'l1_ratio': 0.3900000001, 'fit_intercept': True, 'eta0': 0.001, 'alpha': 0.05})
2024-11-22 09:05:03,094:INFO:Checking exceptions
2024-11-22 09:05:03,094:INFO:Importing libraries
2024-11-22 09:05:03,095:INFO:Copying training dataset
2024-11-22 09:05:03,115:INFO:Defining folds
2024-11-22 09:05:03,115:INFO:Declaring metric variables
2024-11-22 09:05:03,131:INFO:Importing untrained model
2024-11-22 09:05:03,131:INFO:Declaring custom model
2024-11-22 09:05:03,149:INFO:SVM - Linear Kernel Imported successfully
2024-11-22 09:05:03,175:INFO:Starting cross validation
2024-11-22 09:05:03,186:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 09:05:03,932:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:03,932:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:03,941:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:03,941:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:03,949:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:03,957:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:03,957:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:03,957:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:03,965:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:03,973:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:03,973:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:04,611:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:04,627:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:04,627:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:04,627:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:04,627:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:04,642:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:04,642:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:04,642:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:04,642:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:04,642:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:04,642:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:04,658:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:05,111:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:05,120:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:05,120:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:05,128:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:05,128:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:05,139:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:05,172:INFO:Calculating mean and std
2024-11-22 09:05:05,172:INFO:Creating metrics dataframe
2024-11-22 09:05:05,190:INFO:Finalizing model
2024-11-22 09:05:05,497:INFO:Uploading results into container
2024-11-22 09:05:05,501:INFO:Uploading model into container now
2024-11-22 09:05:05,504:INFO:_master_model_container: 16
2024-11-22 09:05:05,504:INFO:_display_container: 4
2024-11-22 09:05:05,505:INFO:SGDClassifier(alpha=0.05, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.3900000001, learning_rate='adaptive', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l1',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-11-22 09:05:05,505:INFO:create_model() successfully completed......................................
2024-11-22 09:05:05,692:INFO:SubProcess create_model() end ==================================
2024-11-22 09:05:05,692:INFO:choose_better activated
2024-11-22 09:05:05,700:INFO:SubProcess create_model() called ==================================
2024-11-22 09:05:05,709:INFO:Initializing create_model()
2024-11-22 09:05:05,709:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C1CC0>, estimator=SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 09:05:05,709:INFO:Checking exceptions
2024-11-22 09:05:05,717:INFO:Importing libraries
2024-11-22 09:05:05,717:INFO:Copying training dataset
2024-11-22 09:05:05,733:INFO:Defining folds
2024-11-22 09:05:05,733:INFO:Declaring metric variables
2024-11-22 09:05:05,733:INFO:Importing untrained model
2024-11-22 09:05:05,733:INFO:Declaring custom model
2024-11-22 09:05:05,733:INFO:SVM - Linear Kernel Imported successfully
2024-11-22 09:05:05,733:INFO:Starting cross validation
2024-11-22 09:05:05,733:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 09:05:06,411:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:06,427:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:06,427:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:06,435:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:06,435:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:06,443:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:06,443:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:06,443:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:06,459:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:06,459:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:06,459:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:06,484:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:07,062:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:07,078:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:07,086:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:07,094:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:07,102:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:07,110:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:07,110:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:07,118:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:07,126:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:07,126:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:07,126:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:07,142:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:07,593:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:07,601:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:07,601:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:07,609:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:07,609:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:07,617:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 09:05:07,659:INFO:Calculating mean and std
2024-11-22 09:05:07,659:INFO:Creating metrics dataframe
2024-11-22 09:05:07,659:INFO:Finalizing model
2024-11-22 09:05:07,960:INFO:Uploading results into container
2024-11-22 09:05:07,960:INFO:Uploading model into container now
2024-11-22 09:05:07,960:INFO:_master_model_container: 17
2024-11-22 09:05:07,960:INFO:_display_container: 5
2024-11-22 09:05:07,960:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-11-22 09:05:07,960:INFO:create_model() successfully completed......................................
2024-11-22 09:05:08,146:INFO:SubProcess create_model() end ==================================
2024-11-22 09:05:08,146:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False) result for Accuracy is 0.8743
2024-11-22 09:05:08,146:INFO:SGDClassifier(alpha=0.05, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.3900000001, learning_rate='adaptive', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l1',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False) result for Accuracy is 0.9114
2024-11-22 09:05:08,154:INFO:SGDClassifier(alpha=0.05, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.3900000001, learning_rate='adaptive', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l1',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False) is best model
2024-11-22 09:05:08,154:INFO:choose_better completed
2024-11-22 09:05:08,172:INFO:_master_model_container: 17
2024-11-22 09:05:08,172:INFO:_display_container: 4
2024-11-22 09:05:08,183:INFO:SGDClassifier(alpha=0.05, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.3900000001, learning_rate='adaptive', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l1',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-11-22 09:05:08,183:INFO:tune_model() successfully completed......................................
2024-11-22 09:05:08,378:INFO:Initializing evaluate_model()
2024-11-22 09:05:08,378:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C1CC0>, estimator=SGDClassifier(alpha=0.05, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.3900000001, learning_rate='adaptive', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l1',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-11-22 09:05:08,427:INFO:Initializing plot_model()
2024-11-22 09:05:08,428:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=SGDClassifier(alpha=0.05, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.3900000001, learning_rate='adaptive', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l1',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C1CC0>, system=True)
2024-11-22 09:05:08,428:INFO:Checking exceptions
2024-11-22 09:05:08,434:INFO:Preloading libraries
2024-11-22 09:05:08,435:INFO:Copying training dataset
2024-11-22 09:05:08,435:INFO:Plot type: pipeline
2024-11-22 09:05:08,772:INFO:Visual Rendered Successfully
2024-11-22 09:05:09,023:INFO:plot_model() successfully completed......................................
2024-11-22 09:05:09,030:INFO:Initializing finalize_model()
2024-11-22 09:05:09,031:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C1CC0>, estimator=SGDClassifier(alpha=0.05, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.3900000001, learning_rate='adaptive', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l1',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-11-22 09:05:09,032:INFO:Finalizing SGDClassifier(alpha=0.05, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.3900000001, learning_rate='adaptive', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l1',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-11-22 09:05:09,047:INFO:Initializing create_model()
2024-11-22 09:05:09,047:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000216526C1CC0>, estimator=SGDClassifier(alpha=0.05, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.3900000001, learning_rate='adaptive', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l1',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 09:05:09,047:INFO:Checking exceptions
2024-11-22 09:05:09,051:INFO:Importing libraries
2024-11-22 09:05:09,051:INFO:Copying training dataset
2024-11-22 09:05:09,052:INFO:Defining folds
2024-11-22 09:05:09,054:INFO:Declaring metric variables
2024-11-22 09:05:09,055:INFO:Importing untrained model
2024-11-22 09:05:09,055:INFO:Declaring custom model
2024-11-22 09:05:09,056:INFO:SVM - Linear Kernel Imported successfully
2024-11-22 09:05:09,063:INFO:Cross validation set to False
2024-11-22 09:05:09,063:INFO:Fitting Model
2024-11-22 09:05:09,758:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['Age'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean')...
                 SGDClassifier(alpha=0.05, average=False, class_weight=None,
                               early_stopping=False, epsilon=0.1, eta0=0.001,
                               fit_intercept=True, l1_ratio=0.3900000001,
                               learning_rate='adaptive', loss='hinge',
                               max_iter=1000, n_iter_no_change=5, n_jobs=-1,
                               penalty='l1', power_t=0.5, random_state=123,
                               shuffle=True, tol=0.001, validation_fraction=0.1,
                               verbose=0, warm_start=False))],
         verbose=False)
2024-11-22 09:05:09,758:INFO:create_model() successfully completed......................................
2024-11-22 09:05:09,978:INFO:_master_model_container: 17
2024-11-22 09:05:09,979:INFO:_display_container: 4
2024-11-22 09:05:10,307:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['Age'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean')...
                 SGDClassifier(alpha=0.05, average=False, class_weight=None,
                               early_stopping=False, epsilon=0.1, eta0=0.001,
                               fit_intercept=True, l1_ratio=0.3900000001,
                               learning_rate='adaptive', loss='hinge',
                               max_iter=1000, n_iter_no_change=5, n_jobs=-1,
                               penalty='l1', power_t=0.5, random_state=123,
                               shuffle=True, tol=0.001, validation_fraction=0.1,
                               verbose=0, warm_start=False))],
         verbose=False)
2024-11-22 09:05:10,307:INFO:finalize_model() successfully completed......................................
2024-11-22 09:05:11,143:INFO:Initializing save_model()
2024-11-22 09:05:11,143:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['Age'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean')...
                 SGDClassifier(alpha=0.05, average=False, class_weight=None,
                               early_stopping=False, epsilon=0.1, eta0=0.001,
                               fit_intercept=True, l1_ratio=0.3900000001,
                               learning_rate='adaptive', loss='hinge',
                               max_iter=1000, n_iter_no_change=5, n_jobs=-1,
                               penalty='l1', power_t=0.5, random_state=123,
                               shuffle=True, tol=0.001, validation_fraction=0.1,
                               verbose=0, warm_start=False))],
         verbose=False), model_name=svm_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\teklu\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['Age'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                                        {'col': 'Hemoptysis',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64},
                                                                        {'col': 'Breathing',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64},
                                                                        {'col': 'Arthritis',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64},
                                                                        {'col': 'Vomiting',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-11-22 09:05:11,143:INFO:Adding model into prep_pipe
2024-11-22 09:05:11,143:WARNING:Only Model saved as it was a pipeline.
2024-11-22 09:05:11,167:INFO:svm_model.pkl saved in current working directory
2024-11-22 09:05:11,512:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['Age'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean')...
                 SGDClassifier(alpha=0.05, average=False, class_weight=None,
                               early_stopping=False, epsilon=0.1, eta0=0.001,
                               fit_intercept=True, l1_ratio=0.3900000001,
                               learning_rate='adaptive', loss='hinge',
                               max_iter=1000, n_iter_no_change=5, n_jobs=-1,
                               penalty='l1', power_t=0.5, random_state=123,
                               shuffle=True, tol=0.001, validation_fraction=0.1,
                               verbose=0, warm_start=False))],
         verbose=False)
2024-11-22 09:05:11,512:INFO:save_model() successfully completed......................................
2024-11-22 09:05:11,717:INFO:Initializing load_model()
2024-11-22 09:05:11,717:INFO:load_model(model_name=svm_model, platform=None, authentication=None, verbose=True)
2024-11-22 11:14:34,908:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 11:14:34,908:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 11:14:34,908:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 11:14:34,908:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 11:14:36,443:INFO:Initializing load_model()
2024-11-22 11:14:36,443:INFO:load_model(model_name=C:\Users\teklu\Desktop\project ILIdata\rf_model.pkl, platform=None, authentication=None, verbose=True)
2024-11-22 11:15:53,238:INFO:Initializing load_model()
2024-11-22 11:15:53,238:INFO:load_model(model_name=C:\Users\teklu\Desktop\projectILIdata\rf_model.pkl, platform=None, authentication=None, verbose=True)
2024-11-22 11:17:04,560:INFO:Initializing load_model()
2024-11-22 11:17:04,560:INFO:load_model(model_name=C:\Users\teklu\Desktop\project ILIdata\rf_model.reg, platform=None, authentication=None, verbose=True)
2024-11-22 11:17:18,526:INFO:Initializing load_model()
2024-11-22 11:17:18,531:INFO:load_model(model_name=C:\Users\teklu\Desktop\project ILIdata\rf_model, platform=None, authentication=None, verbose=True)
2024-11-22 21:16:05,864:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 21:16:05,866:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 21:16:05,867:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 21:16:05,867:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-22 21:16:10,108:INFO:PyCaret ClassificationExperiment
2024-11-22 21:16:10,108:INFO:Logging name: clf-default-name
2024-11-22 21:16:10,109:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-11-22 21:16:10,109:INFO:version 3.3.2
2024-11-22 21:16:10,109:INFO:Initializing setup()
2024-11-22 21:16:10,110:INFO:self.USI: dcb8
2024-11-22 21:16:10,110:INFO:self._variable_keys: {'_ml_usecase', 'USI', 'idx', 'pipeline', 'X', 'fold_generator', 'fold_shuffle_param', 'memory', 'fix_imbalance', 'n_jobs_param', 'gpu_n_jobs_param', 'data', 'exp_name_log', 'y_train', 'target_param', 'html_param', 'X_train', 'fold_groups_param', 'exp_id', '_available_plots', 'y_test', 'y', 'log_plots_param', 'seed', 'logging_param', 'is_multiclass', 'gpu_param', 'X_test'}
2024-11-22 21:16:10,110:INFO:Checking environment
2024-11-22 21:16:10,110:INFO:python_version: 3.10.9
2024-11-22 21:16:10,111:INFO:python_build: ('main', 'Mar  1 2023 18:18:15')
2024-11-22 21:16:10,111:INFO:machine: AMD64
2024-11-22 21:16:10,111:INFO:platform: Windows-10-10.0.19045-SP0
2024-11-22 21:16:10,111:INFO:Memory: svmem(total=17044500480, available=4577665024, percent=73.1, used=12466835456, free=4577665024)
2024-11-22 21:16:10,112:INFO:Physical Core: 2
2024-11-22 21:16:10,112:INFO:Logical Core: 4
2024-11-22 21:16:10,113:INFO:Checking libraries
2024-11-22 21:16:10,113:INFO:System:
2024-11-22 21:16:10,113:INFO:    python: 3.10.9 | packaged by Anaconda, Inc. | (main, Mar  1 2023, 18:18:15) [MSC v.1916 64 bit (AMD64)]
2024-11-22 21:16:10,114:INFO:executable: C:\Users\teklu\anaconda3\python.exe
2024-11-22 21:16:10,114:INFO:   machine: Windows-10-10.0.19045-SP0
2024-11-22 21:16:10,114:INFO:PyCaret required dependencies:
2024-11-22 21:16:13,060:INFO:                 pip: 22.3.1
2024-11-22 21:16:13,060:INFO:          setuptools: 65.6.3
2024-11-22 21:16:13,060:INFO:             pycaret: 3.3.2
2024-11-22 21:16:13,061:INFO:             IPython: 8.10.0
2024-11-22 21:16:13,062:INFO:          ipywidgets: 7.6.5
2024-11-22 21:16:13,062:INFO:                tqdm: 4.64.1
2024-11-22 21:16:13,062:INFO:               numpy: 1.23.5
2024-11-22 21:16:13,062:INFO:              pandas: 1.5.3
2024-11-22 21:16:13,062:INFO:              jinja2: 3.1.2
2024-11-22 21:16:13,062:INFO:               scipy: 1.10.0
2024-11-22 21:16:13,062:INFO:              joblib: 1.3.2
2024-11-22 21:16:13,062:INFO:             sklearn: 1.4.2
2024-11-22 21:16:13,063:INFO:                pyod: 2.0.2
2024-11-22 21:16:13,064:INFO:            imblearn: 0.12.4
2024-11-22 21:16:13,064:INFO:   category_encoders: 2.6.4
2024-11-22 21:16:13,064:INFO:            lightgbm: 4.5.0
2024-11-22 21:16:13,064:INFO:               numba: 0.56.4
2024-11-22 21:16:13,064:INFO:            requests: 2.28.1
2024-11-22 21:16:13,064:INFO:          matplotlib: 3.7.0
2024-11-22 21:16:13,064:INFO:          scikitplot: 0.3.7
2024-11-22 21:16:13,064:INFO:         yellowbrick: 1.5
2024-11-22 21:16:13,064:INFO:              plotly: 5.24.1
2024-11-22 21:16:13,064:INFO:    plotly-resampler: Not installed
2024-11-22 21:16:13,064:INFO:             kaleido: 0.2.1
2024-11-22 21:16:13,064:INFO:           schemdraw: 0.15
2024-11-22 21:16:13,064:INFO:         statsmodels: 0.13.5
2024-11-22 21:16:13,064:INFO:              sktime: 0.26.0
2024-11-22 21:16:13,065:INFO:               tbats: 1.1.3
2024-11-22 21:16:13,065:INFO:            pmdarima: 2.0.4
2024-11-22 21:16:13,065:INFO:              psutil: 5.9.0
2024-11-22 21:16:13,065:INFO:          markupsafe: 2.1.1
2024-11-22 21:16:13,065:INFO:             pickle5: Not installed
2024-11-22 21:16:13,065:INFO:         cloudpickle: 2.0.0
2024-11-22 21:16:13,065:INFO:         deprecation: 2.1.0
2024-11-22 21:16:13,065:INFO:              xxhash: 3.5.0
2024-11-22 21:16:13,066:INFO:           wurlitzer: Not installed
2024-11-22 21:16:13,066:INFO:PyCaret optional dependencies:
2024-11-22 21:16:13,108:INFO:                shap: Not installed
2024-11-22 21:16:13,108:INFO:           interpret: Not installed
2024-11-22 21:16:13,109:INFO:                umap: Not installed
2024-11-22 21:16:13,109:INFO:     ydata_profiling: Not installed
2024-11-22 21:16:13,109:INFO:  explainerdashboard: Not installed
2024-11-22 21:16:13,109:INFO:             autoviz: Not installed
2024-11-22 21:16:13,109:INFO:           fairlearn: Not installed
2024-11-22 21:16:13,109:INFO:          deepchecks: Not installed
2024-11-22 21:16:13,110:INFO:             xgboost: Not installed
2024-11-22 21:16:13,110:INFO:            catboost: Not installed
2024-11-22 21:16:13,110:INFO:              kmodes: Not installed
2024-11-22 21:16:13,110:INFO:             mlxtend: Not installed
2024-11-22 21:16:13,110:INFO:       statsforecast: Not installed
2024-11-22 21:16:13,110:INFO:        tune_sklearn: Not installed
2024-11-22 21:16:13,110:INFO:                 ray: Not installed
2024-11-22 21:16:13,111:INFO:            hyperopt: Not installed
2024-11-22 21:16:13,111:INFO:              optuna: Not installed
2024-11-22 21:16:13,111:INFO:               skopt: Not installed
2024-11-22 21:16:13,111:INFO:              mlflow: Not installed
2024-11-22 21:16:13,112:INFO:              gradio: Not installed
2024-11-22 21:16:13,112:INFO:             fastapi: Not installed
2024-11-22 21:16:13,112:INFO:             uvicorn: Not installed
2024-11-22 21:16:13,112:INFO:              m2cgen: Not installed
2024-11-22 21:16:13,113:INFO:           evidently: Not installed
2024-11-22 21:16:13,113:INFO:               fugue: Not installed
2024-11-22 21:16:13,113:INFO:           streamlit: Not installed
2024-11-22 21:16:13,113:INFO:             prophet: Not installed
2024-11-22 21:16:13,113:INFO:None
2024-11-22 21:16:13,113:INFO:Set up data.
2024-11-22 21:16:13,164:INFO:Set up folding strategy.
2024-11-22 21:16:13,164:INFO:Set up train/test split.
2024-11-22 21:16:13,209:INFO:Set up index.
2024-11-22 21:16:13,212:INFO:Assigning column types.
2024-11-22 21:16:13,221:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-11-22 21:16:13,417:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-22 21:16:13,430:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-22 21:16:13,607:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 21:16:13,608:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 21:16:13,831:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-22 21:16:13,837:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-22 21:16:13,949:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 21:16:13,949:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 21:16:13,950:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-11-22 21:16:14,097:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-22 21:16:14,224:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 21:16:14,225:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 21:16:14,431:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-22 21:16:14,529:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 21:16:14,530:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 21:16:14,531:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-11-22 21:16:14,767:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 21:16:14,768:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 21:16:14,981:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 21:16:14,982:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 21:16:14,990:INFO:Preparing preprocessing pipeline...
2024-11-22 21:16:14,995:INFO:Set up label encoding.
2024-11-22 21:16:14,995:INFO:Set up simple imputation.
2024-11-22 21:16:15,016:INFO:Set up encoding of ordinal features.
2024-11-22 21:16:15,054:INFO:Set up encoding of categorical features.
2024-11-22 21:16:15,443:INFO:Finished creating preprocessing pipeline.
2024-11-22 21:16:15,810:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\teklu\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['Age'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                                        {'col': 'Hemoptysis',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64},
                                                                        {'col': 'Breathing',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64},
                                                                        {'col': 'Arthritis',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64},
                                                                        {'col': 'Vomiting',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False)
2024-11-22 21:16:15,811:INFO:Creating final display dataframe.
2024-11-22 21:16:16,319:INFO:Setup _display_container:                     Description                     Value
0                    Session id                       123
1                        Target           Covid_19_result
2                   Target type                    Binary
3                Target mapping  Negative: 0, Positive: 1
4           Original data shape                (2001, 13)
5        Transformed data shape                (2001, 13)
6   Transformed train set shape                (1400, 13)
7    Transformed test set shape                 (601, 13)
8              Numeric features                         1
9          Categorical features                        11
10                   Preprocess                      True
11              Imputation type                    simple
12           Numeric imputation                      mean
13       Categorical imputation                      mode
14     Maximum one-hot encoding                        25
15              Encoding method                      None
16               Fold Generator           StratifiedKFold
17                  Fold Number                        10
18                     CPU Jobs                        -1
19                      Use GPU                     False
20               Log Experiment                     False
21              Experiment Name          clf-default-name
22                          USI                      dcb8
2024-11-22 21:16:16,686:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 21:16:16,686:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 21:16:16,953:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 21:16:16,953:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-22 21:16:16,957:INFO:setup() successfully completed in 6.89s...............
2024-11-22 21:16:16,958:INFO:Initializing compare_models()
2024-11-22 21:16:16,958:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000232F73E2440>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x00000232F73E2440>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-11-22 21:16:16,959:INFO:Checking exceptions
2024-11-22 21:16:16,972:INFO:Preparing display monitor
2024-11-22 21:16:17,134:INFO:Initializing Logistic Regression
2024-11-22 21:16:17,135:INFO:Total runtime is 1.624027887980143e-05 minutes
2024-11-22 21:16:17,142:INFO:SubProcess create_model() called ==================================
2024-11-22 21:16:17,143:INFO:Initializing create_model()
2024-11-22 21:16:17,143:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000232F73E2440>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000232FF752530>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 21:16:17,143:INFO:Checking exceptions
2024-11-22 21:16:17,144:INFO:Importing libraries
2024-11-22 21:16:17,144:INFO:Copying training dataset
2024-11-22 21:16:17,156:INFO:Defining folds
2024-11-22 21:16:17,156:INFO:Declaring metric variables
2024-11-22 21:16:17,164:INFO:Importing untrained model
2024-11-22 21:16:17,182:INFO:Logistic Regression Imported successfully
2024-11-22 21:16:17,209:INFO:Starting cross validation
2024-11-22 21:16:17,215:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 21:16:30,792:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:30,804:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:30,805:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:30,813:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:30,816:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:30,830:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:30,927:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:30,945:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:30,960:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:31,438:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:31,450:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:31,459:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:31,541:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:31,555:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:31,565:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:31,591:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:31,602:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:31,612:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:31,666:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:31,679:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:31,695:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:32,251:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:32,272:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:32,284:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:32,294:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:32,297:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:32,306:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:32,308:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:32,318:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:32,321:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:32,352:INFO:Calculating mean and std
2024-11-22 21:16:32,355:INFO:Creating metrics dataframe
2024-11-22 21:16:32,368:INFO:Uploading results into container
2024-11-22 21:16:32,369:INFO:Uploading model into container now
2024-11-22 21:16:32,370:INFO:_master_model_container: 1
2024-11-22 21:16:32,370:INFO:_display_container: 2
2024-11-22 21:16:32,371:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-22 21:16:32,372:INFO:create_model() successfully completed......................................
2024-11-22 21:16:32,515:INFO:SubProcess create_model() end ==================================
2024-11-22 21:16:32,515:INFO:Creating metrics dataframe
2024-11-22 21:16:32,550:INFO:Initializing K Neighbors Classifier
2024-11-22 21:16:32,550:INFO:Total runtime is 0.2569472312927246 minutes
2024-11-22 21:16:32,565:INFO:SubProcess create_model() called ==================================
2024-11-22 21:16:32,566:INFO:Initializing create_model()
2024-11-22 21:16:32,567:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000232F73E2440>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000232FF752530>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 21:16:32,567:INFO:Checking exceptions
2024-11-22 21:16:32,568:INFO:Importing libraries
2024-11-22 21:16:32,568:INFO:Copying training dataset
2024-11-22 21:16:32,592:INFO:Defining folds
2024-11-22 21:16:32,592:INFO:Declaring metric variables
2024-11-22 21:16:32,613:INFO:Importing untrained model
2024-11-22 21:16:32,637:INFO:K Neighbors Classifier Imported successfully
2024-11-22 21:16:32,670:INFO:Starting cross validation
2024-11-22 21:16:32,676:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 21:16:33,416:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:33,434:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:33,434:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:33,439:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:33,443:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:33,444:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:33,451:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:33,452:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:33,455:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:33,455:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:33,464:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:33,475:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:34,179:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:34,191:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:34,206:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:34,216:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:34,220:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:34,226:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:34,229:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:34,237:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:34,239:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:34,247:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:34,258:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:34,273:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:34,762:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:34,775:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:34,787:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:34,790:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:34,801:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:34,812:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:34,838:INFO:Calculating mean and std
2024-11-22 21:16:34,840:INFO:Creating metrics dataframe
2024-11-22 21:16:34,850:INFO:Uploading results into container
2024-11-22 21:16:34,851:INFO:Uploading model into container now
2024-11-22 21:16:34,852:INFO:_master_model_container: 2
2024-11-22 21:16:34,852:INFO:_display_container: 2
2024-11-22 21:16:34,853:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-11-22 21:16:34,853:INFO:create_model() successfully completed......................................
2024-11-22 21:16:35,010:INFO:SubProcess create_model() end ==================================
2024-11-22 21:16:35,011:INFO:Creating metrics dataframe
2024-11-22 21:16:35,066:INFO:Initializing Naive Bayes
2024-11-22 21:16:35,067:INFO:Total runtime is 0.2988817930221558 minutes
2024-11-22 21:16:35,084:INFO:SubProcess create_model() called ==================================
2024-11-22 21:16:35,085:INFO:Initializing create_model()
2024-11-22 21:16:35,086:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000232F73E2440>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000232FF752530>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 21:16:35,086:INFO:Checking exceptions
2024-11-22 21:16:35,087:INFO:Importing libraries
2024-11-22 21:16:35,087:INFO:Copying training dataset
2024-11-22 21:16:35,108:INFO:Defining folds
2024-11-22 21:16:35,109:INFO:Declaring metric variables
2024-11-22 21:16:35,147:INFO:Importing untrained model
2024-11-22 21:16:35,155:INFO:Naive Bayes Imported successfully
2024-11-22 21:16:35,183:INFO:Starting cross validation
2024-11-22 21:16:35,190:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 21:16:35,876:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:35,889:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:35,894:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:35,906:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:35,907:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:35,914:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:35,916:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:35,919:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:35,930:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:35,938:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:35,942:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:35,952:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:36,449:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:36,468:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:36,477:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:36,477:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:36,496:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:36,498:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:36,508:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:36,510:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:36,511:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:36,523:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:36,527:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:36,533:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:37,039:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:37,048:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:37,055:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:37,060:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:37,069:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:37,080:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:37,110:INFO:Calculating mean and std
2024-11-22 21:16:37,112:INFO:Creating metrics dataframe
2024-11-22 21:16:37,122:INFO:Uploading results into container
2024-11-22 21:16:37,124:INFO:Uploading model into container now
2024-11-22 21:16:37,126:INFO:_master_model_container: 3
2024-11-22 21:16:37,126:INFO:_display_container: 2
2024-11-22 21:16:37,127:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-11-22 21:16:37,127:INFO:create_model() successfully completed......................................
2024-11-22 21:16:37,281:INFO:SubProcess create_model() end ==================================
2024-11-22 21:16:37,282:INFO:Creating metrics dataframe
2024-11-22 21:16:37,316:INFO:Initializing Decision Tree Classifier
2024-11-22 21:16:37,317:INFO:Total runtime is 0.33638936281204224 minutes
2024-11-22 21:16:37,327:INFO:SubProcess create_model() called ==================================
2024-11-22 21:16:37,328:INFO:Initializing create_model()
2024-11-22 21:16:37,328:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000232F73E2440>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000232FF752530>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 21:16:37,328:INFO:Checking exceptions
2024-11-22 21:16:37,328:INFO:Importing libraries
2024-11-22 21:16:37,329:INFO:Copying training dataset
2024-11-22 21:16:37,350:INFO:Defining folds
2024-11-22 21:16:37,350:INFO:Declaring metric variables
2024-11-22 21:16:37,369:INFO:Importing untrained model
2024-11-22 21:16:37,385:INFO:Decision Tree Classifier Imported successfully
2024-11-22 21:16:37,412:INFO:Starting cross validation
2024-11-22 21:16:37,423:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 21:16:38,055:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:38,065:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:38,065:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:38,068:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:38,073:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:38,073:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:38,078:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:38,081:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:38,082:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:38,086:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:38,093:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:38,664:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:38,670:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:38,677:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:38,679:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:38,690:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:38,694:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:38,705:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:38,708:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:38,718:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:38,720:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:38,735:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:38,739:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:39,220:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:39,231:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:39,237:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:39,241:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:39,248:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:39,260:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:39,297:INFO:Calculating mean and std
2024-11-22 21:16:39,300:INFO:Creating metrics dataframe
2024-11-22 21:16:39,310:INFO:Uploading results into container
2024-11-22 21:16:39,311:INFO:Uploading model into container now
2024-11-22 21:16:39,312:INFO:_master_model_container: 4
2024-11-22 21:16:39,312:INFO:_display_container: 2
2024-11-22 21:16:39,313:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-11-22 21:16:39,315:INFO:create_model() successfully completed......................................
2024-11-22 21:16:39,478:INFO:SubProcess create_model() end ==================================
2024-11-22 21:16:39,478:INFO:Creating metrics dataframe
2024-11-22 21:16:39,518:INFO:Initializing SVM - Linear Kernel
2024-11-22 21:16:39,518:INFO:Total runtime is 0.3730823437372843 minutes
2024-11-22 21:16:39,535:INFO:SubProcess create_model() called ==================================
2024-11-22 21:16:39,536:INFO:Initializing create_model()
2024-11-22 21:16:39,537:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000232F73E2440>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000232FF752530>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 21:16:39,538:INFO:Checking exceptions
2024-11-22 21:16:39,538:INFO:Importing libraries
2024-11-22 21:16:39,539:INFO:Copying training dataset
2024-11-22 21:16:39,571:INFO:Defining folds
2024-11-22 21:16:39,572:INFO:Declaring metric variables
2024-11-22 21:16:39,595:INFO:Importing untrained model
2024-11-22 21:16:39,617:INFO:SVM - Linear Kernel Imported successfully
2024-11-22 21:16:39,636:INFO:Starting cross validation
2024-11-22 21:16:39,642:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 21:16:40,283:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:40,290:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:40,297:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:40,304:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:40,307:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:40,318:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:40,319:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:40,319:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:40,334:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:40,343:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:40,345:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:40,354:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:40,927:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:40,930:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:40,936:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:40,939:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:40,945:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:40,961:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:40,963:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:40,967:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:40,976:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:40,977:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:40,987:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:40,999:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:41,513:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:41,525:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:41,527:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:41,535:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:41,538:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:41,550:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:41,577:INFO:Calculating mean and std
2024-11-22 21:16:41,581:INFO:Creating metrics dataframe
2024-11-22 21:16:41,593:INFO:Uploading results into container
2024-11-22 21:16:41,594:INFO:Uploading model into container now
2024-11-22 21:16:41,595:INFO:_master_model_container: 5
2024-11-22 21:16:41,595:INFO:_display_container: 2
2024-11-22 21:16:41,596:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-11-22 21:16:41,597:INFO:create_model() successfully completed......................................
2024-11-22 21:16:41,748:INFO:SubProcess create_model() end ==================================
2024-11-22 21:16:41,749:INFO:Creating metrics dataframe
2024-11-22 21:16:41,794:INFO:Initializing Ridge Classifier
2024-11-22 21:16:41,794:INFO:Total runtime is 0.4110155900319417 minutes
2024-11-22 21:16:41,814:INFO:SubProcess create_model() called ==================================
2024-11-22 21:16:41,815:INFO:Initializing create_model()
2024-11-22 21:16:41,816:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000232F73E2440>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000232FF752530>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 21:16:41,816:INFO:Checking exceptions
2024-11-22 21:16:41,817:INFO:Importing libraries
2024-11-22 21:16:41,817:INFO:Copying training dataset
2024-11-22 21:16:41,853:INFO:Defining folds
2024-11-22 21:16:41,854:INFO:Declaring metric variables
2024-11-22 21:16:41,873:INFO:Importing untrained model
2024-11-22 21:16:41,886:INFO:Ridge Classifier Imported successfully
2024-11-22 21:16:41,916:INFO:Starting cross validation
2024-11-22 21:16:41,922:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 21:16:42,674:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:42,678:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:42,685:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:42,691:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:42,694:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:42,696:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:42,705:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:42,708:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:42,708:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:42,720:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:42,725:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:42,731:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:43,238:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:43,248:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:43,248:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:43,254:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:43,260:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:43,260:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:43,271:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:43,273:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:43,285:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:43,303:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:43,317:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:43,329:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:43,776:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:43,786:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:43,787:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:43,796:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:43,796:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:43,805:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:43,827:INFO:Calculating mean and std
2024-11-22 21:16:43,830:INFO:Creating metrics dataframe
2024-11-22 21:16:43,841:INFO:Uploading results into container
2024-11-22 21:16:43,842:INFO:Uploading model into container now
2024-11-22 21:16:43,844:INFO:_master_model_container: 6
2024-11-22 21:16:43,844:INFO:_display_container: 2
2024-11-22 21:16:43,846:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-11-22 21:16:43,846:INFO:create_model() successfully completed......................................
2024-11-22 21:16:43,994:INFO:SubProcess create_model() end ==================================
2024-11-22 21:16:43,995:INFO:Creating metrics dataframe
2024-11-22 21:16:44,034:INFO:Initializing Random Forest Classifier
2024-11-22 21:16:44,035:INFO:Total runtime is 0.44836493333180744 minutes
2024-11-22 21:16:44,046:INFO:SubProcess create_model() called ==================================
2024-11-22 21:16:44,047:INFO:Initializing create_model()
2024-11-22 21:16:44,048:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000232F73E2440>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000232FF752530>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 21:16:44,048:INFO:Checking exceptions
2024-11-22 21:16:44,048:INFO:Importing libraries
2024-11-22 21:16:44,048:INFO:Copying training dataset
2024-11-22 21:16:44,069:INFO:Defining folds
2024-11-22 21:16:44,069:INFO:Declaring metric variables
2024-11-22 21:16:44,089:INFO:Importing untrained model
2024-11-22 21:16:44,116:INFO:Random Forest Classifier Imported successfully
2024-11-22 21:16:44,145:INFO:Starting cross validation
2024-11-22 21:16:44,154:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 21:16:45,558:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:45,565:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:45,577:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:45,578:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:45,589:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:45,590:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:45,593:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:45,602:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:45,614:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:45,615:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:45,625:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:45,638:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:46,894:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:46,910:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:46,913:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:46,924:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:46,926:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:46,935:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:46,960:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:46,974:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:46,991:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:47,106:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:47,117:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:47,129:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:48,183:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:48,194:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:48,208:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:48,214:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:48,228:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:48,240:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:48,257:INFO:Calculating mean and std
2024-11-22 21:16:48,260:INFO:Creating metrics dataframe
2024-11-22 21:16:48,270:INFO:Uploading results into container
2024-11-22 21:16:48,273:INFO:Uploading model into container now
2024-11-22 21:16:48,274:INFO:_master_model_container: 7
2024-11-22 21:16:48,274:INFO:_display_container: 2
2024-11-22 21:16:48,276:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-11-22 21:16:48,276:INFO:create_model() successfully completed......................................
2024-11-22 21:16:48,429:INFO:SubProcess create_model() end ==================================
2024-11-22 21:16:48,429:INFO:Creating metrics dataframe
2024-11-22 21:16:48,468:INFO:Initializing Quadratic Discriminant Analysis
2024-11-22 21:16:48,468:INFO:Total runtime is 0.5222474932670593 minutes
2024-11-22 21:16:48,485:INFO:SubProcess create_model() called ==================================
2024-11-22 21:16:48,487:INFO:Initializing create_model()
2024-11-22 21:16:48,488:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000232F73E2440>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000232FF752530>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 21:16:48,488:INFO:Checking exceptions
2024-11-22 21:16:48,490:INFO:Importing libraries
2024-11-22 21:16:48,490:INFO:Copying training dataset
2024-11-22 21:16:48,512:INFO:Defining folds
2024-11-22 21:16:48,512:INFO:Declaring metric variables
2024-11-22 21:16:48,535:INFO:Importing untrained model
2024-11-22 21:16:48,578:INFO:Quadratic Discriminant Analysis Imported successfully
2024-11-22 21:16:48,611:INFO:Starting cross validation
2024-11-22 21:16:48,625:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 21:16:49,363:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:49,364:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:49,374:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:49,377:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:49,380:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:49,385:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:49,386:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:49,388:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:49,394:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:49,403:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:49,404:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:49,421:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:49,957:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:49,972:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:49,977:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:49,982:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:49,985:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:49,991:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:50,004:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:50,015:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:50,027:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:50,016:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:50,042:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:50,043:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:50,575:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:50,578:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:50,588:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:50,592:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:50,603:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:50,604:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:50,636:INFO:Calculating mean and std
2024-11-22 21:16:50,639:INFO:Creating metrics dataframe
2024-11-22 21:16:50,649:INFO:Uploading results into container
2024-11-22 21:16:50,650:INFO:Uploading model into container now
2024-11-22 21:16:50,651:INFO:_master_model_container: 8
2024-11-22 21:16:50,652:INFO:_display_container: 2
2024-11-22 21:16:50,653:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-11-22 21:16:50,654:INFO:create_model() successfully completed......................................
2024-11-22 21:16:50,919:INFO:SubProcess create_model() end ==================================
2024-11-22 21:16:50,919:INFO:Creating metrics dataframe
2024-11-22 21:16:50,965:INFO:Initializing Ada Boost Classifier
2024-11-22 21:16:50,965:INFO:Total runtime is 0.5638517896334331 minutes
2024-11-22 21:16:50,981:INFO:SubProcess create_model() called ==================================
2024-11-22 21:16:50,983:INFO:Initializing create_model()
2024-11-22 21:16:50,984:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000232F73E2440>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000232FF752530>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 21:16:50,984:INFO:Checking exceptions
2024-11-22 21:16:50,984:INFO:Importing libraries
2024-11-22 21:16:50,985:INFO:Copying training dataset
2024-11-22 21:16:51,014:INFO:Defining folds
2024-11-22 21:16:51,015:INFO:Declaring metric variables
2024-11-22 21:16:51,046:INFO:Importing untrained model
2024-11-22 21:16:51,085:INFO:Ada Boost Classifier Imported successfully
2024-11-22 21:16:51,150:INFO:Starting cross validation
2024-11-22 21:16:51,175:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 21:16:52,018:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-22 21:16:52,051:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-22 21:16:52,053:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-22 21:16:52,053:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-22 21:16:52,739:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:52,757:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:52,773:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:52,820:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:52,831:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:52,847:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:52,855:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:52,857:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:52,865:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:52,868:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:52,869:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:52,877:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:53,560:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-22 21:16:53,623:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-22 21:16:53,648:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-22 21:16:53,669:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-22 21:16:54,280:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:54,292:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:54,295:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:54,305:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:54,308:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:54,317:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:54,322:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:54,335:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:54,349:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:54,352:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:54,363:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:54,374:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:54,845:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-22 21:16:54,875:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-22 21:16:55,515:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:55,525:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:55,533:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:55,534:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:55,543:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:55,552:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:55,577:INFO:Calculating mean and std
2024-11-22 21:16:55,580:INFO:Creating metrics dataframe
2024-11-22 21:16:55,589:INFO:Uploading results into container
2024-11-22 21:16:55,591:INFO:Uploading model into container now
2024-11-22 21:16:55,592:INFO:_master_model_container: 9
2024-11-22 21:16:55,592:INFO:_display_container: 2
2024-11-22 21:16:55,593:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-11-22 21:16:55,594:INFO:create_model() successfully completed......................................
2024-11-22 21:16:55,858:INFO:SubProcess create_model() end ==================================
2024-11-22 21:16:55,858:INFO:Creating metrics dataframe
2024-11-22 21:16:55,921:INFO:Initializing Gradient Boosting Classifier
2024-11-22 21:16:55,922:INFO:Total runtime is 0.6464600165685018 minutes
2024-11-22 21:16:55,946:INFO:SubProcess create_model() called ==================================
2024-11-22 21:16:55,948:INFO:Initializing create_model()
2024-11-22 21:16:55,948:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000232F73E2440>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000232FF752530>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 21:16:55,948:INFO:Checking exceptions
2024-11-22 21:16:55,949:INFO:Importing libraries
2024-11-22 21:16:55,952:INFO:Copying training dataset
2024-11-22 21:16:56,018:INFO:Defining folds
2024-11-22 21:16:56,019:INFO:Declaring metric variables
2024-11-22 21:16:56,053:INFO:Importing untrained model
2024-11-22 21:16:56,071:INFO:Gradient Boosting Classifier Imported successfully
2024-11-22 21:16:56,094:INFO:Starting cross validation
2024-11-22 21:16:56,113:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 21:16:57,566:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:57,574:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:57,605:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:57,613:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:57,623:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:57,625:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:57,682:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:57,698:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:57,728:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:57,740:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:57,758:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:57,767:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:58,818:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:58,828:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:58,842:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:58,852:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:58,877:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:58,888:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:58,920:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:58,928:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:58,936:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:58,946:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:58,948:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:58,962:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:59,872:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:59,882:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:59,892:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:59,905:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:59,914:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:59,931:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:16:59,980:INFO:Calculating mean and std
2024-11-22 21:16:59,984:INFO:Creating metrics dataframe
2024-11-22 21:17:00,027:INFO:Uploading results into container
2024-11-22 21:17:00,032:INFO:Uploading model into container now
2024-11-22 21:17:00,038:INFO:_master_model_container: 10
2024-11-22 21:17:00,039:INFO:_display_container: 2
2024-11-22 21:17:00,043:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-11-22 21:17:00,043:INFO:create_model() successfully completed......................................
2024-11-22 21:17:00,201:INFO:SubProcess create_model() end ==================================
2024-11-22 21:17:00,201:INFO:Creating metrics dataframe
2024-11-22 21:17:00,241:INFO:Initializing Linear Discriminant Analysis
2024-11-22 21:17:00,241:INFO:Total runtime is 0.7184498031934102 minutes
2024-11-22 21:17:00,256:INFO:SubProcess create_model() called ==================================
2024-11-22 21:17:00,257:INFO:Initializing create_model()
2024-11-22 21:17:00,257:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000232F73E2440>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000232FF752530>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 21:17:00,258:INFO:Checking exceptions
2024-11-22 21:17:00,259:INFO:Importing libraries
2024-11-22 21:17:00,259:INFO:Copying training dataset
2024-11-22 21:17:00,280:INFO:Defining folds
2024-11-22 21:17:00,281:INFO:Declaring metric variables
2024-11-22 21:17:00,295:INFO:Importing untrained model
2024-11-22 21:17:00,317:INFO:Linear Discriminant Analysis Imported successfully
2024-11-22 21:17:00,354:INFO:Starting cross validation
2024-11-22 21:17:00,363:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 21:17:01,040:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:01,052:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:01,057:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:01,064:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:01,066:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:01,072:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:01,074:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:01,079:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:01,085:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:01,088:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:01,097:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:01,106:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:01,639:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:01,649:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:01,657:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:01,658:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:01,658:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:01,666:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:01,668:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:01,668:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:01,677:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:01,677:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:01,687:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:01,688:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:02,228:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:02,241:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:02,248:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:02,254:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:02,260:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:02,272:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:02,297:INFO:Calculating mean and std
2024-11-22 21:17:02,299:INFO:Creating metrics dataframe
2024-11-22 21:17:02,309:INFO:Uploading results into container
2024-11-22 21:17:02,310:INFO:Uploading model into container now
2024-11-22 21:17:02,311:INFO:_master_model_container: 11
2024-11-22 21:17:02,312:INFO:_display_container: 2
2024-11-22 21:17:02,313:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-11-22 21:17:02,313:INFO:create_model() successfully completed......................................
2024-11-22 21:17:02,479:INFO:SubProcess create_model() end ==================================
2024-11-22 21:17:02,480:INFO:Creating metrics dataframe
2024-11-22 21:17:02,530:INFO:Initializing Extra Trees Classifier
2024-11-22 21:17:02,531:INFO:Total runtime is 0.7566178520520528 minutes
2024-11-22 21:17:02,545:INFO:SubProcess create_model() called ==================================
2024-11-22 21:17:02,546:INFO:Initializing create_model()
2024-11-22 21:17:02,546:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000232F73E2440>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000232FF752530>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 21:17:02,547:INFO:Checking exceptions
2024-11-22 21:17:02,547:INFO:Importing libraries
2024-11-22 21:17:02,547:INFO:Copying training dataset
2024-11-22 21:17:02,577:INFO:Defining folds
2024-11-22 21:17:02,578:INFO:Declaring metric variables
2024-11-22 21:17:02,622:INFO:Importing untrained model
2024-11-22 21:17:02,630:INFO:Extra Trees Classifier Imported successfully
2024-11-22 21:17:02,648:INFO:Starting cross validation
2024-11-22 21:17:02,655:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 21:17:03,997:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:04,008:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:04,021:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:04,029:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:04,037:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:04,040:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:04,043:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:04,049:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:04,058:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:04,059:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:04,071:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:04,084:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:05,295:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:05,304:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:05,309:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:05,317:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:05,321:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:05,327:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:05,338:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:05,341:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:05,352:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:05,495:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:05,504:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:05,513:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:06,425:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:06,438:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:06,453:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:06,505:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:06,515:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:06,525:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:06,546:INFO:Calculating mean and std
2024-11-22 21:17:06,549:INFO:Creating metrics dataframe
2024-11-22 21:17:06,558:INFO:Uploading results into container
2024-11-22 21:17:06,559:INFO:Uploading model into container now
2024-11-22 21:17:06,560:INFO:_master_model_container: 12
2024-11-22 21:17:06,560:INFO:_display_container: 2
2024-11-22 21:17:06,563:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-11-22 21:17:06,564:INFO:create_model() successfully completed......................................
2024-11-22 21:17:06,740:INFO:SubProcess create_model() end ==================================
2024-11-22 21:17:06,742:INFO:Creating metrics dataframe
2024-11-22 21:17:06,789:INFO:Initializing Light Gradient Boosting Machine
2024-11-22 21:17:06,790:INFO:Total runtime is 0.8276054382324218 minutes
2024-11-22 21:17:06,805:INFO:SubProcess create_model() called ==================================
2024-11-22 21:17:06,806:INFO:Initializing create_model()
2024-11-22 21:17:06,806:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000232F73E2440>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000232FF752530>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 21:17:06,807:INFO:Checking exceptions
2024-11-22 21:17:06,808:INFO:Importing libraries
2024-11-22 21:17:06,808:INFO:Copying training dataset
2024-11-22 21:17:06,834:INFO:Defining folds
2024-11-22 21:17:06,834:INFO:Declaring metric variables
2024-11-22 21:17:06,853:INFO:Importing untrained model
2024-11-22 21:17:06,875:INFO:Light Gradient Boosting Machine Imported successfully
2024-11-22 21:17:06,931:INFO:Starting cross validation
2024-11-22 21:17:06,957:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 21:17:08,120:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:08,128:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:08,131:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:08,139:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:08,140:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:08,154:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:08,267:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:08,276:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:08,289:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:08,358:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:08,370:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:08,380:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:09,342:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:09,351:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:09,361:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:09,385:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:09,400:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:09,409:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:09,467:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:09,480:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:09,495:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:09,636:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:09,648:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:09,657:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:10,157:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:10,167:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:10,178:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:10,242:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:10,253:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:10,265:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:10,284:INFO:Calculating mean and std
2024-11-22 21:17:10,288:INFO:Creating metrics dataframe
2024-11-22 21:17:10,304:INFO:Uploading results into container
2024-11-22 21:17:10,307:INFO:Uploading model into container now
2024-11-22 21:17:10,308:INFO:_master_model_container: 13
2024-11-22 21:17:10,308:INFO:_display_container: 2
2024-11-22 21:17:10,310:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-11-22 21:17:10,310:INFO:create_model() successfully completed......................................
2024-11-22 21:17:10,460:INFO:SubProcess create_model() end ==================================
2024-11-22 21:17:10,460:INFO:Creating metrics dataframe
2024-11-22 21:17:10,501:INFO:Initializing Dummy Classifier
2024-11-22 21:17:10,502:INFO:Total runtime is 0.889453907807668 minutes
2024-11-22 21:17:10,511:INFO:SubProcess create_model() called ==================================
2024-11-22 21:17:10,512:INFO:Initializing create_model()
2024-11-22 21:17:10,513:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000232F73E2440>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000232FF752530>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 21:17:10,513:INFO:Checking exceptions
2024-11-22 21:17:10,515:INFO:Importing libraries
2024-11-22 21:17:10,515:INFO:Copying training dataset
2024-11-22 21:17:10,536:INFO:Defining folds
2024-11-22 21:17:10,538:INFO:Declaring metric variables
2024-11-22 21:17:10,563:INFO:Importing untrained model
2024-11-22 21:17:10,594:INFO:Dummy Classifier Imported successfully
2024-11-22 21:17:10,619:INFO:Starting cross validation
2024-11-22 21:17:10,622:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 21:17:11,237:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:11,246:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:11,249:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-22 21:17:11,254:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:11,262:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:11,267:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:11,269:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:11,278:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:11,280:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:11,286:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:11,286:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-22 21:17:11,291:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-22 21:17:11,294:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:11,297:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:11,301:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-22 21:17:11,307:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:11,793:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:11,809:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:11,815:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-22 21:17:11,821:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:11,823:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:11,833:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:11,838:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-22 21:17:11,843:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:11,854:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:11,856:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:11,863:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:11,867:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-22 21:17:11,874:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:11,876:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:11,887:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-22 21:17:11,892:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:12,345:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:12,359:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:12,366:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-22 21:17:12,373:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:12,384:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:12,397:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:12,400:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-22 21:17:12,405:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:12,421:INFO:Calculating mean and std
2024-11-22 21:17:12,424:INFO:Creating metrics dataframe
2024-11-22 21:17:12,444:INFO:Uploading results into container
2024-11-22 21:17:12,446:INFO:Uploading model into container now
2024-11-22 21:17:12,447:INFO:_master_model_container: 14
2024-11-22 21:17:12,447:INFO:_display_container: 2
2024-11-22 21:17:12,448:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-11-22 21:17:12,448:INFO:create_model() successfully completed......................................
2024-11-22 21:17:12,621:INFO:SubProcess create_model() end ==================================
2024-11-22 21:17:12,621:INFO:Creating metrics dataframe
2024-11-22 21:17:12,691:INFO:Initializing create_model()
2024-11-22 21:17:12,692:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000232F73E2440>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 21:17:12,692:INFO:Checking exceptions
2024-11-22 21:17:12,699:INFO:Importing libraries
2024-11-22 21:17:12,700:INFO:Copying training dataset
2024-11-22 21:17:12,743:INFO:Defining folds
2024-11-22 21:17:12,743:INFO:Declaring metric variables
2024-11-22 21:17:12,744:INFO:Importing untrained model
2024-11-22 21:17:12,744:INFO:Declaring custom model
2024-11-22 21:17:12,745:INFO:Logistic Regression Imported successfully
2024-11-22 21:17:12,749:INFO:Cross validation set to False
2024-11-22 21:17:12,749:INFO:Fitting Model
2024-11-22 21:17:13,271:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-22 21:17:13,271:INFO:create_model() successfully completed......................................
2024-11-22 21:17:13,584:INFO:_master_model_container: 14
2024-11-22 21:17:13,585:INFO:_display_container: 2
2024-11-22 21:17:13,585:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-22 21:17:13,585:INFO:compare_models() successfully completed......................................
2024-11-22 21:17:13,586:INFO:Initializing create_model()
2024-11-22 21:17:13,586:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000232F73E2440>, estimator=rf, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 21:17:13,586:INFO:Checking exceptions
2024-11-22 21:17:13,704:INFO:Importing libraries
2024-11-22 21:17:13,704:INFO:Copying training dataset
2024-11-22 21:17:13,718:INFO:Defining folds
2024-11-22 21:17:13,718:INFO:Declaring metric variables
2024-11-22 21:17:13,728:INFO:Importing untrained model
2024-11-22 21:17:13,738:INFO:Random Forest Classifier Imported successfully
2024-11-22 21:17:13,756:INFO:Starting cross validation
2024-11-22 21:17:13,760:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 21:17:15,113:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:15,113:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:15,123:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:15,128:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:15,132:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:15,138:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:15,139:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:15,153:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:15,153:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:15,288:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:15,299:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:15,312:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:16,533:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:16,544:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:16,575:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:16,592:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:16,604:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:16,626:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:16,813:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:16,826:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:16,909:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:17,145:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:17,167:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:17,179:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:18,394:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:18,406:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:18,417:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:18,419:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:18,431:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:18,440:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:17:18,466:INFO:Calculating mean and std
2024-11-22 21:17:18,470:INFO:Creating metrics dataframe
2024-11-22 21:17:18,522:INFO:Finalizing model
2024-11-22 21:17:19,495:INFO:Uploading results into container
2024-11-22 21:17:19,501:INFO:Uploading model into container now
2024-11-22 21:17:19,560:INFO:_master_model_container: 15
2024-11-22 21:17:19,562:INFO:_display_container: 3
2024-11-22 21:17:19,565:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-11-22 21:17:19,565:INFO:create_model() successfully completed......................................
2024-11-22 21:17:19,784:INFO:Initializing tune_model()
2024-11-22 21:17:19,784:INFO:tune_model(estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000232F73E2440>)
2024-11-22 21:17:19,784:INFO:Checking exceptions
2024-11-22 21:17:19,912:INFO:Copying training dataset
2024-11-22 21:17:19,947:INFO:Checking base model
2024-11-22 21:17:19,947:INFO:Base model : Random Forest Classifier
2024-11-22 21:17:19,984:INFO:Declaring metric variables
2024-11-22 21:17:19,995:INFO:Defining Hyperparameters
2024-11-22 21:17:20,160:INFO:Tuning with n_jobs=-1
2024-11-22 21:17:20,160:INFO:Initializing RandomizedSearchCV
2024-11-22 21:18:00,497:INFO:best_params: {'actual_estimator__n_estimators': 190, 'actual_estimator__min_samples_split': 9, 'actual_estimator__min_samples_leaf': 6, 'actual_estimator__min_impurity_decrease': 0.001, 'actual_estimator__max_features': 'log2', 'actual_estimator__max_depth': 6, 'actual_estimator__criterion': 'gini', 'actual_estimator__class_weight': 'balanced_subsample', 'actual_estimator__bootstrap': False}
2024-11-22 21:18:00,500:INFO:Hyperparameter search completed
2024-11-22 21:18:00,500:INFO:SubProcess create_model() called ==================================
2024-11-22 21:18:00,503:INFO:Initializing create_model()
2024-11-22 21:18:00,504:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000232F73E2440>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002328000F670>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'n_estimators': 190, 'min_samples_split': 9, 'min_samples_leaf': 6, 'min_impurity_decrease': 0.001, 'max_features': 'log2', 'max_depth': 6, 'criterion': 'gini', 'class_weight': 'balanced_subsample', 'bootstrap': False})
2024-11-22 21:18:00,505:INFO:Checking exceptions
2024-11-22 21:18:00,505:INFO:Importing libraries
2024-11-22 21:18:00,505:INFO:Copying training dataset
2024-11-22 21:18:00,530:INFO:Defining folds
2024-11-22 21:18:00,531:INFO:Declaring metric variables
2024-11-22 21:18:00,541:INFO:Importing untrained model
2024-11-22 21:18:00,541:INFO:Declaring custom model
2024-11-22 21:18:00,557:INFO:Random Forest Classifier Imported successfully
2024-11-22 21:18:00,579:INFO:Starting cross validation
2024-11-22 21:18:00,587:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 21:18:02,183:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:02,195:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:02,207:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:02,263:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:02,277:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:02,287:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:02,319:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:02,332:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:02,343:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:02,489:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:02,499:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:02,510:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:03,806:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:03,830:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:03,842:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:03,874:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:03,887:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:03,899:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:04,046:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:04,057:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:04,065:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:04,301:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:04,307:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:04,316:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:05,399:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:05,426:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:05,443:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:05,458:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:05,470:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:05,479:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:05,503:INFO:Calculating mean and std
2024-11-22 21:18:05,506:INFO:Creating metrics dataframe
2024-11-22 21:18:05,532:INFO:Finalizing model
2024-11-22 21:18:06,584:INFO:Uploading results into container
2024-11-22 21:18:06,586:INFO:Uploading model into container now
2024-11-22 21:18:06,586:INFO:_master_model_container: 16
2024-11-22 21:18:06,587:INFO:_display_container: 4
2024-11-22 21:18:06,589:INFO:RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)
2024-11-22 21:18:06,592:INFO:create_model() successfully completed......................................
2024-11-22 21:18:06,756:INFO:SubProcess create_model() end ==================================
2024-11-22 21:18:06,756:INFO:choose_better activated
2024-11-22 21:18:06,764:INFO:SubProcess create_model() called ==================================
2024-11-22 21:18:06,766:INFO:Initializing create_model()
2024-11-22 21:18:06,766:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000232F73E2440>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 21:18:06,767:INFO:Checking exceptions
2024-11-22 21:18:06,775:INFO:Importing libraries
2024-11-22 21:18:06,776:INFO:Copying training dataset
2024-11-22 21:18:06,789:INFO:Defining folds
2024-11-22 21:18:06,789:INFO:Declaring metric variables
2024-11-22 21:18:06,789:INFO:Importing untrained model
2024-11-22 21:18:06,789:INFO:Declaring custom model
2024-11-22 21:18:06,792:INFO:Random Forest Classifier Imported successfully
2024-11-22 21:18:06,792:INFO:Starting cross validation
2024-11-22 21:18:06,800:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-22 21:18:08,147:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:08,157:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:08,168:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:08,178:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:08,217:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:08,229:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:08,230:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:08,243:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:08,274:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:08,304:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:08,322:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:08,341:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:09,525:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:09,537:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:09,549:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:09,558:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:09,589:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:09,607:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:09,631:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:09,642:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:09,654:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:09,788:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:09,798:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:09,805:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:10,808:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:10,823:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:10,832:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:10,853:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:10,863:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:10,874:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-22 21:18:10,898:INFO:Calculating mean and std
2024-11-22 21:18:10,899:INFO:Creating metrics dataframe
2024-11-22 21:18:10,904:INFO:Finalizing model
2024-11-22 21:18:11,695:INFO:Uploading results into container
2024-11-22 21:18:11,696:INFO:Uploading model into container now
2024-11-22 21:18:11,697:INFO:_master_model_container: 17
2024-11-22 21:18:11,697:INFO:_display_container: 5
2024-11-22 21:18:11,698:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-11-22 21:18:11,698:INFO:create_model() successfully completed......................................
2024-11-22 21:18:11,829:INFO:SubProcess create_model() end ==================================
2024-11-22 21:18:11,831:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for Accuracy is 0.8886
2024-11-22 21:18:11,832:INFO:RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False) result for Accuracy is 0.9114
2024-11-22 21:18:11,834:INFO:RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False) is best model
2024-11-22 21:18:11,834:INFO:choose_better completed
2024-11-22 21:18:11,864:INFO:_master_model_container: 17
2024-11-22 21:18:11,865:INFO:_display_container: 4
2024-11-22 21:18:11,867:INFO:RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)
2024-11-22 21:18:11,867:INFO:tune_model() successfully completed......................................
2024-11-22 21:18:12,033:INFO:Initializing evaluate_model()
2024-11-22 21:18:12,034:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000232F73E2440>, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-11-22 21:18:12,096:INFO:Initializing plot_model()
2024-11-22 21:18:12,098:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000232F73E2440>, system=True)
2024-11-22 21:18:12,098:INFO:Checking exceptions
2024-11-22 21:18:12,213:INFO:Preloading libraries
2024-11-22 21:18:12,272:INFO:Copying training dataset
2024-11-22 21:18:12,272:INFO:Plot type: pipeline
2024-11-22 21:18:12,960:INFO:Visual Rendered Successfully
2024-11-22 21:18:13,096:INFO:plot_model() successfully completed......................................
2024-11-22 21:18:13,102:INFO:Initializing finalize_model()
2024-11-22 21:18:13,103:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000232F73E2440>, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-11-22 21:18:13,107:INFO:Finalizing RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)
2024-11-22 21:18:13,121:INFO:Initializing create_model()
2024-11-22 21:18:13,122:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000232F73E2440>, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-11-22 21:18:13,122:INFO:Checking exceptions
2024-11-22 21:18:13,126:INFO:Importing libraries
2024-11-22 21:18:13,126:INFO:Copying training dataset
2024-11-22 21:18:13,127:INFO:Defining folds
2024-11-22 21:18:13,128:INFO:Declaring metric variables
2024-11-22 21:18:13,128:INFO:Importing untrained model
2024-11-22 21:18:13,129:INFO:Declaring custom model
2024-11-22 21:18:13,133:INFO:Random Forest Classifier Imported successfully
2024-11-22 21:18:13,138:INFO:Cross validation set to False
2024-11-22 21:18:13,138:INFO:Fitting Model
2024-11-22 21:18:14,554:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['Age'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean')...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight='balanced_subsample',
                                        criterion='gini', max_depth=6,
                                        max_features='log2',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.001,
                                        min_samples_leaf=6, min_samples_split=9,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=190,
                                        n_jobs=-1, oob_score=False,
                                        random_state=123, verbose=0,
                                        warm_start=False))],
         verbose=False)
2024-11-22 21:18:14,554:INFO:create_model() successfully completed......................................
2024-11-22 21:18:14,702:INFO:_master_model_container: 17
2024-11-22 21:18:14,703:INFO:_display_container: 4
2024-11-22 21:18:15,235:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['Age'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean')...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight='balanced_subsample',
                                        criterion='gini', max_depth=6,
                                        max_features='log2',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.001,
                                        min_samples_leaf=6, min_samples_split=9,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=190,
                                        n_jobs=-1, oob_score=False,
                                        random_state=123, verbose=0,
                                        warm_start=False))],
         verbose=False)
2024-11-22 21:18:15,235:INFO:finalize_model() successfully completed......................................
2024-11-22 21:18:16,273:INFO:Initializing save_model()
2024-11-22 21:18:16,273:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['Age'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean')...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight='balanced_subsample',
                                        criterion='gini', max_depth=6,
                                        max_features='log2',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.001,
                                        min_samples_leaf=6, min_samples_split=9,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=190,
                                        n_jobs=-1, oob_score=False,
                                        random_state=123, verbose=0,
                                        warm_start=False))],
         verbose=False), model_name=rf_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\teklu\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['Age'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                                        {'col': 'Hemoptysis',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64},
                                                                        {'col': 'Breathing',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64},
                                                                        {'col': 'Arthritis',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64},
                                                                        {'col': 'Vomiting',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-11-22 21:18:16,273:INFO:Adding model into prep_pipe
2024-11-22 21:18:16,274:WARNING:Only Model saved as it was a pipeline.
2024-11-22 21:18:16,542:INFO:rf_model.pkl saved in current working directory
2024-11-22 21:18:16,890:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['Age'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean')...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight='balanced_subsample',
                                        criterion='gini', max_depth=6,
                                        max_features='log2',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.001,
                                        min_samples_leaf=6, min_samples_split=9,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=190,
                                        n_jobs=-1, oob_score=False,
                                        random_state=123, verbose=0,
                                        warm_start=False))],
         verbose=False)
2024-11-22 21:18:16,890:INFO:save_model() successfully completed......................................
2024-11-22 21:18:33,666:INFO:Initializing plot_model()
2024-11-22 21:18:33,667:INFO:plot_model(plot=parameter, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000232F73E2440>, system=True)
2024-11-22 21:18:33,667:INFO:Checking exceptions
2024-11-22 21:18:33,762:INFO:Preloading libraries
2024-11-22 21:18:33,843:INFO:Copying training dataset
2024-11-22 21:18:33,844:INFO:Plot type: parameter
2024-11-22 21:18:33,857:INFO:Visual Rendered Successfully
2024-11-22 21:18:34,041:INFO:plot_model() successfully completed......................................
2024-11-22 21:18:37,588:INFO:Initializing plot_model()
2024-11-22 21:18:37,589:INFO:plot_model(plot=threshold, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000232F73E2440>, system=True)
2024-11-22 21:18:37,589:INFO:Checking exceptions
2024-11-22 21:18:37,684:INFO:Preloading libraries
2024-11-22 21:18:37,733:INFO:Copying training dataset
2024-11-22 21:18:37,733:INFO:Plot type: threshold
2024-11-22 21:18:38,156:INFO:Fitting Model
2024-11-22 21:19:25,227:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2024-11-22 21:19:25,282:INFO:Scoring test/hold-out set
2024-11-22 21:19:26,516:INFO:Visual Rendered Successfully
2024-11-22 21:19:26,656:INFO:plot_model() successfully completed......................................
2024-11-22 21:19:26,705:INFO:Initializing plot_model()
2024-11-22 21:19:26,706:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000232F73E2440>, system=True)
2024-11-22 21:19:26,706:INFO:Checking exceptions
2024-11-22 21:19:26,798:INFO:Preloading libraries
2024-11-22 21:19:26,859:INFO:Copying training dataset
2024-11-22 21:19:26,859:INFO:Plot type: pipeline
2024-11-22 21:19:27,260:INFO:Visual Rendered Successfully
2024-11-22 21:19:27,453:INFO:plot_model() successfully completed......................................
2024-11-23 11:03:19,483:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-23 11:03:19,484:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-23 11:03:19,484:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-23 11:03:19,485:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-23 11:03:27,265:WARNING:C:\Users\teklu\AppData\Local\Temp\ipykernel_4784\1789193498.py:1: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.
  sns.heatmap(df.corr(),annot=True,cmap='coolwarm',linewidths=0.4)

2024-11-23 11:06:13,626:INFO:PyCaret ClassificationExperiment
2024-11-23 11:06:13,626:INFO:Logging name: clf-default-name
2024-11-23 11:06:13,626:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-11-23 11:06:13,626:INFO:version 3.3.2
2024-11-23 11:06:13,626:INFO:Initializing setup()
2024-11-23 11:06:13,626:INFO:self.USI: cb65
2024-11-23 11:06:13,626:INFO:self._variable_keys: {'y_train', 'USI', '_available_plots', 'exp_id', 'y_test', 'y', 'idx', 'fold_shuffle_param', 'logging_param', 'exp_name_log', 'X_test', 'fix_imbalance', 'X_train', '_ml_usecase', 'memory', 'html_param', 'fold_generator', 'X', 'gpu_param', 'gpu_n_jobs_param', 'target_param', 'seed', 'pipeline', 'is_multiclass', 'n_jobs_param', 'data', 'fold_groups_param', 'log_plots_param'}
2024-11-23 11:06:13,627:INFO:Checking environment
2024-11-23 11:06:13,627:INFO:python_version: 3.10.9
2024-11-23 11:06:13,627:INFO:python_build: ('main', 'Mar  1 2023 18:18:15')
2024-11-23 11:06:13,627:INFO:machine: AMD64
2024-11-23 11:06:13,627:INFO:platform: Windows-10-10.0.19045-SP0
2024-11-23 11:06:13,627:INFO:Memory: svmem(total=17044500480, available=4111822848, percent=75.9, used=12932677632, free=4111822848)
2024-11-23 11:06:13,627:INFO:Physical Core: 2
2024-11-23 11:06:13,627:INFO:Logical Core: 4
2024-11-23 11:06:13,627:INFO:Checking libraries
2024-11-23 11:06:13,627:INFO:System:
2024-11-23 11:06:13,627:INFO:    python: 3.10.9 | packaged by Anaconda, Inc. | (main, Mar  1 2023, 18:18:15) [MSC v.1916 64 bit (AMD64)]
2024-11-23 11:06:13,627:INFO:executable: C:\Users\teklu\anaconda3\python.exe
2024-11-23 11:06:13,627:INFO:   machine: Windows-10-10.0.19045-SP0
2024-11-23 11:06:13,627:INFO:PyCaret required dependencies:
2024-11-23 11:06:14,550:INFO:                 pip: 22.3.1
2024-11-23 11:06:14,550:INFO:          setuptools: 65.6.3
2024-11-23 11:06:14,550:INFO:             pycaret: 3.3.2
2024-11-23 11:06:14,550:INFO:             IPython: 8.10.0
2024-11-23 11:06:14,550:INFO:          ipywidgets: 7.6.5
2024-11-23 11:06:14,550:INFO:                tqdm: 4.64.1
2024-11-23 11:06:14,550:INFO:               numpy: 1.23.5
2024-11-23 11:06:14,551:INFO:              pandas: 1.5.3
2024-11-23 11:06:14,551:INFO:              jinja2: 3.1.2
2024-11-23 11:06:14,551:INFO:               scipy: 1.10.0
2024-11-23 11:06:14,551:INFO:              joblib: 1.3.2
2024-11-23 11:06:14,551:INFO:             sklearn: 1.4.2
2024-11-23 11:06:14,551:INFO:                pyod: 2.0.2
2024-11-23 11:06:14,551:INFO:            imblearn: 0.12.4
2024-11-23 11:06:14,551:INFO:   category_encoders: 2.6.4
2024-11-23 11:06:14,552:INFO:            lightgbm: 4.5.0
2024-11-23 11:06:14,552:INFO:               numba: 0.56.4
2024-11-23 11:06:14,552:INFO:            requests: 2.28.1
2024-11-23 11:06:14,552:INFO:          matplotlib: 3.7.0
2024-11-23 11:06:14,553:INFO:          scikitplot: 0.3.7
2024-11-23 11:06:14,553:INFO:         yellowbrick: 1.5
2024-11-23 11:06:14,553:INFO:              plotly: 5.24.1
2024-11-23 11:06:14,553:INFO:    plotly-resampler: Not installed
2024-11-23 11:06:14,553:INFO:             kaleido: 0.2.1
2024-11-23 11:06:14,553:INFO:           schemdraw: 0.15
2024-11-23 11:06:14,553:INFO:         statsmodels: 0.13.5
2024-11-23 11:06:14,553:INFO:              sktime: 0.26.0
2024-11-23 11:06:14,553:INFO:               tbats: 1.1.3
2024-11-23 11:06:14,553:INFO:            pmdarima: 2.0.4
2024-11-23 11:06:14,553:INFO:              psutil: 5.9.0
2024-11-23 11:06:14,553:INFO:          markupsafe: 2.1.1
2024-11-23 11:06:14,553:INFO:             pickle5: Not installed
2024-11-23 11:06:14,553:INFO:         cloudpickle: 2.0.0
2024-11-23 11:06:14,554:INFO:         deprecation: 2.1.0
2024-11-23 11:06:14,554:INFO:              xxhash: 3.5.0
2024-11-23 11:06:14,554:INFO:           wurlitzer: Not installed
2024-11-23 11:06:14,554:INFO:PyCaret optional dependencies:
2024-11-23 11:06:14,570:INFO:                shap: Not installed
2024-11-23 11:06:14,570:INFO:           interpret: Not installed
2024-11-23 11:06:14,570:INFO:                umap: Not installed
2024-11-23 11:06:14,570:INFO:     ydata_profiling: Not installed
2024-11-23 11:06:14,570:INFO:  explainerdashboard: Not installed
2024-11-23 11:06:14,570:INFO:             autoviz: Not installed
2024-11-23 11:06:14,570:INFO:           fairlearn: Not installed
2024-11-23 11:06:14,570:INFO:          deepchecks: Not installed
2024-11-23 11:06:14,570:INFO:             xgboost: Not installed
2024-11-23 11:06:14,571:INFO:            catboost: Not installed
2024-11-23 11:06:14,571:INFO:              kmodes: Not installed
2024-11-23 11:06:14,571:INFO:             mlxtend: Not installed
2024-11-23 11:06:14,571:INFO:       statsforecast: Not installed
2024-11-23 11:06:14,571:INFO:        tune_sklearn: Not installed
2024-11-23 11:06:14,571:INFO:                 ray: Not installed
2024-11-23 11:06:14,571:INFO:            hyperopt: Not installed
2024-11-23 11:06:14,571:INFO:              optuna: Not installed
2024-11-23 11:06:14,571:INFO:               skopt: Not installed
2024-11-23 11:06:14,571:INFO:              mlflow: Not installed
2024-11-23 11:06:14,571:INFO:              gradio: Not installed
2024-11-23 11:06:14,571:INFO:             fastapi: Not installed
2024-11-23 11:06:14,571:INFO:             uvicorn: Not installed
2024-11-23 11:06:14,571:INFO:              m2cgen: Not installed
2024-11-23 11:06:14,571:INFO:           evidently: Not installed
2024-11-23 11:06:14,571:INFO:               fugue: Not installed
2024-11-23 11:06:14,572:INFO:           streamlit: Not installed
2024-11-23 11:06:14,572:INFO:             prophet: Not installed
2024-11-23 11:06:14,572:INFO:None
2024-11-23 11:06:14,572:INFO:Set up data.
2024-11-23 11:06:14,587:INFO:Set up folding strategy.
2024-11-23 11:06:14,587:INFO:Set up train/test split.
2024-11-23 11:06:14,607:INFO:Set up index.
2024-11-23 11:06:14,608:INFO:Assigning column types.
2024-11-23 11:06:14,616:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-11-23 11:06:14,691:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-23 11:06:14,698:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-23 11:06:14,747:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-23 11:06:14,747:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-23 11:06:14,823:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-23 11:06:14,825:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-23 11:06:14,856:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-23 11:06:14,856:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-23 11:06:14,857:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-11-23 11:06:14,902:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-23 11:06:14,932:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-23 11:06:14,932:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-23 11:06:14,978:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-23 11:06:15,005:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-23 11:06:15,005:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-23 11:06:15,006:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-11-23 11:06:15,080:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-23 11:06:15,080:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-23 11:06:15,159:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-23 11:06:15,159:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-23 11:06:15,164:INFO:Preparing preprocessing pipeline...
2024-11-23 11:06:15,166:INFO:Set up label encoding.
2024-11-23 11:06:15,166:INFO:Set up simple imputation.
2024-11-23 11:06:15,174:INFO:Set up encoding of ordinal features.
2024-11-23 11:06:15,187:INFO:Set up encoding of categorical features.
2024-11-23 11:06:15,309:INFO:Finished creating preprocessing pipeline.
2024-11-23 11:06:15,483:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\teklu\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['Age'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                                        {'col': 'Hemoptysis',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64},
                                                                        {'col': 'Breathing',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64},
                                                                        {'col': 'Arthritis',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64},
                                                                        {'col': 'Vomiting',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False)
2024-11-23 11:06:15,483:INFO:Creating final display dataframe.
2024-11-23 11:06:15,621:INFO:Setup _display_container:                     Description                     Value
0                    Session id                       123
1                        Target           Covid_19_result
2                   Target type                    Binary
3                Target mapping  Negative: 0, Positive: 1
4           Original data shape                (2001, 13)
5        Transformed data shape                (2001, 13)
6   Transformed train set shape                (1400, 13)
7    Transformed test set shape                 (601, 13)
8              Numeric features                         1
9          Categorical features                        11
10                   Preprocess                      True
11              Imputation type                    simple
12           Numeric imputation                      mean
13       Categorical imputation                      mode
14     Maximum one-hot encoding                        25
15              Encoding method                      None
16               Fold Generator           StratifiedKFold
17                  Fold Number                        10
18                     CPU Jobs                        -1
19                      Use GPU                     False
20               Log Experiment                     False
21              Experiment Name          clf-default-name
22                          USI                      cb65
2024-11-23 11:06:15,722:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-23 11:06:15,723:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-23 11:06:15,800:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-23 11:06:15,800:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-23 11:06:15,802:INFO:setup() successfully completed in 2.21s...............
2024-11-23 11:06:15,802:INFO:Initializing compare_models()
2024-11-23 11:06:15,803:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026971CE08B0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000026971CE08B0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-11-23 11:06:15,803:INFO:Checking exceptions
2024-11-23 11:06:15,808:INFO:Preparing display monitor
2024-11-23 11:06:15,874:INFO:Initializing Logistic Regression
2024-11-23 11:06:15,874:INFO:Total runtime is 1.6597906748453774e-05 minutes
2024-11-23 11:06:15,880:INFO:SubProcess create_model() called ==================================
2024-11-23 11:06:15,880:INFO:Initializing create_model()
2024-11-23 11:06:15,880:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026971CE08B0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026974423C40>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-23 11:06:15,881:INFO:Checking exceptions
2024-11-23 11:06:15,881:INFO:Importing libraries
2024-11-23 11:06:15,881:INFO:Copying training dataset
2024-11-23 11:06:15,892:INFO:Defining folds
2024-11-23 11:06:15,893:INFO:Declaring metric variables
2024-11-23 11:06:15,898:INFO:Importing untrained model
2024-11-23 11:06:15,906:INFO:Logistic Regression Imported successfully
2024-11-23 11:06:15,922:INFO:Starting cross validation
2024-11-23 11:06:15,928:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-23 11:06:25,383:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:25,388:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:25,390:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:25,394:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:25,397:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:25,402:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:25,442:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:25,448:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:25,456:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:25,573:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:25,580:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:25,587:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:25,844:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:25,851:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:25,852:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:25,857:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:25,858:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:25,865:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:25,884:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:25,890:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:25,897:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:26,002:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:26,006:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:26,012:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:26,128:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:26,129:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:26,132:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:26,134:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:26,138:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:26,140:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:26,161:INFO:Calculating mean and std
2024-11-23 11:06:26,164:INFO:Creating metrics dataframe
2024-11-23 11:06:26,176:INFO:Uploading results into container
2024-11-23 11:06:26,177:INFO:Uploading model into container now
2024-11-23 11:06:26,178:INFO:_master_model_container: 1
2024-11-23 11:06:26,178:INFO:_display_container: 2
2024-11-23 11:06:26,179:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-23 11:06:26,179:INFO:create_model() successfully completed......................................
2024-11-23 11:06:26,323:INFO:SubProcess create_model() end ==================================
2024-11-23 11:06:26,324:INFO:Creating metrics dataframe
2024-11-23 11:06:26,351:INFO:Initializing K Neighbors Classifier
2024-11-23 11:06:26,352:INFO:Total runtime is 0.17464151382446289 minutes
2024-11-23 11:06:26,361:INFO:SubProcess create_model() called ==================================
2024-11-23 11:06:26,361:INFO:Initializing create_model()
2024-11-23 11:06:26,361:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026971CE08B0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026974423C40>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-23 11:06:26,362:INFO:Checking exceptions
2024-11-23 11:06:26,362:INFO:Importing libraries
2024-11-23 11:06:26,362:INFO:Copying training dataset
2024-11-23 11:06:26,373:INFO:Defining folds
2024-11-23 11:06:26,373:INFO:Declaring metric variables
2024-11-23 11:06:26,380:INFO:Importing untrained model
2024-11-23 11:06:26,394:INFO:K Neighbors Classifier Imported successfully
2024-11-23 11:06:26,405:INFO:Starting cross validation
2024-11-23 11:06:26,411:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-23 11:06:26,808:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:26,811:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:26,821:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:26,824:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:26,825:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:26,830:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:26,831:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:26,839:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:26,840:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:26,856:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:26,865:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:26,874:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:27,219:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:27,219:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:27,222:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:27,223:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:27,229:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:27,234:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:27,237:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:27,244:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:27,252:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:27,280:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:27,287:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:27,293:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:27,540:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:27,541:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:27,547:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:27,548:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:27,555:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:27,556:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:27,571:INFO:Calculating mean and std
2024-11-23 11:06:27,574:INFO:Creating metrics dataframe
2024-11-23 11:06:27,586:INFO:Uploading results into container
2024-11-23 11:06:27,587:INFO:Uploading model into container now
2024-11-23 11:06:27,588:INFO:_master_model_container: 2
2024-11-23 11:06:27,588:INFO:_display_container: 2
2024-11-23 11:06:27,589:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-11-23 11:06:27,589:INFO:create_model() successfully completed......................................
2024-11-23 11:06:27,689:INFO:SubProcess create_model() end ==================================
2024-11-23 11:06:27,689:INFO:Creating metrics dataframe
2024-11-23 11:06:27,703:INFO:Initializing Naive Bayes
2024-11-23 11:06:27,703:INFO:Total runtime is 0.19716997146606444 minutes
2024-11-23 11:06:27,707:INFO:SubProcess create_model() called ==================================
2024-11-23 11:06:27,708:INFO:Initializing create_model()
2024-11-23 11:06:27,708:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026971CE08B0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026974423C40>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-23 11:06:27,708:INFO:Checking exceptions
2024-11-23 11:06:27,709:INFO:Importing libraries
2024-11-23 11:06:27,709:INFO:Copying training dataset
2024-11-23 11:06:27,722:INFO:Defining folds
2024-11-23 11:06:27,722:INFO:Declaring metric variables
2024-11-23 11:06:27,729:INFO:Importing untrained model
2024-11-23 11:06:27,737:INFO:Naive Bayes Imported successfully
2024-11-23 11:06:27,746:INFO:Starting cross validation
2024-11-23 11:06:27,750:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-23 11:06:28,078:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:28,081:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:28,086:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:28,090:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:28,092:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:28,097:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:28,097:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:28,103:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:28,120:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:28,135:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:28,142:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:28,442:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:28,449:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:28,456:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:28,472:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:28,473:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:28,478:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:28,480:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:28,484:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:28,485:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:28,488:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:28,490:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:28,498:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:28,686:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:28,695:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:28,704:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:28,719:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:28,725:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:28,732:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:28,743:INFO:Calculating mean and std
2024-11-23 11:06:28,755:INFO:Creating metrics dataframe
2024-11-23 11:06:28,765:INFO:Uploading results into container
2024-11-23 11:06:28,769:INFO:Uploading model into container now
2024-11-23 11:06:28,770:INFO:_master_model_container: 3
2024-11-23 11:06:28,770:INFO:_display_container: 2
2024-11-23 11:06:28,770:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-11-23 11:06:28,771:INFO:create_model() successfully completed......................................
2024-11-23 11:06:29,045:INFO:SubProcess create_model() end ==================================
2024-11-23 11:06:29,046:INFO:Creating metrics dataframe
2024-11-23 11:06:29,062:INFO:Initializing Decision Tree Classifier
2024-11-23 11:06:29,062:INFO:Total runtime is 0.2198094606399536 minutes
2024-11-23 11:06:29,067:INFO:SubProcess create_model() called ==================================
2024-11-23 11:06:29,068:INFO:Initializing create_model()
2024-11-23 11:06:29,068:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026971CE08B0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026974423C40>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-23 11:06:29,069:INFO:Checking exceptions
2024-11-23 11:06:29,069:INFO:Importing libraries
2024-11-23 11:06:29,069:INFO:Copying training dataset
2024-11-23 11:06:29,081:INFO:Defining folds
2024-11-23 11:06:29,082:INFO:Declaring metric variables
2024-11-23 11:06:29,092:INFO:Importing untrained model
2024-11-23 11:06:29,098:INFO:Decision Tree Classifier Imported successfully
2024-11-23 11:06:29,110:INFO:Starting cross validation
2024-11-23 11:06:29,118:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-23 11:06:29,493:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:29,495:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:29,501:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:29,502:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:29,507:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:29,508:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:29,528:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:29,537:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:29,543:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:29,551:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:29,567:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:29,573:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:29,825:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:29,832:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:29,838:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:29,841:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:29,847:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:29,859:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:29,861:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:29,868:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:29,874:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:29,906:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:29,919:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:29,924:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:30,100:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:30,105:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:30,110:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:30,118:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:30,121:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:30,126:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:30,146:INFO:Calculating mean and std
2024-11-23 11:06:30,152:INFO:Creating metrics dataframe
2024-11-23 11:06:30,160:INFO:Uploading results into container
2024-11-23 11:06:30,161:INFO:Uploading model into container now
2024-11-23 11:06:30,162:INFO:_master_model_container: 4
2024-11-23 11:06:30,162:INFO:_display_container: 2
2024-11-23 11:06:30,163:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-11-23 11:06:30,163:INFO:create_model() successfully completed......................................
2024-11-23 11:06:30,277:INFO:SubProcess create_model() end ==================================
2024-11-23 11:06:30,277:INFO:Creating metrics dataframe
2024-11-23 11:06:30,294:INFO:Initializing SVM - Linear Kernel
2024-11-23 11:06:30,294:INFO:Total runtime is 0.24034339984258016 minutes
2024-11-23 11:06:30,302:INFO:SubProcess create_model() called ==================================
2024-11-23 11:06:30,303:INFO:Initializing create_model()
2024-11-23 11:06:30,303:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026971CE08B0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026974423C40>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-23 11:06:30,303:INFO:Checking exceptions
2024-11-23 11:06:30,303:INFO:Importing libraries
2024-11-23 11:06:30,303:INFO:Copying training dataset
2024-11-23 11:06:30,309:INFO:Defining folds
2024-11-23 11:06:30,310:INFO:Declaring metric variables
2024-11-23 11:06:30,317:INFO:Importing untrained model
2024-11-23 11:06:30,323:INFO:SVM - Linear Kernel Imported successfully
2024-11-23 11:06:30,344:INFO:Starting cross validation
2024-11-23 11:06:30,348:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-23 11:06:30,723:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:30,724:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:30,731:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:30,731:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:30,738:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:30,739:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:30,745:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:30,753:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:30,784:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:30,790:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:30,797:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:31,102:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:31,107:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:31,107:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:31,108:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:31,113:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:31,114:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:31,122:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:31,122:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:31,152:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:31,158:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:31,164:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:31,337:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:31,338:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:31,341:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:31,342:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:31,344:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:31,345:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:31,361:INFO:Calculating mean and std
2024-11-23 11:06:31,363:INFO:Creating metrics dataframe
2024-11-23 11:06:31,373:INFO:Uploading results into container
2024-11-23 11:06:31,374:INFO:Uploading model into container now
2024-11-23 11:06:31,374:INFO:_master_model_container: 5
2024-11-23 11:06:31,374:INFO:_display_container: 2
2024-11-23 11:06:31,375:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-11-23 11:06:31,375:INFO:create_model() successfully completed......................................
2024-11-23 11:06:31,475:INFO:SubProcess create_model() end ==================================
2024-11-23 11:06:31,475:INFO:Creating metrics dataframe
2024-11-23 11:06:31,489:INFO:Initializing Ridge Classifier
2024-11-23 11:06:31,489:INFO:Total runtime is 0.2602583726247152 minutes
2024-11-23 11:06:31,495:INFO:SubProcess create_model() called ==================================
2024-11-23 11:06:31,495:INFO:Initializing create_model()
2024-11-23 11:06:31,495:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026971CE08B0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026974423C40>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-23 11:06:31,495:INFO:Checking exceptions
2024-11-23 11:06:31,495:INFO:Importing libraries
2024-11-23 11:06:31,496:INFO:Copying training dataset
2024-11-23 11:06:31,505:INFO:Defining folds
2024-11-23 11:06:31,506:INFO:Declaring metric variables
2024-11-23 11:06:31,519:INFO:Importing untrained model
2024-11-23 11:06:31,526:INFO:Ridge Classifier Imported successfully
2024-11-23 11:06:31,541:INFO:Starting cross validation
2024-11-23 11:06:31,544:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-23 11:06:31,886:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:31,891:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:31,891:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:31,892:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:31,896:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:31,897:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:31,898:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:31,903:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:31,904:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:31,905:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:31,911:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:31,919:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:32,216:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:32,215:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:32,219:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:32,222:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:32,223:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:32,225:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:32,228:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:32,229:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:32,232:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:32,237:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:32,243:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:32,251:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:32,444:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:32,447:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:32,449:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:32,453:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:32,453:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:32,456:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:32,472:INFO:Calculating mean and std
2024-11-23 11:06:32,475:INFO:Creating metrics dataframe
2024-11-23 11:06:32,483:INFO:Uploading results into container
2024-11-23 11:06:32,484:INFO:Uploading model into container now
2024-11-23 11:06:32,485:INFO:_master_model_container: 6
2024-11-23 11:06:32,486:INFO:_display_container: 2
2024-11-23 11:06:32,486:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-11-23 11:06:32,487:INFO:create_model() successfully completed......................................
2024-11-23 11:06:32,589:INFO:SubProcess create_model() end ==================================
2024-11-23 11:06:32,590:INFO:Creating metrics dataframe
2024-11-23 11:06:32,604:INFO:Initializing Random Forest Classifier
2024-11-23 11:06:32,604:INFO:Total runtime is 0.2788440783818563 minutes
2024-11-23 11:06:32,608:INFO:SubProcess create_model() called ==================================
2024-11-23 11:06:32,608:INFO:Initializing create_model()
2024-11-23 11:06:32,609:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026971CE08B0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026974423C40>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-23 11:06:32,609:INFO:Checking exceptions
2024-11-23 11:06:32,609:INFO:Importing libraries
2024-11-23 11:06:32,609:INFO:Copying training dataset
2024-11-23 11:06:32,617:INFO:Defining folds
2024-11-23 11:06:32,618:INFO:Declaring metric variables
2024-11-23 11:06:32,623:INFO:Importing untrained model
2024-11-23 11:06:32,635:INFO:Random Forest Classifier Imported successfully
2024-11-23 11:06:32,645:INFO:Starting cross validation
2024-11-23 11:06:32,647:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-23 11:06:33,478:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:33,485:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:33,492:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:33,493:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:33,502:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:33,509:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:33,543:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:33,554:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:33,563:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:33,668:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:33,675:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:33,685:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:34,326:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:34,333:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:34,339:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:34,349:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:34,358:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:34,367:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:34,452:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:34,460:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:34,467:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:34,595:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:34,601:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:34,608:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:34,958:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:34,964:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:34,970:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:34,994:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:34,999:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:35,008:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:35,030:INFO:Calculating mean and std
2024-11-23 11:06:35,035:INFO:Creating metrics dataframe
2024-11-23 11:06:35,042:INFO:Uploading results into container
2024-11-23 11:06:35,044:INFO:Uploading model into container now
2024-11-23 11:06:35,044:INFO:_master_model_container: 7
2024-11-23 11:06:35,045:INFO:_display_container: 2
2024-11-23 11:06:35,046:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-11-23 11:06:35,046:INFO:create_model() successfully completed......................................
2024-11-23 11:06:35,152:INFO:SubProcess create_model() end ==================================
2024-11-23 11:06:35,152:INFO:Creating metrics dataframe
2024-11-23 11:06:35,169:INFO:Initializing Quadratic Discriminant Analysis
2024-11-23 11:06:35,169:INFO:Total runtime is 0.32158993482589726 minutes
2024-11-23 11:06:35,174:INFO:SubProcess create_model() called ==================================
2024-11-23 11:06:35,174:INFO:Initializing create_model()
2024-11-23 11:06:35,174:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026971CE08B0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026974423C40>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-23 11:06:35,175:INFO:Checking exceptions
2024-11-23 11:06:35,175:INFO:Importing libraries
2024-11-23 11:06:35,175:INFO:Copying training dataset
2024-11-23 11:06:35,182:INFO:Defining folds
2024-11-23 11:06:35,183:INFO:Declaring metric variables
2024-11-23 11:06:35,188:INFO:Importing untrained model
2024-11-23 11:06:35,197:INFO:Quadratic Discriminant Analysis Imported successfully
2024-11-23 11:06:35,213:INFO:Starting cross validation
2024-11-23 11:06:35,219:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-23 11:06:35,593:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:35,594:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:35,594:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:35,600:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:35,600:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:35,602:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:35,606:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:35,608:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:35,609:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:35,609:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:35,618:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:35,627:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:35,980:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:35,984:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:35,986:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:35,989:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:35,992:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:35,995:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:35,996:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:36,000:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:36,003:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:36,007:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:36,016:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:36,026:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:36,246:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:36,247:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:36,253:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:36,254:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:36,259:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:36,261:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:36,276:INFO:Calculating mean and std
2024-11-23 11:06:36,279:INFO:Creating metrics dataframe
2024-11-23 11:06:36,288:INFO:Uploading results into container
2024-11-23 11:06:36,290:INFO:Uploading model into container now
2024-11-23 11:06:36,291:INFO:_master_model_container: 8
2024-11-23 11:06:36,291:INFO:_display_container: 2
2024-11-23 11:06:36,292:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-11-23 11:06:36,292:INFO:create_model() successfully completed......................................
2024-11-23 11:06:36,418:INFO:SubProcess create_model() end ==================================
2024-11-23 11:06:36,418:INFO:Creating metrics dataframe
2024-11-23 11:06:36,438:INFO:Initializing Ada Boost Classifier
2024-11-23 11:06:36,439:INFO:Total runtime is 0.3427678982416789 minutes
2024-11-23 11:06:36,445:INFO:SubProcess create_model() called ==================================
2024-11-23 11:06:36,445:INFO:Initializing create_model()
2024-11-23 11:06:36,446:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026971CE08B0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026974423C40>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-23 11:06:36,446:INFO:Checking exceptions
2024-11-23 11:06:36,446:INFO:Importing libraries
2024-11-23 11:06:36,446:INFO:Copying training dataset
2024-11-23 11:06:36,454:INFO:Defining folds
2024-11-23 11:06:36,454:INFO:Declaring metric variables
2024-11-23 11:06:36,458:INFO:Importing untrained model
2024-11-23 11:06:36,464:INFO:Ada Boost Classifier Imported successfully
2024-11-23 11:06:36,477:INFO:Starting cross validation
2024-11-23 11:06:36,486:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-23 11:06:36,716:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-23 11:06:36,719:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-23 11:06:36,723:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-23 11:06:36,749:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-23 11:06:37,044:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:37,088:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:37,092:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:37,093:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:37,094:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:37,100:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:37,101:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:37,108:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:37,112:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:37,210:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:37,217:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:37,224:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:37,369:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-23 11:06:37,396:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-23 11:06:37,406:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-23 11:06:37,433:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-23 11:06:37,670:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:37,677:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:37,684:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:37,698:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:37,704:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:37,707:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:37,710:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:37,713:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:37,720:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:37,741:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:37,745:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:37,750:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:37,924:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-23 11:06:37,948:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-23 11:06:38,293:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:38,299:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:38,305:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:38,318:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:38,321:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:38,325:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:38,339:INFO:Calculating mean and std
2024-11-23 11:06:38,341:INFO:Creating metrics dataframe
2024-11-23 11:06:38,349:INFO:Uploading results into container
2024-11-23 11:06:38,350:INFO:Uploading model into container now
2024-11-23 11:06:38,351:INFO:_master_model_container: 9
2024-11-23 11:06:38,351:INFO:_display_container: 2
2024-11-23 11:06:38,352:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-11-23 11:06:38,352:INFO:create_model() successfully completed......................................
2024-11-23 11:06:38,456:INFO:SubProcess create_model() end ==================================
2024-11-23 11:06:38,456:INFO:Creating metrics dataframe
2024-11-23 11:06:38,474:INFO:Initializing Gradient Boosting Classifier
2024-11-23 11:06:38,475:INFO:Total runtime is 0.3766947825749716 minutes
2024-11-23 11:06:38,479:INFO:SubProcess create_model() called ==================================
2024-11-23 11:06:38,480:INFO:Initializing create_model()
2024-11-23 11:06:38,481:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026971CE08B0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026974423C40>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-23 11:06:38,481:INFO:Checking exceptions
2024-11-23 11:06:38,482:INFO:Importing libraries
2024-11-23 11:06:38,482:INFO:Copying training dataset
2024-11-23 11:06:38,492:INFO:Defining folds
2024-11-23 11:06:38,492:INFO:Declaring metric variables
2024-11-23 11:06:38,504:INFO:Importing untrained model
2024-11-23 11:06:38,511:INFO:Gradient Boosting Classifier Imported successfully
2024-11-23 11:06:38,526:INFO:Starting cross validation
2024-11-23 11:06:38,529:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-23 11:06:39,227:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:39,234:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:39,238:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:39,238:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:39,240:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:39,244:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:39,244:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:39,251:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:39,253:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:39,277:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:39,285:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:39,294:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:39,923:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:39,927:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:39,931:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:39,936:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:39,941:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:39,944:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:39,966:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:39,973:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:39,979:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:39,998:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:40,004:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:40,010:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:40,385:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:40,392:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:40,392:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:40,395:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:40,396:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:40,401:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:40,423:INFO:Calculating mean and std
2024-11-23 11:06:40,426:INFO:Creating metrics dataframe
2024-11-23 11:06:40,437:INFO:Uploading results into container
2024-11-23 11:06:40,442:INFO:Uploading model into container now
2024-11-23 11:06:40,443:INFO:_master_model_container: 10
2024-11-23 11:06:40,443:INFO:_display_container: 2
2024-11-23 11:06:40,444:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-11-23 11:06:40,444:INFO:create_model() successfully completed......................................
2024-11-23 11:06:40,553:INFO:SubProcess create_model() end ==================================
2024-11-23 11:06:40,553:INFO:Creating metrics dataframe
2024-11-23 11:06:40,567:INFO:Initializing Linear Discriminant Analysis
2024-11-23 11:06:40,568:INFO:Total runtime is 0.4115862210591635 minutes
2024-11-23 11:06:40,571:INFO:SubProcess create_model() called ==================================
2024-11-23 11:06:40,571:INFO:Initializing create_model()
2024-11-23 11:06:40,572:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026971CE08B0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026974423C40>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-23 11:06:40,572:INFO:Checking exceptions
2024-11-23 11:06:40,572:INFO:Importing libraries
2024-11-23 11:06:40,572:INFO:Copying training dataset
2024-11-23 11:06:40,582:INFO:Defining folds
2024-11-23 11:06:40,582:INFO:Declaring metric variables
2024-11-23 11:06:40,588:INFO:Importing untrained model
2024-11-23 11:06:40,599:INFO:Linear Discriminant Analysis Imported successfully
2024-11-23 11:06:40,612:INFO:Starting cross validation
2024-11-23 11:06:40,617:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-23 11:06:40,941:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:40,947:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:40,948:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:40,952:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:40,954:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:40,954:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:40,958:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:40,960:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:40,979:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:40,987:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:40,987:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:40,994:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:41,267:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:41,273:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:41,279:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:41,297:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:41,299:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:41,304:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:41,305:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:41,310:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:41,312:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:41,317:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:41,324:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:41,329:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:41,508:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:41,514:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:41,518:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:41,531:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:41,535:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:41,538:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:41,544:INFO:Calculating mean and std
2024-11-23 11:06:41,545:INFO:Creating metrics dataframe
2024-11-23 11:06:41,552:INFO:Uploading results into container
2024-11-23 11:06:41,553:INFO:Uploading model into container now
2024-11-23 11:06:41,553:INFO:_master_model_container: 11
2024-11-23 11:06:41,554:INFO:_display_container: 2
2024-11-23 11:06:41,554:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-11-23 11:06:41,554:INFO:create_model() successfully completed......................................
2024-11-23 11:06:41,649:INFO:SubProcess create_model() end ==================================
2024-11-23 11:06:41,650:INFO:Creating metrics dataframe
2024-11-23 11:06:41,666:INFO:Initializing Extra Trees Classifier
2024-11-23 11:06:41,666:INFO:Total runtime is 0.4298743963241578 minutes
2024-11-23 11:06:41,670:INFO:SubProcess create_model() called ==================================
2024-11-23 11:06:41,670:INFO:Initializing create_model()
2024-11-23 11:06:41,670:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026971CE08B0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026974423C40>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-23 11:06:41,670:INFO:Checking exceptions
2024-11-23 11:06:41,670:INFO:Importing libraries
2024-11-23 11:06:41,670:INFO:Copying training dataset
2024-11-23 11:06:41,679:INFO:Defining folds
2024-11-23 11:06:41,679:INFO:Declaring metric variables
2024-11-23 11:06:41,693:INFO:Importing untrained model
2024-11-23 11:06:41,707:INFO:Extra Trees Classifier Imported successfully
2024-11-23 11:06:41,718:INFO:Starting cross validation
2024-11-23 11:06:41,721:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-23 11:06:42,422:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:42,423:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:42,427:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:42,428:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:42,434:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:42,435:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:42,438:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:42,444:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:42,452:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:42,563:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:42,569:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:42,576:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:43,113:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:43,115:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:43,119:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:43,121:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:43,128:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:43,129:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:43,135:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:43,136:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:43,153:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:43,333:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:43,339:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:43,345:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:43,633:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:43,639:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:43,644:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:43,665:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:43,668:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:43,671:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:43,691:INFO:Calculating mean and std
2024-11-23 11:06:43,694:INFO:Creating metrics dataframe
2024-11-23 11:06:43,703:INFO:Uploading results into container
2024-11-23 11:06:43,704:INFO:Uploading model into container now
2024-11-23 11:06:43,705:INFO:_master_model_container: 12
2024-11-23 11:06:43,705:INFO:_display_container: 2
2024-11-23 11:06:43,706:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-11-23 11:06:43,707:INFO:create_model() successfully completed......................................
2024-11-23 11:06:43,838:INFO:SubProcess create_model() end ==================================
2024-11-23 11:06:43,838:INFO:Creating metrics dataframe
2024-11-23 11:06:43,855:INFO:Initializing Light Gradient Boosting Machine
2024-11-23 11:06:43,856:INFO:Total runtime is 0.46638267040252696 minutes
2024-11-23 11:06:43,861:INFO:SubProcess create_model() called ==================================
2024-11-23 11:06:43,861:INFO:Initializing create_model()
2024-11-23 11:06:43,862:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026971CE08B0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026974423C40>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-23 11:06:43,862:INFO:Checking exceptions
2024-11-23 11:06:43,863:INFO:Importing libraries
2024-11-23 11:06:43,863:INFO:Copying training dataset
2024-11-23 11:06:43,870:INFO:Defining folds
2024-11-23 11:06:43,871:INFO:Declaring metric variables
2024-11-23 11:06:43,884:INFO:Importing untrained model
2024-11-23 11:06:43,892:INFO:Light Gradient Boosting Machine Imported successfully
2024-11-23 11:06:43,908:INFO:Starting cross validation
2024-11-23 11:06:43,911:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-23 11:06:44,560:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:44,560:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:44,567:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:44,569:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:44,574:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:44,575:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:44,585:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:44,593:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:44,602:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:44,655:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:44,662:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:44,669:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:45,476:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:45,484:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:45,492:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:45,504:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:45,512:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:45,523:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:45,565:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:45,572:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:45,579:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:45,694:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:45,703:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:45,711:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:46,032:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:46,038:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:46,046:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:46,047:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:46,076:INFO:Calculating mean and std
2024-11-23 11:06:46,080:INFO:Creating metrics dataframe
2024-11-23 11:06:46,089:INFO:Uploading results into container
2024-11-23 11:06:46,090:INFO:Uploading model into container now
2024-11-23 11:06:46,090:INFO:_master_model_container: 13
2024-11-23 11:06:46,091:INFO:_display_container: 2
2024-11-23 11:06:46,092:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-11-23 11:06:46,092:INFO:create_model() successfully completed......................................
2024-11-23 11:06:46,219:INFO:SubProcess create_model() end ==================================
2024-11-23 11:06:46,220:INFO:Creating metrics dataframe
2024-11-23 11:06:46,236:INFO:Initializing Dummy Classifier
2024-11-23 11:06:46,236:INFO:Total runtime is 0.5060433268547059 minutes
2024-11-23 11:06:46,242:INFO:SubProcess create_model() called ==================================
2024-11-23 11:06:46,242:INFO:Initializing create_model()
2024-11-23 11:06:46,242:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026971CE08B0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026974423C40>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-23 11:06:46,243:INFO:Checking exceptions
2024-11-23 11:06:46,243:INFO:Importing libraries
2024-11-23 11:06:46,243:INFO:Copying training dataset
2024-11-23 11:06:46,252:INFO:Defining folds
2024-11-23 11:06:46,253:INFO:Declaring metric variables
2024-11-23 11:06:46,270:INFO:Importing untrained model
2024-11-23 11:06:46,278:INFO:Dummy Classifier Imported successfully
2024-11-23 11:06:46,292:INFO:Starting cross validation
2024-11-23 11:06:46,297:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-23 11:06:46,624:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:46,628:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:46,631:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:46,634:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-23 11:06:46,635:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:46,638:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:46,639:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-23 11:06:46,642:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:46,672:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:46,675:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:46,678:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:46,682:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-23 11:06:46,683:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:46,686:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:46,686:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-23 11:06:46,690:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:46,956:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:46,959:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:46,966:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:46,967:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:46,970:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-23 11:06:46,970:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-23 11:06:46,973:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:46,974:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:47,001:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:47,007:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:47,011:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-23 11:06:47,011:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:47,016:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:47,018:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:47,021:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-23 11:06:47,025:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:47,269:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:47,270:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:47,273:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:47,274:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:47,275:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-23 11:06:47,276:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-23 11:06:47,277:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:47,278:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:47,293:INFO:Calculating mean and std
2024-11-23 11:06:47,299:INFO:Creating metrics dataframe
2024-11-23 11:06:47,308:INFO:Uploading results into container
2024-11-23 11:06:47,309:INFO:Uploading model into container now
2024-11-23 11:06:47,309:INFO:_master_model_container: 14
2024-11-23 11:06:47,310:INFO:_display_container: 2
2024-11-23 11:06:47,310:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-11-23 11:06:47,310:INFO:create_model() successfully completed......................................
2024-11-23 11:06:47,434:INFO:SubProcess create_model() end ==================================
2024-11-23 11:06:47,434:INFO:Creating metrics dataframe
2024-11-23 11:06:47,466:INFO:Initializing create_model()
2024-11-23 11:06:47,467:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026971CE08B0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-23 11:06:47,467:INFO:Checking exceptions
2024-11-23 11:06:47,469:INFO:Importing libraries
2024-11-23 11:06:47,470:INFO:Copying training dataset
2024-11-23 11:06:47,486:INFO:Defining folds
2024-11-23 11:06:47,486:INFO:Declaring metric variables
2024-11-23 11:06:47,487:INFO:Importing untrained model
2024-11-23 11:06:47,487:INFO:Declaring custom model
2024-11-23 11:06:47,488:INFO:Logistic Regression Imported successfully
2024-11-23 11:06:47,491:INFO:Cross validation set to False
2024-11-23 11:06:47,491:INFO:Fitting Model
2024-11-23 11:06:47,689:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-23 11:06:47,690:INFO:create_model() successfully completed......................................
2024-11-23 11:06:47,876:INFO:_master_model_container: 14
2024-11-23 11:06:47,877:INFO:_display_container: 2
2024-11-23 11:06:47,877:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-23 11:06:47,878:INFO:compare_models() successfully completed......................................
2024-11-23 11:06:47,881:INFO:Initializing create_model()
2024-11-23 11:06:47,881:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026971CE08B0>, estimator=rf, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-23 11:06:47,881:INFO:Checking exceptions
2024-11-23 11:06:47,919:INFO:Importing libraries
2024-11-23 11:06:47,921:INFO:Copying training dataset
2024-11-23 11:06:47,938:INFO:Defining folds
2024-11-23 11:06:47,939:INFO:Declaring metric variables
2024-11-23 11:06:47,944:INFO:Importing untrained model
2024-11-23 11:06:47,951:INFO:Random Forest Classifier Imported successfully
2024-11-23 11:06:47,963:INFO:Starting cross validation
2024-11-23 11:06:47,966:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-23 11:06:48,754:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:48,759:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:48,767:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:48,767:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:48,768:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:48,774:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:48,774:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:48,781:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:48,783:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:48,908:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:48,915:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:48,921:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:49,498:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:49,504:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:49,509:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:49,511:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:49,516:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:49,522:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:49,619:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:49,625:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:49,633:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:49,776:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:49,783:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:49,789:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:50,107:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:50,107:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:50,110:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:50,111:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:50,116:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:50,117:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:06:50,132:INFO:Calculating mean and std
2024-11-23 11:06:50,135:INFO:Creating metrics dataframe
2024-11-23 11:06:50,147:INFO:Finalizing model
2024-11-23 11:06:50,456:INFO:Uploading results into container
2024-11-23 11:06:50,457:INFO:Uploading model into container now
2024-11-23 11:06:50,476:INFO:_master_model_container: 15
2024-11-23 11:06:50,476:INFO:_display_container: 3
2024-11-23 11:06:50,477:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-11-23 11:06:50,478:INFO:create_model() successfully completed......................................
2024-11-23 11:06:50,583:INFO:Initializing tune_model()
2024-11-23 11:06:50,583:INFO:tune_model(estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026971CE08B0>)
2024-11-23 11:06:50,583:INFO:Checking exceptions
2024-11-23 11:06:50,626:INFO:Copying training dataset
2024-11-23 11:06:50,635:INFO:Checking base model
2024-11-23 11:06:50,635:INFO:Base model : Random Forest Classifier
2024-11-23 11:06:50,650:INFO:Declaring metric variables
2024-11-23 11:06:50,656:INFO:Defining Hyperparameters
2024-11-23 11:06:50,765:INFO:Tuning with n_jobs=-1
2024-11-23 11:06:50,766:INFO:Initializing RandomizedSearchCV
2024-11-23 11:07:16,804:INFO:best_params: {'actual_estimator__n_estimators': 190, 'actual_estimator__min_samples_split': 9, 'actual_estimator__min_samples_leaf': 6, 'actual_estimator__min_impurity_decrease': 0.001, 'actual_estimator__max_features': 'log2', 'actual_estimator__max_depth': 6, 'actual_estimator__criterion': 'gini', 'actual_estimator__class_weight': 'balanced_subsample', 'actual_estimator__bootstrap': False}
2024-11-23 11:07:16,808:INFO:Hyperparameter search completed
2024-11-23 11:07:16,808:INFO:SubProcess create_model() called ==================================
2024-11-23 11:07:16,809:INFO:Initializing create_model()
2024-11-23 11:07:16,810:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026971CE08B0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026970DDF190>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'n_estimators': 190, 'min_samples_split': 9, 'min_samples_leaf': 6, 'min_impurity_decrease': 0.001, 'max_features': 'log2', 'max_depth': 6, 'criterion': 'gini', 'class_weight': 'balanced_subsample', 'bootstrap': False})
2024-11-23 11:07:16,810:INFO:Checking exceptions
2024-11-23 11:07:16,810:INFO:Importing libraries
2024-11-23 11:07:16,810:INFO:Copying training dataset
2024-11-23 11:07:16,819:INFO:Defining folds
2024-11-23 11:07:16,820:INFO:Declaring metric variables
2024-11-23 11:07:16,828:INFO:Importing untrained model
2024-11-23 11:07:16,829:INFO:Declaring custom model
2024-11-23 11:07:16,855:INFO:Random Forest Classifier Imported successfully
2024-11-23 11:07:16,872:INFO:Starting cross validation
2024-11-23 11:07:16,879:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-23 11:07:17,922:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:17,930:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:17,936:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:17,970:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:17,977:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:17,984:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:18,129:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:18,136:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:18,143:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:18,418:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:18,425:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:18,431:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:18,982:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:18,989:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:18,996:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:19,031:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:19,037:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:19,044:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:19,531:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:19,541:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:19,550:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:19,766:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:19,782:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:19,795:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:20,017:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:20,024:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:20,031:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:20,034:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:20,040:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:20,047:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:20,070:INFO:Calculating mean and std
2024-11-23 11:07:20,072:INFO:Creating metrics dataframe
2024-11-23 11:07:20,082:INFO:Finalizing model
2024-11-23 11:07:20,895:INFO:Uploading results into container
2024-11-23 11:07:20,896:INFO:Uploading model into container now
2024-11-23 11:07:20,897:INFO:_master_model_container: 16
2024-11-23 11:07:20,897:INFO:_display_container: 4
2024-11-23 11:07:20,899:INFO:RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)
2024-11-23 11:07:20,899:INFO:create_model() successfully completed......................................
2024-11-23 11:07:21,044:INFO:SubProcess create_model() end ==================================
2024-11-23 11:07:21,044:INFO:choose_better activated
2024-11-23 11:07:21,051:INFO:SubProcess create_model() called ==================================
2024-11-23 11:07:21,052:INFO:Initializing create_model()
2024-11-23 11:07:21,052:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026971CE08B0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-23 11:07:21,053:INFO:Checking exceptions
2024-11-23 11:07:21,058:INFO:Importing libraries
2024-11-23 11:07:21,058:INFO:Copying training dataset
2024-11-23 11:07:21,068:INFO:Defining folds
2024-11-23 11:07:21,068:INFO:Declaring metric variables
2024-11-23 11:07:21,069:INFO:Importing untrained model
2024-11-23 11:07:21,069:INFO:Declaring custom model
2024-11-23 11:07:21,071:INFO:Random Forest Classifier Imported successfully
2024-11-23 11:07:21,072:INFO:Starting cross validation
2024-11-23 11:07:21,077:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-23 11:07:22,157:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:22,158:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:22,165:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:22,165:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:22,172:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:22,172:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:22,219:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:22,227:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:22,238:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:22,250:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:22,257:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:22,264:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:23,168:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:23,179:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:23,189:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:23,202:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:23,211:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:23,217:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:23,219:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:23,228:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:23,235:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:23,292:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:23,299:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:23,308:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:24,007:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:24,015:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:24,020:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:24,034:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:24,042:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:24,048:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-23 11:07:24,056:INFO:Calculating mean and std
2024-11-23 11:07:24,057:INFO:Creating metrics dataframe
2024-11-23 11:07:24,059:INFO:Finalizing model
2024-11-23 11:07:24,491:INFO:Uploading results into container
2024-11-23 11:07:24,492:INFO:Uploading model into container now
2024-11-23 11:07:24,493:INFO:_master_model_container: 17
2024-11-23 11:07:24,493:INFO:_display_container: 5
2024-11-23 11:07:24,494:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-11-23 11:07:24,494:INFO:create_model() successfully completed......................................
2024-11-23 11:07:24,592:INFO:SubProcess create_model() end ==================================
2024-11-23 11:07:24,593:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for Accuracy is 0.8886
2024-11-23 11:07:24,593:INFO:RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False) result for Accuracy is 0.9114
2024-11-23 11:07:24,594:INFO:RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False) is best model
2024-11-23 11:07:24,594:INFO:choose_better completed
2024-11-23 11:07:24,606:INFO:_master_model_container: 17
2024-11-23 11:07:24,606:INFO:_display_container: 4
2024-11-23 11:07:24,608:INFO:RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)
2024-11-23 11:07:24,608:INFO:tune_model() successfully completed......................................
2024-11-23 11:07:24,711:INFO:Initializing evaluate_model()
2024-11-23 11:07:24,711:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026971CE08B0>, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-11-23 11:07:24,735:INFO:Initializing plot_model()
2024-11-23 11:07:24,735:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026971CE08B0>, system=True)
2024-11-23 11:07:24,735:INFO:Checking exceptions
2024-11-23 11:07:24,788:INFO:Preloading libraries
2024-11-23 11:07:24,804:INFO:Copying training dataset
2024-11-23 11:07:24,804:INFO:Plot type: pipeline
2024-11-23 11:07:25,044:INFO:Visual Rendered Successfully
2024-11-23 11:07:25,165:INFO:plot_model() successfully completed......................................
2024-11-23 11:07:25,168:INFO:Initializing finalize_model()
2024-11-23 11:07:25,169:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026971CE08B0>, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-11-23 11:07:25,169:INFO:Finalizing RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)
2024-11-23 11:07:25,177:INFO:Initializing create_model()
2024-11-23 11:07:25,177:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026971CE08B0>, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=6, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=6, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=190, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-11-23 11:07:25,177:INFO:Checking exceptions
2024-11-23 11:07:25,179:INFO:Importing libraries
2024-11-23 11:07:25,179:INFO:Copying training dataset
2024-11-23 11:07:25,180:INFO:Defining folds
2024-11-23 11:07:25,180:INFO:Declaring metric variables
2024-11-23 11:07:25,180:INFO:Importing untrained model
2024-11-23 11:07:25,180:INFO:Declaring custom model
2024-11-23 11:07:25,181:INFO:Random Forest Classifier Imported successfully
2024-11-23 11:07:25,183:INFO:Cross validation set to False
2024-11-23 11:07:25,183:INFO:Fitting Model
2024-11-23 11:07:25,722:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['Age'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean')...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight='balanced_subsample',
                                        criterion='gini', max_depth=6,
                                        max_features='log2',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.001,
                                        min_samples_leaf=6, min_samples_split=9,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=190,
                                        n_jobs=-1, oob_score=False,
                                        random_state=123, verbose=0,
                                        warm_start=False))],
         verbose=False)
2024-11-23 11:07:25,722:INFO:create_model() successfully completed......................................
2024-11-23 11:07:25,841:INFO:_master_model_container: 17
2024-11-23 11:07:25,841:INFO:_display_container: 4
2024-11-23 11:07:25,995:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['Age'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean')...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight='balanced_subsample',
                                        criterion='gini', max_depth=6,
                                        max_features='log2',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.001,
                                        min_samples_leaf=6, min_samples_split=9,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=190,
                                        n_jobs=-1, oob_score=False,
                                        random_state=123, verbose=0,
                                        warm_start=False))],
         verbose=False)
2024-11-23 11:07:25,995:INFO:finalize_model() successfully completed......................................
2024-11-23 11:07:26,425:INFO:Initializing save_model()
2024-11-23 11:07:26,425:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['Age'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean')...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight='balanced_subsample',
                                        criterion='gini', max_depth=6,
                                        max_features='log2',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.001,
                                        min_samples_leaf=6, min_samples_split=9,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=190,
                                        n_jobs=-1, oob_score=False,
                                        random_state=123, verbose=0,
                                        warm_start=False))],
         verbose=False), model_name=rf_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\teklu\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['Age'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                                        {'col': 'Hemoptysis',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64},
                                                                        {'col': 'Breathing',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64},
                                                                        {'col': 'Arthritis',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64},
                                                                        {'col': 'Vomiting',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-11-23 11:07:26,425:INFO:Adding model into prep_pipe
2024-11-23 11:07:26,425:WARNING:Only Model saved as it was a pipeline.
2024-11-23 11:07:26,540:INFO:rf_model.pkl saved in current working directory
2024-11-23 11:07:26,703:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['Age'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean')...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight='balanced_subsample',
                                        criterion='gini', max_depth=6,
                                        max_features='log2',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.001,
                                        min_samples_leaf=6, min_samples_split=9,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=190,
                                        n_jobs=-1, oob_score=False,
                                        random_state=123, verbose=0,
                                        warm_start=False))],
         verbose=False)
2024-11-23 11:07:26,703:INFO:save_model() successfully completed......................................
2024-11-23 11:11:55,614:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\teklu\AppData\Local\Temp\joblib_memmapping_folder_4784_a153f6acac144fa6aef63cad7182b0f9_3f73935725494973880aa08289926ab7
  warnings.warn("Failed to delete temporary folder: {}"

2024-11-23 11:11:55,614:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\teklu\AppData\Local\Temp\joblib_memmapping_folder_4784_1c96ee20f0004e268416d8acab0c3e2d_3e959e5311a148c0a681f5550855bf24
  warnings.warn("Failed to delete temporary folder: {}"

2024-11-23 11:11:55,615:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\teklu\AppData\Local\Temp\joblib_memmapping_folder_4784_a153f6acac144fa6aef63cad7182b0f9_adb0b2961fb44ea88170323678f89e8d
  warnings.warn("Failed to delete temporary folder: {}"

2024-11-23 11:11:55,615:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\teklu\AppData\Local\Temp\joblib_memmapping_folder_4784_24353469004840a9a9321fda7d6395d0_db54eb947f07435caca9b72ea6655a7b
  warnings.warn("Failed to delete temporary folder: {}"

2024-11-23 11:11:55,615:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\teklu\AppData\Local\Temp\joblib_memmapping_folder_4784_a153f6acac144fa6aef63cad7182b0f9_d02a1ddd139a4ad39fc8b5ecef8e0883
  warnings.warn("Failed to delete temporary folder: {}"

2024-11-23 11:11:55,615:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\teklu\AppData\Local\Temp\joblib_memmapping_folder_4784_b1d32940a29746aa87706f1f2275e9b2_2cc6052a1e994dc5aa3e324d1a92aa3c
  warnings.warn("Failed to delete temporary folder: {}"

2024-11-23 11:11:55,615:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\teklu\AppData\Local\Temp\joblib_memmapping_folder_4784_a153f6acac144fa6aef63cad7182b0f9_6ab3c39598c74c9296e6615914c07d3c
  warnings.warn("Failed to delete temporary folder: {}"

2024-11-23 11:11:55,615:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\teklu\AppData\Local\Temp\joblib_memmapping_folder_4784_39de84ed78a14c29a59f94660f6c1ca5_44603d38648e4f25b021fcbcd5c37ae7
  warnings.warn("Failed to delete temporary folder: {}"

2024-11-23 11:11:55,615:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\teklu\AppData\Local\Temp\joblib_memmapping_folder_4784_a153f6acac144fa6aef63cad7182b0f9_b00f617060c94a1da73fa3d06fbdc522
  warnings.warn("Failed to delete temporary folder: {}"

2024-11-23 11:11:55,615:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\teklu\AppData\Local\Temp\joblib_memmapping_folder_4784_a4fbe27e0c3c433dad7995859939ce24_9720d10d85304d58b8c3aa1d1a68ff01
  warnings.warn("Failed to delete temporary folder: {}"

2024-11-23 11:11:55,616:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\teklu\AppData\Local\Temp\joblib_memmapping_folder_4784_a153f6acac144fa6aef63cad7182b0f9_306b548e58114d25bf50e0436bc4b8cd
  warnings.warn("Failed to delete temporary folder: {}"

2024-11-23 11:11:55,616:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\teklu\AppData\Local\Temp\joblib_memmapping_folder_4784_91456a5a72c04c698fb75a6b73016cef_8b1eb9b34ea04de5baf415a4c31676e3
  warnings.warn("Failed to delete temporary folder: {}"

2024-11-23 11:11:55,616:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\teklu\AppData\Local\Temp\joblib_memmapping_folder_4784_a153f6acac144fa6aef63cad7182b0f9_48b52db7e7fb421daa8a32687175ff76
  warnings.warn("Failed to delete temporary folder: {}"

2024-11-23 11:11:55,616:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\teklu\AppData\Local\Temp\joblib_memmapping_folder_4784_76f49a94f3fd4be6a161a78ad92462db_ac683f9b96d44478a50f89c1fe78fc37
  warnings.warn("Failed to delete temporary folder: {}"

2024-11-23 11:11:55,616:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\teklu\AppData\Local\Temp\joblib_memmapping_folder_4784_a153f6acac144fa6aef63cad7182b0f9_53b9b64a99024dc2acb6144ac84f8cf4
  warnings.warn("Failed to delete temporary folder: {}"

2024-11-23 11:11:55,616:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\teklu\AppData\Local\Temp\joblib_memmapping_folder_4784_42067a65c1c34d2bb555ee90f6d20884_0b95d2ebe34643c79ca357f6c74e9322
  warnings.warn("Failed to delete temporary folder: {}"

2024-11-23 11:11:55,616:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\teklu\AppData\Local\Temp\joblib_memmapping_folder_4784_a153f6acac144fa6aef63cad7182b0f9_8a0eaf58a1174a499fd20ca2fa46082d
  warnings.warn("Failed to delete temporary folder: {}"

2024-11-23 11:11:55,616:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\teklu\AppData\Local\Temp\joblib_memmapping_folder_4784_7cc023c73bcb4b11938a9510ed82ed22_ccf6ec8f1d994bfebae7e57b05fd2780
  warnings.warn("Failed to delete temporary folder: {}"

2024-11-23 11:11:55,616:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\teklu\AppData\Local\Temp\joblib_memmapping_folder_4784_a153f6acac144fa6aef63cad7182b0f9_58e7258f75214189aae6e90b644bdfab
  warnings.warn("Failed to delete temporary folder: {}"

2024-11-23 11:11:55,617:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\teklu\AppData\Local\Temp\joblib_memmapping_folder_4784_09b3a34228b64d04a3018c1e8cd63cfd_84fcf1d56c1545718e977e93508d9d51
  warnings.warn("Failed to delete temporary folder: {}"

2024-11-23 11:11:55,617:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\teklu\AppData\Local\Temp\joblib_memmapping_folder_4784_a153f6acac144fa6aef63cad7182b0f9_af295c7d407245c0852d83b6af91a238
  warnings.warn("Failed to delete temporary folder: {}"

2024-11-23 11:11:55,617:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\teklu\AppData\Local\Temp\joblib_memmapping_folder_4784_9780a4ded0a341f29e1580b4597a41dc_c7cdaee5e3df4cf6b40025cab073f959
  warnings.warn("Failed to delete temporary folder: {}"

2024-11-23 11:11:55,617:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\teklu\AppData\Local\Temp\joblib_memmapping_folder_4784_a153f6acac144fa6aef63cad7182b0f9_2ab4acf2c401449dab2d2dcca38f3986
  warnings.warn("Failed to delete temporary folder: {}"

2024-11-23 11:11:55,617:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\teklu\AppData\Local\Temp\joblib_memmapping_folder_4784_90ce2db7e3284b5e9997d1cdc9d9cff8_48f0b973b11f45398c2b8ff5b0ffd915
  warnings.warn("Failed to delete temporary folder: {}"

2024-11-23 11:11:55,617:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\teklu\AppData\Local\Temp\joblib_memmapping_folder_4784_a153f6acac144fa6aef63cad7182b0f9_7fbd3f8db03c4c2894ffb34149680d76
  warnings.warn("Failed to delete temporary folder: {}"

2024-11-23 11:11:55,617:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\teklu\AppData\Local\Temp\joblib_memmapping_folder_4784_c95a06cb909f478c820cc37265beaa3a_db5d3ef1943844e2bd78f67b500b33e4
  warnings.warn("Failed to delete temporary folder: {}"

2024-11-23 11:11:55,617:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\teklu\AppData\Local\Temp\joblib_memmapping_folder_4784_a153f6acac144fa6aef63cad7182b0f9_f36833e68a6e4390b97308cdce8b21e3
  warnings.warn("Failed to delete temporary folder: {}"

2024-11-23 11:11:55,617:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\teklu\AppData\Local\Temp\joblib_memmapping_folder_4784_1384c79e20c24f118393aa5ccf7b8aca_fd86662943b4465e9d6ba269229999f8
  warnings.warn("Failed to delete temporary folder: {}"

2024-11-23 11:11:55,618:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\teklu\AppData\Local\Temp\joblib_memmapping_folder_4784_a153f6acac144fa6aef63cad7182b0f9_17f0606ab06e492dbf471c7eb1c68d55
  warnings.warn("Failed to delete temporary folder: {}"

2024-11-23 11:11:55,618:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\teklu\AppData\Local\Temp\joblib_memmapping_folder_4784_ed0539da199e4f57983d14e6b9a9afbd_49ae6fcdb0494a9f9a5c8f7a2ecd1e9d
  warnings.warn("Failed to delete temporary folder: {}"

2024-11-23 11:11:55,618:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\teklu\AppData\Local\Temp\joblib_memmapping_folder_4784_a153f6acac144fa6aef63cad7182b0f9_39b8051a08914d77b2411c5037c7c19b
  warnings.warn("Failed to delete temporary folder: {}"

2024-11-23 11:11:55,618:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\teklu\AppData\Local\Temp\joblib_memmapping_folder_4784_6c31c15b50f14c5e8042f7b9f27e91cd_00bab94b31b149229cc92868d699971e
  warnings.warn("Failed to delete temporary folder: {}"

2024-11-23 11:11:55,618:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\teklu\AppData\Local\Temp\joblib_memmapping_folder_4784_a153f6acac144fa6aef63cad7182b0f9_8f968b6fb3df4c9f81c6e7715261570d
  warnings.warn("Failed to delete temporary folder: {}"

2024-11-23 11:11:55,618:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\teklu\AppData\Local\Temp\joblib_memmapping_folder_4784_a730033105e542cbbe109084c35b9aa4_79dcae61d0f54eecbe75b919ccb5884e
  warnings.warn("Failed to delete temporary folder: {}"

2024-11-23 11:11:55,618:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\teklu\AppData\Local\Temp\joblib_memmapping_folder_4784_a153f6acac144fa6aef63cad7182b0f9_45eecff7b33d4afe9b12bc13ed950674
  warnings.warn("Failed to delete temporary folder: {}"

2024-11-23 11:11:55,618:WARNING:C:\Users\teklu\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\teklu\AppData\Local\Temp\joblib_memmapping_folder_4784_a153f6acac144fa6aef63cad7182b0f9_63fd6c927b644facb5daac96bed71263
  warnings.warn("Failed to delete temporary folder: {}"

